
hello_world.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004db4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08004f64  08004f64  00014f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052fc  080052fc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080052fc  080052fc  000152fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005304  08005304  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005304  08005304  00015304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005308  08005308  00015308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800530c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000248  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002c0  200002c0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a561  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020ae  00000000  00000000  0002a609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000828  00000000  00000000  0002c6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000730  00000000  00000000  0002cee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230fc  00000000  00000000  0002d610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c6cb  00000000  00000000  0005070c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0586  00000000  00000000  0005cdd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d35d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026fc  00000000  00000000  0012d3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004f4c 	.word	0x08004f4c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08004f4c 	.word	0x08004f4c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <button_init>:
#include "drivers/button_driver.h"

void button_init(button_t* btn, GPIO_TypeDef* port, uint16_t pin) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	4613      	mov	r3, r2
 80005d0:	80fb      	strh	r3, [r7, #6]
    btn->port = port;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	68ba      	ldr	r2, [r7, #8]
 80005d6:	601a      	str	r2, [r3, #0]
    btn->pin = pin;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	88fa      	ldrh	r2, [r7, #6]
 80005dc:	809a      	strh	r2, [r3, #4]
    btn->last_raw_state = HAL_GPIO_ReadPin(port, pin);
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	4619      	mov	r1, r3
 80005e2:	68b8      	ldr	r0, [r7, #8]
 80005e4:	f001 fbee 	bl	8001dc4 <HAL_GPIO_ReadPin>
 80005e8:	4603      	mov	r3, r0
 80005ea:	461a      	mov	r2, r3
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	71da      	strb	r2, [r3, #7]
    btn->last_stable_state = btn->last_raw_state;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	79da      	ldrb	r2, [r3, #7]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	719a      	strb	r2, [r3, #6]
    btn->last_change_time = HAL_GetTick();
 80005f8:	f001 f856 	bl	80016a8 <HAL_GetTick>
 80005fc:	4602      	mov	r2, r0
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	609a      	str	r2, [r3, #8]
    btn->pressed_event_flag = 0;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	2200      	movs	r2, #0
 8000606:	731a      	strb	r2, [r3, #12]
}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <button_process>:


void button_process(button_t* btn) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	static uint32_t last_time = 0;
    GPIO_PinState raw = HAL_GPIO_ReadPin(btn->port, btn->pin);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	889b      	ldrh	r3, [r3, #4]
 8000620:	4619      	mov	r1, r3
 8000622:	4610      	mov	r0, r2
 8000624:	f001 fbce 	bl	8001dc4 <HAL_GPIO_ReadPin>
 8000628:	4603      	mov	r3, r0
 800062a:	73fb      	strb	r3, [r7, #15]
    uint32_t now = HAL_GetTick();
 800062c:	f001 f83c 	bl	80016a8 <HAL_GetTick>
 8000630:	60b8      	str	r0, [r7, #8]

    if (now - last_time < 10) return;
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <button_process+0x88>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	68ba      	ldr	r2, [r7, #8]
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	2b09      	cmp	r3, #9
 800063c:	d927      	bls.n	800068e <button_process+0x7e>
    last_time = now;
 800063e:	4a16      	ldr	r2, [pc, #88]	; (8000698 <button_process+0x88>)
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	6013      	str	r3, [r2, #0]

    if (raw != btn->last_raw_state) {
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	79db      	ldrb	r3, [r3, #7]
 8000648:	7bfa      	ldrb	r2, [r7, #15]
 800064a:	429a      	cmp	r2, r3
 800064c:	d006      	beq.n	800065c <button_process+0x4c>
        btn->last_raw_state = raw;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7bfa      	ldrb	r2, [r7, #15]
 8000652:	71da      	strb	r2, [r3, #7]
        btn->last_change_time = now;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	68ba      	ldr	r2, [r7, #8]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	e019      	b.n	8000690 <button_process+0x80>
    } else {
        if (raw != btn->last_stable_state) {
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	799b      	ldrb	r3, [r3, #6]
 8000660:	7bfa      	ldrb	r2, [r7, #15]
 8000662:	429a      	cmp	r2, r3
 8000664:	d014      	beq.n	8000690 <button_process+0x80>
            if ((now - btn->last_change_time) >= BUTTON_DEBOUNCE_MS) {
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	689b      	ldr	r3, [r3, #8]
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	2b27      	cmp	r3, #39	; 0x27
 8000670:	d90e      	bls.n	8000690 <button_process+0x80>
                if (btn->last_stable_state == GPIO_PIN_SET && raw == GPIO_PIN_RESET) {
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	799b      	ldrb	r3, [r3, #6]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d105      	bne.n	8000686 <button_process+0x76>
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d102      	bne.n	8000686 <button_process+0x76>
                    btn->pressed_event_flag = 1;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2201      	movs	r2, #1
 8000684:	731a      	strb	r2, [r3, #12]
                }
                btn->last_stable_state = raw;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	7bfa      	ldrb	r2, [r7, #15]
 800068a:	719a      	strb	r2, [r3, #6]
 800068c:	e000      	b.n	8000690 <button_process+0x80>
    if (now - last_time < 10) return;
 800068e:	bf00      	nop
            }
        }
    }
}
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000094 	.word	0x20000094

0800069c <button_is_pressed>:

uint8_t button_is_pressed(button_t* btn) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
    button_process(btn);
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff ffb3 	bl	8000610 <button_process>

    if (btn->pressed_event_flag) {
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	7b1b      	ldrb	r3, [r3, #12]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d004      	beq.n	80006bc <button_is_pressed+0x20>
        btn->pressed_event_flag = 0;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2200      	movs	r2, #0
 80006b6:	731a      	strb	r2, [r3, #12]
        return 1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	e000      	b.n	80006be <button_is_pressed+0x22>
    }
    return 0;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <led_init>:
#include "drivers/led_driver.h"

void led_init(led_t* led, GPIO_TypeDef* port, uint16_t pin) {
 80006c6:	b480      	push	{r7}
 80006c8:	b085      	sub	sp, #20
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	60f8      	str	r0, [r7, #12]
 80006ce:	60b9      	str	r1, [r7, #8]
 80006d0:	4613      	mov	r3, r2
 80006d2:	80fb      	strh	r3, [r7, #6]
    led->port = port;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	601a      	str	r2, [r3, #0]
    led->pin = pin;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	88fa      	ldrh	r2, [r7, #6]
 80006de:	809a      	strh	r2, [r3, #4]
}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <led_on>:

void led_on(led_t* led) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6818      	ldr	r0, [r3, #0]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	889b      	ldrh	r3, [r3, #4]
 80006fc:	2201      	movs	r2, #1
 80006fe:	4619      	mov	r1, r3
 8000700:	f001 fb78 	bl	8001df4 <HAL_GPIO_WritePin>
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <led_off>:

void led_off(led_t* led) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	6818      	ldr	r0, [r3, #0]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	889b      	ldrh	r3, [r3, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	4619      	mov	r1, r3
 8000720:	f001 fb68 	bl	8001df4 <HAL_GPIO_WritePin>
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <rb_empty>:
static volatile uint16_t tx_head = 0, tx_tail = 0;

static uint8_t rx_byte;
static uint8_t interrupts_enabled = 0;

static inline int rb_empty(uint16_t head, uint16_t tail) { return head == tail; }
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	460a      	mov	r2, r1
 8000736:	80fb      	strh	r3, [r7, #6]
 8000738:	4613      	mov	r3, r2
 800073a:	80bb      	strh	r3, [r7, #4]
 800073c:	88fa      	ldrh	r2, [r7, #6]
 800073e:	88bb      	ldrh	r3, [r7, #4]
 8000740:	429a      	cmp	r2, r3
 8000742:	bf0c      	ite	eq
 8000744:	2301      	moveq	r3, #1
 8000746:	2300      	movne	r3, #0
 8000748:	b2db      	uxtb	r3, r3
 800074a:	4618      	mov	r0, r3
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr

08000756 <rb_full>:
static inline int rb_full(uint16_t head, uint16_t tail, uint16_t size) { return ((head + 1) % size) == tail; }
 8000756:	b480      	push	{r7}
 8000758:	b083      	sub	sp, #12
 800075a:	af00      	add	r7, sp, #0
 800075c:	4603      	mov	r3, r0
 800075e:	80fb      	strh	r3, [r7, #6]
 8000760:	460b      	mov	r3, r1
 8000762:	80bb      	strh	r3, [r7, #4]
 8000764:	4613      	mov	r3, r2
 8000766:	807b      	strh	r3, [r7, #2]
 8000768:	88fb      	ldrh	r3, [r7, #6]
 800076a:	3301      	adds	r3, #1
 800076c:	887a      	ldrh	r2, [r7, #2]
 800076e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000772:	fb01 f202 	mul.w	r2, r1, r2
 8000776:	1a9a      	subs	r2, r3, r2
 8000778:	88bb      	ldrh	r3, [r7, #4]
 800077a:	429a      	cmp	r2, r3
 800077c:	bf0c      	ite	eq
 800077e:	2301      	moveq	r3, #1
 8000780:	2300      	movne	r3, #0
 8000782:	b2db      	uxtb	r3, r3
 8000784:	4618      	mov	r0, r3
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <uart_set_interrupts>:
/*
 * Установка режимы работы с прерываниями (enabled = 1) или
 * Выключение режима реботы с прерываниями (enabled = 0)
 */
void uart_set_interrupts(uint8_t enabled)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
    interrupts_enabled = enabled;
 800079a:	4a15      	ldr	r2, [pc, #84]	; (80007f0 <uart_set_interrupts+0x60>)
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	7013      	strb	r3, [r2, #0]
    if (enabled)
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d016      	beq.n	80007d4 <uart_set_interrupts+0x44>
    {
        rx_head = rx_tail = 0;
 80007a6:	2100      	movs	r1, #0
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <uart_set_interrupts+0x64>)
 80007aa:	460a      	mov	r2, r1
 80007ac:	801a      	strh	r2, [r3, #0]
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <uart_set_interrupts+0x68>)
 80007b0:	460a      	mov	r2, r1
 80007b2:	801a      	strh	r2, [r3, #0]
        tx_head = tx_tail = 0;
 80007b4:	2100      	movs	r1, #0
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <uart_set_interrupts+0x6c>)
 80007b8:	460a      	mov	r2, r1
 80007ba:	801a      	strh	r2, [r3, #0]
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <uart_set_interrupts+0x70>)
 80007be:	460a      	mov	r2, r1
 80007c0:	801a      	strh	r2, [r3, #0]

		HAL_NVIC_EnableIRQ(USART6_IRQn);
 80007c2:	2047      	movs	r0, #71	; 0x47
 80007c4:	f001 f897 	bl	80018f6 <HAL_NVIC_EnableIRQ>
        HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 80007c8:	2201      	movs	r2, #1
 80007ca:	490e      	ldr	r1, [pc, #56]	; (8000804 <uart_set_interrupts+0x74>)
 80007cc:	480e      	ldr	r0, [pc, #56]	; (8000808 <uart_set_interrupts+0x78>)
 80007ce:	f002 f949 	bl	8002a64 <HAL_UART_Receive_IT>
    {
        HAL_UART_AbortReceive_IT(&huart6);
        HAL_UART_AbortTransmit_IT(&huart6);
        HAL_NVIC_DisableIRQ(USART6_IRQn);
    }
}
 80007d2:	e008      	b.n	80007e6 <uart_set_interrupts+0x56>
        HAL_UART_AbortReceive_IT(&huart6);
 80007d4:	480c      	ldr	r0, [pc, #48]	; (8000808 <uart_set_interrupts+0x78>)
 80007d6:	f002 f9e9 	bl	8002bac <HAL_UART_AbortReceive_IT>
        HAL_UART_AbortTransmit_IT(&huart6);
 80007da:	480b      	ldr	r0, [pc, #44]	; (8000808 <uart_set_interrupts+0x78>)
 80007dc:	f002 f972 	bl	8002ac4 <HAL_UART_AbortTransmit_IT>
        HAL_NVIC_DisableIRQ(USART6_IRQn);
 80007e0:	2047      	movs	r0, #71	; 0x47
 80007e2:	f001 f896 	bl	8001912 <HAL_NVIC_DisableIRQ>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200001a1 	.word	0x200001a1
 80007f4:	2000019a 	.word	0x2000019a
 80007f8:	20000198 	.word	0x20000198
 80007fc:	2000019e 	.word	0x2000019e
 8000800:	2000019c 	.word	0x2000019c
 8000804:	200001a0 	.word	0x200001a0
 8000808:	2000022c 	.word	0x2000022c

0800080c <uart_get_interrupts>:

/*
 * Получаем текущее значение режима работы с прерываниями. Включен или нет
 */
uint8_t uart_get_interrupts(void) { return interrupts_enabled; }
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <uart_get_interrupts+0x14>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4618      	mov	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	200001a1 	.word	0x200001a1

08000824 <uart_print_char>:

/*
 * Передача на ПК от SDK 1 символа
 */
void uart_print_char(char ch)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
    if (!interrupts_enabled)
 800082e:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <uart_print_char+0x90>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d106      	bne.n	8000844 <uart_print_char+0x20>
    {
        HAL_UART_Transmit(&huart6, (uint8_t *)&ch, 1, UART_TIMEOUT);
 8000836:	1df9      	adds	r1, r7, #7
 8000838:	230a      	movs	r3, #10
 800083a:	2201      	movs	r2, #1
 800083c:	481e      	ldr	r0, [pc, #120]	; (80008b8 <uart_print_char+0x94>)
 800083e:	f001 ff98 	bl	8002772 <HAL_UART_Transmit>
        return;
 8000842:	e034      	b.n	80008ae <uart_print_char+0x8a>
    }
    uint16_t next = (tx_head + 1) % UART_TX_BUF_SIZE;
 8000844:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <uart_print_char+0x98>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	b29b      	uxth	r3, r3
 800084a:	3301      	adds	r3, #1
 800084c:	425a      	negs	r2, r3
 800084e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000852:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000856:	bf58      	it	pl
 8000858:	4253      	negpl	r3, r2
 800085a:	81fb      	strh	r3, [r7, #14]
    if (!rb_full(tx_head, tx_tail, UART_RX_BUF_SIZE))
 800085c:	4b17      	ldr	r3, [pc, #92]	; (80008bc <uart_print_char+0x98>)
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	b29b      	uxth	r3, r3
 8000862:	4a17      	ldr	r2, [pc, #92]	; (80008c0 <uart_print_char+0x9c>)
 8000864:	8812      	ldrh	r2, [r2, #0]
 8000866:	b291      	uxth	r1, r2
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff73 	bl	8000756 <rb_full>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d11b      	bne.n	80008ae <uart_print_char+0x8a>
    {
        tx_buf[tx_head] = (uint8_t)ch;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <uart_print_char+0x98>)
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	b29b      	uxth	r3, r3
 800087c:	461a      	mov	r2, r3
 800087e:	79f9      	ldrb	r1, [r7, #7]
 8000880:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <uart_print_char+0xa0>)
 8000882:	5499      	strb	r1, [r3, r2]
        tx_head = next;
 8000884:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <uart_print_char+0x98>)
 8000886:	89fb      	ldrh	r3, [r7, #14]
 8000888:	8013      	strh	r3, [r2, #0]
        if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_TXE))
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <uart_print_char+0x94>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000894:	2b80      	cmp	r3, #128	; 0x80
 8000896:	d10a      	bne.n	80008ae <uart_print_char+0x8a>
            HAL_UART_Transmit_IT(&huart6, &tx_buf[tx_tail], 1);
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <uart_print_char+0x9c>)
 800089a:	881b      	ldrh	r3, [r3, #0]
 800089c:	b29b      	uxth	r3, r3
 800089e:	461a      	mov	r2, r3
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <uart_print_char+0xa0>)
 80008a2:	4413      	add	r3, r2
 80008a4:	2201      	movs	r2, #1
 80008a6:	4619      	mov	r1, r3
 80008a8:	4803      	ldr	r0, [pc, #12]	; (80008b8 <uart_print_char+0x94>)
 80008aa:	f002 f896 	bl	80029da <HAL_UART_Transmit_IT>
    }
}
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200001a1 	.word	0x200001a1
 80008b8:	2000022c 	.word	0x2000022c
 80008bc:	2000019c 	.word	0x2000019c
 80008c0:	2000019e 	.word	0x2000019e
 80008c4:	20000118 	.word	0x20000118

080008c8 <uart_print_string>:

/*
 * Получение на ПК целой строки (вызов uart_print_char для каждого символа строки)
 */
void uart_print_string(char *str) { while (*str) uart_print_char(*str++); }
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	e006      	b.n	80008e0 <uart_print_string+0x18>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	1c5a      	adds	r2, r3, #1
 80008d6:	607a      	str	r2, [r7, #4]
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ffa2 	bl	8000824 <uart_print_char>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d1f4      	bne.n	80008d2 <uart_print_string+0xa>
 80008e8:	bf00      	nop
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <uart_println_string>:

/*
 * Получение на ПК строки с добавление в конце перехода на новую строку
 */
void uart_println_string(char *str)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	uart_print_string(str);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ffe3 	bl	80008c8 <uart_print_string>
    uart_print_string("\r\n");
 8000902:	4803      	ldr	r0, [pc, #12]	; (8000910 <uart_println_string+0x1c>)
 8000904:	f7ff ffe0 	bl	80008c8 <uart_print_string>
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	08004f64 	.word	0x08004f64

08000914 <uart_read_char>:

/*
 * Принимаем байт
 */
static int uart_read_char(char *ch)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
    if (!interrupts_enabled)
 800091c:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <uart_read_char+0x80>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d10c      	bne.n	800093e <uart_read_char+0x2a>
    {
        if (HAL_UART_Receive(&huart6, (uint8_t *)ch, 1, 0) == HAL_OK)
 8000924:	2300      	movs	r3, #0
 8000926:	2201      	movs	r2, #1
 8000928:	6879      	ldr	r1, [r7, #4]
 800092a:	481b      	ldr	r0, [pc, #108]	; (8000998 <uart_read_char+0x84>)
 800092c:	f001 ffb3 	bl	8002896 <HAL_UART_Receive>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d101      	bne.n	800093a <uart_read_char+0x26>
        	return 1;
 8000936:	2301      	movs	r3, #1
 8000938:	e027      	b.n	800098a <uart_read_char+0x76>
        else
            return 0;
 800093a:	2300      	movs	r3, #0
 800093c:	e025      	b.n	800098a <uart_read_char+0x76>
    }
    else
    {
    	if (rb_empty(rx_head, rx_tail)) return 0;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <uart_read_char+0x88>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	b29b      	uxth	r3, r3
 8000944:	4a16      	ldr	r2, [pc, #88]	; (80009a0 <uart_read_char+0x8c>)
 8000946:	8812      	ldrh	r2, [r2, #0]
 8000948:	b292      	uxth	r2, r2
 800094a:	4611      	mov	r1, r2
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff feed 	bl	800072c <rb_empty>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <uart_read_char+0x48>
 8000958:	2300      	movs	r3, #0
 800095a:	e016      	b.n	800098a <uart_read_char+0x76>
        *ch = rx_buf[rx_tail];
 800095c:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <uart_read_char+0x8c>)
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	b29b      	uxth	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <uart_read_char+0x90>)
 8000966:	5c9a      	ldrb	r2, [r3, r2]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	701a      	strb	r2, [r3, #0]
        rx_tail = (rx_tail + 1) % UART_RX_BUF_SIZE;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <uart_read_char+0x8c>)
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	b29b      	uxth	r3, r3
 8000972:	3301      	adds	r3, #1
 8000974:	425a      	negs	r2, r3
 8000976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800097a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800097e:	bf58      	it	pl
 8000980:	4253      	negpl	r3, r2
 8000982:	b29a      	uxth	r2, r3
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <uart_read_char+0x8c>)
 8000986:	801a      	strh	r2, [r3, #0]
        return 1;
 8000988:	2301      	movs	r3, #1
    }
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200001a1 	.word	0x200001a1
 8000998:	2000022c 	.word	0x2000022c
 800099c:	20000198 	.word	0x20000198
 80009a0:	2000019a 	.word	0x2000019a
 80009a4:	20000098 	.word	0x20000098

080009a8 <HAL_UART_RxCpltCallback>:

/*
 * Коллбэк на пришедший байт - срабатывает каждый раз, когда реально пришел новый байт
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
    if (huart->Instance != USART6) return;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a18      	ldr	r2, [pc, #96]	; (8000a18 <HAL_UART_RxCpltCallback+0x70>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d129      	bne.n	8000a0e <HAL_UART_RxCpltCallback+0x66>
    uint16_t next = (rx_head + 1) % UART_RX_BUF_SIZE;
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <HAL_UART_RxCpltCallback+0x74>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	3301      	adds	r3, #1
 80009c2:	425a      	negs	r2, r3
 80009c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80009cc:	bf58      	it	pl
 80009ce:	4253      	negpl	r3, r2
 80009d0:	81fb      	strh	r3, [r7, #14]
    if (!rb_full(rx_head, rx_tail, UART_RX_BUF_SIZE))
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_UART_RxCpltCallback+0x74>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <HAL_UART_RxCpltCallback+0x78>)
 80009da:	8812      	ldrh	r2, [r2, #0]
 80009dc:	b291      	uxth	r1, r2
 80009de:	2280      	movs	r2, #128	; 0x80
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff feb8 	bl	8000756 <rb_full>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d10a      	bne.n	8000a02 <HAL_UART_RxCpltCallback+0x5a>
    {
        rx_buf[rx_head] = rx_byte;
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <HAL_UART_RxCpltCallback+0x74>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <HAL_UART_RxCpltCallback+0x7c>)
 80009f6:	7819      	ldrb	r1, [r3, #0]
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <HAL_UART_RxCpltCallback+0x80>)
 80009fa:	5499      	strb	r1, [r3, r2]
        rx_head = next;
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_UART_RxCpltCallback+0x74>)
 80009fe:	89fb      	ldrh	r3, [r7, #14]
 8000a00:	8013      	strh	r3, [r2, #0]
    }
    HAL_UART_Receive_IT(&huart6, &rx_byte, 1);
 8000a02:	2201      	movs	r2, #1
 8000a04:	4907      	ldr	r1, [pc, #28]	; (8000a24 <HAL_UART_RxCpltCallback+0x7c>)
 8000a06:	4809      	ldr	r0, [pc, #36]	; (8000a2c <HAL_UART_RxCpltCallback+0x84>)
 8000a08:	f002 f82c 	bl	8002a64 <HAL_UART_Receive_IT>
 8000a0c:	e000      	b.n	8000a10 <HAL_UART_RxCpltCallback+0x68>
    if (huart->Instance != USART6) return;
 8000a0e:	bf00      	nop
}
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40011400 	.word	0x40011400
 8000a1c:	20000198 	.word	0x20000198
 8000a20:	2000019a 	.word	0x2000019a
 8000a24:	200001a0 	.word	0x200001a0
 8000a28:	20000098 	.word	0x20000098
 8000a2c:	2000022c 	.word	0x2000022c

08000a30 <HAL_UART_TxCpltCallback>:
/*
 * Коллбэк на уже отправленный байт - срабатывает каждый раз, когда реально отправила один байт из очереди tx_buf
 * Срабатывает после отправки текущего байта - продвигается хвост очереди
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
    if (huart->Instance != USART6) return;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a1d      	ldr	r2, [pc, #116]	; (8000ab4 <HAL_UART_TxCpltCallback+0x84>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d133      	bne.n	8000aaa <HAL_UART_TxCpltCallback+0x7a>
    if (!rb_empty(tx_head, tx_tail))
 8000a42:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <HAL_UART_TxCpltCallback+0x88>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <HAL_UART_TxCpltCallback+0x8c>)
 8000a4a:	8812      	ldrh	r2, [r2, #0]
 8000a4c:	b292      	uxth	r2, r2
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fe6b 	bl	800072c <rb_empty>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d127      	bne.n	8000aac <HAL_UART_TxCpltCallback+0x7c>
    {
        tx_tail = (tx_tail + 1) % UART_TX_BUF_SIZE;
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <HAL_UART_TxCpltCallback+0x8c>)
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	3301      	adds	r3, #1
 8000a64:	425a      	negs	r2, r3
 8000a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000a6e:	bf58      	it	pl
 8000a70:	4253      	negpl	r3, r2
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <HAL_UART_TxCpltCallback+0x8c>)
 8000a76:	801a      	strh	r2, [r3, #0]
        if (!rb_empty(tx_head, tx_tail))
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_UART_TxCpltCallback+0x88>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	4a0f      	ldr	r2, [pc, #60]	; (8000abc <HAL_UART_TxCpltCallback+0x8c>)
 8000a80:	8812      	ldrh	r2, [r2, #0]
 8000a82:	b292      	uxth	r2, r2
 8000a84:	4611      	mov	r1, r2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fe50 	bl	800072c <rb_empty>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d10c      	bne.n	8000aac <HAL_UART_TxCpltCallback+0x7c>
            HAL_UART_Transmit_IT(&huart6, &tx_buf[tx_tail], 1);
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <HAL_UART_TxCpltCallback+0x8c>)
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <HAL_UART_TxCpltCallback+0x90>)
 8000a9c:	4413      	add	r3, r2
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4808      	ldr	r0, [pc, #32]	; (8000ac4 <HAL_UART_TxCpltCallback+0x94>)
 8000aa4:	f001 ff99 	bl	80029da <HAL_UART_Transmit_IT>
 8000aa8:	e000      	b.n	8000aac <HAL_UART_TxCpltCallback+0x7c>
    if (huart->Instance != USART6) return;
 8000aaa:	bf00      	nop
    }
}
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40011400 	.word	0x40011400
 8000ab8:	2000019c 	.word	0x2000019c
 8000abc:	2000019e 	.word	0x2000019e
 8000ac0:	20000118 	.word	0x20000118
 8000ac4:	2000022c 	.word	0x2000022c

08000ac8 <uart_receive_line_task>:

/*
 *
 */
void uart_receive_line_task(void) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
    char c;
    while (uart_read_char(&c)) {
 8000ace:	e046      	b.n	8000b5e <uart_receive_line_task+0x96>
        uart_print_char(c);
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fea6 	bl	8000824 <uart_print_char>
        switch (c) {
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	2b7f      	cmp	r3, #127	; 0x7f
 8000adc:	d01d      	beq.n	8000b1a <uart_receive_line_task+0x52>
 8000ade:	2b7f      	cmp	r3, #127	; 0x7f
 8000ae0:	dc26      	bgt.n	8000b30 <uart_receive_line_task+0x68>
 8000ae2:	2b0d      	cmp	r3, #13
 8000ae4:	d005      	beq.n	8000af2 <uart_receive_line_task+0x2a>
 8000ae6:	2b0d      	cmp	r3, #13
 8000ae8:	dc22      	bgt.n	8000b30 <uart_receive_line_task+0x68>
 8000aea:	2b08      	cmp	r3, #8
 8000aec:	d015      	beq.n	8000b1a <uart_receive_line_task+0x52>
 8000aee:	2b0a      	cmp	r3, #10
 8000af0:	d11e      	bne.n	8000b30 <uart_receive_line_task+0x68>
        case '\r':
        case '\n':
            if (s_line_len > 0) {
 8000af2:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <uart_receive_line_task+0xb0>)
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d031      	beq.n	8000b5e <uart_receive_line_task+0x96>
                s_line_buf[s_line_len] = '\0';
 8000afa:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <uart_receive_line_task+0xb0>)
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	461a      	mov	r2, r3
 8000b00:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <uart_receive_line_task+0xb4>)
 8000b02:	2100      	movs	r1, #0
 8000b04:	5499      	strb	r1, [r3, r2]
                uart_println_string("");
 8000b06:	481e      	ldr	r0, [pc, #120]	; (8000b80 <uart_receive_line_task+0xb8>)
 8000b08:	f7ff fef4 	bl	80008f4 <uart_println_string>
                process_command_line(s_line_buf);
 8000b0c:	481b      	ldr	r0, [pc, #108]	; (8000b7c <uart_receive_line_task+0xb4>)
 8000b0e:	f000 fa51 	bl	8000fb4 <process_command_line>
                s_line_len = 0;
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <uart_receive_line_task+0xb0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	801a      	strh	r2, [r3, #0]
            }
            break;
 8000b18:	e021      	b.n	8000b5e <uart_receive_line_task+0x96>
        case '\b':
        case 0x7F:
            if (s_line_len > 0) s_line_len--;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <uart_receive_line_task+0xb0>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d01d      	beq.n	8000b5e <uart_receive_line_task+0x96>
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <uart_receive_line_task+0xb0>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <uart_receive_line_task+0xb0>)
 8000b2c:	801a      	strh	r2, [r3, #0]
            break;
 8000b2e:	e016      	b.n	8000b5e <uart_receive_line_task+0x96>
        default:
            if (isprint((unsigned)c) && s_line_len < UART_MAX_LINE - 1)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	3301      	adds	r3, #1
 8000b34:	4a13      	ldr	r2, [pc, #76]	; (8000b84 <uart_receive_line_task+0xbc>)
 8000b36:	4413      	add	r3, r2
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	f003 0397 	and.w	r3, r3, #151	; 0x97
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d00d      	beq.n	8000b5e <uart_receive_line_task+0x96>
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <uart_receive_line_task+0xb0>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	2b7e      	cmp	r3, #126	; 0x7e
 8000b48:	d809      	bhi.n	8000b5e <uart_receive_line_task+0x96>
                s_line_buf[s_line_len++] = c;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <uart_receive_line_task+0xb0>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	b291      	uxth	r1, r2
 8000b52:	4a09      	ldr	r2, [pc, #36]	; (8000b78 <uart_receive_line_task+0xb0>)
 8000b54:	8011      	strh	r1, [r2, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	79f9      	ldrb	r1, [r7, #7]
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <uart_receive_line_task+0xb4>)
 8000b5c:	5499      	strb	r1, [r3, r2]
    while (uart_read_char(&c)) {
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fed7 	bl	8000914 <uart_read_char>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d1b1      	bne.n	8000ad0 <uart_receive_line_task+0x8>
        }
    }
}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000224 	.word	0x20000224
 8000b7c:	200001a4 	.word	0x200001a4
 8000b80:	08004f68 	.word	0x08004f68
 8000b84:	0800514c 	.word	0x0800514c

08000b88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <MX_GPIO_Init+0xd4>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a2d      	ldr	r2, [pc, #180]	; (8000c5c <MX_GPIO_Init+0xd4>)
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <MX_GPIO_Init+0xd4>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0304 	and.w	r3, r3, #4
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <MX_GPIO_Init+0xd4>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a26      	ldr	r2, [pc, #152]	; (8000c5c <MX_GPIO_Init+0xd4>)
 8000bc4:	f043 0308 	orr.w	r3, r3, #8
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <MX_GPIO_Init+0xd4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0308 	and.w	r3, r3, #8
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <MX_GPIO_Init+0xd4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a1f      	ldr	r2, [pc, #124]	; (8000c5c <MX_GPIO_Init+0xd4>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_GPIO_Init+0xd4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_GPIO_Init+0xd4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <MX_GPIO_Init+0xd4>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_GPIO_Init+0xd4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000c14:	4812      	ldr	r0, [pc, #72]	; (8000c60 <MX_GPIO_Init+0xd8>)
 8000c16:	f001 f8ed 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480d      	ldr	r0, [pc, #52]	; (8000c64 <MX_GPIO_Init+0xdc>)
 8000c30:	f000 ff1c 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c34:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4804      	ldr	r0, [pc, #16]	; (8000c60 <MX_GPIO_Init+0xd8>)
 8000c4e:	f000 ff0d 	bl	8001a6c <HAL_GPIO_Init>

}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	; 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020c00 	.word	0x40020c00
 8000c64:	40020800 	.word	0x40020800

08000c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6c:	f000 fcb6 	bl	80015dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c70:	f000 f81c 	bl	8000cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c74:	f7ff ff88 	bl	8000b88 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000c78:	f000 f922 	bl	8000ec0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  traffic_light_init();
 8000c7c:	f000 fb3c 	bl	80012f8 <traffic_light_init>
  uart_set_interrupts(0);
 8000c80:	2000      	movs	r0, #0
 8000c82:	f7ff fd85 	bl	8000790 <uart_set_interrupts>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  // КОМАНДНАЯ СТРОКА
	  uart_receive_line_task();
 8000c86:	f7ff ff1f 	bl	8000ac8 <uart_receive_line_task>

	  // СВЕТОФОР
	  traffic_light_handler();
 8000c8a:	f000 fba1 	bl	80013d0 <traffic_light_handler>

	  // КНОПКА
	  button_process(&pedestrian_button);
 8000c8e:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <main+0x40>)
 8000c90:	f7ff fcbe 	bl	8000610 <button_process>
	  if (button_is_pressed(&pedestrian_button)) {
 8000c94:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <main+0x40>)
 8000c96:	f7ff fd01 	bl	800069c <button_is_pressed>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0f2      	beq.n	8000c86 <main+0x1e>
		  handle_button_press();
 8000ca0:	f000 fc32 	bl	8001508 <handle_button_press>
	  uart_receive_line_task();
 8000ca4:	e7ef      	b.n	8000c86 <main+0x1e>
 8000ca6:	bf00      	nop
 8000ca8:	2000028c 	.word	0x2000028c

08000cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b094      	sub	sp, #80	; 0x50
 8000cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb2:	f107 0320 	add.w	r3, r7, #32
 8000cb6:	2230      	movs	r2, #48	; 0x30
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f002 fff6 	bl	8003cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	4b23      	ldr	r3, [pc, #140]	; (8000d64 <SystemClock_Config+0xb8>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	4a22      	ldr	r2, [pc, #136]	; (8000d64 <SystemClock_Config+0xb8>)
 8000cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cde:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce0:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <SystemClock_Config+0xb8>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cec:	2300      	movs	r3, #0
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <SystemClock_Config+0xbc>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cf8:	4a1b      	ldr	r2, [pc, #108]	; (8000d68 <SystemClock_Config+0xbc>)
 8000cfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <SystemClock_Config+0xbc>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d10:	2301      	movs	r3, #1
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d14:	2310      	movs	r3, #16
 8000d16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1c:	f107 0320 	add.w	r3, r7, #32
 8000d20:	4618      	mov	r0, r3
 8000d22:	f001 f881 	bl	8001e28 <HAL_RCC_OscConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d2c:	f000 f81e 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d30:	230f      	movs	r3, #15
 8000d32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 fae4 	bl	8002318 <HAL_RCC_ClockConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d56:	f000 f809 	bl	8000d6c <Error_Handler>
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	3750      	adds	r7, #80	; 0x50
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40007000 	.word	0x40007000

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <Error_Handler+0x8>
	...

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <NMI_Handler+0x4>

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <MemManage_Handler+0x4>

08000dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e14:	f000 fc34 	bl	8001680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <USART6_IRQHandler+0x10>)
 8000e22:	f001 ff75 	bl	8002d10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000022c 	.word	0x2000022c

08000e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e38:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <_sbrk+0x5c>)
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <_sbrk+0x60>)
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <_sbrk+0x64>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d102      	bne.n	8000e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <_sbrk+0x64>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <_sbrk+0x68>)
 8000e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d207      	bcs.n	8000e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e60:	f002 fefa 	bl	8003c58 <__errno>
 8000e64:	4603      	mov	r3, r0
 8000e66:	220c      	movs	r2, #12
 8000e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e6e:	e009      	b.n	8000e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <_sbrk+0x64>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <_sbrk+0x64>)
 8000e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e82:	68fb      	ldr	r3, [r7, #12]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20030000 	.word	0x20030000
 8000e90:	00000400 	.word	0x00000400
 8000e94:	20000228 	.word	0x20000228
 8000e98:	200002c0 	.word	0x200002c0

08000e9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <SystemInit+0x20>)
 8000ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea6:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <SystemInit+0x20>)
 8000ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_USART6_UART_Init+0x4c>)
 8000ec6:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <MX_USART6_UART_Init+0x50>)
 8000ec8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57600;
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <MX_USART6_UART_Init+0x4c>)
 8000ecc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000ed0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_USART6_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_USART6_UART_Init+0x4c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_USART6_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_USART6_UART_Init+0x4c>)
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <MX_USART6_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_USART6_UART_Init+0x4c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_USART6_UART_Init+0x4c>)
 8000ef8:	f001 fbee 	bl	80026d8 <HAL_UART_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f02:	f7ff ff33 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	2000022c 	.word	0x2000022c
 8000f10:	40011400 	.word	0x40011400

08000f14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a1d      	ldr	r2, [pc, #116]	; (8000fa8 <HAL_UART_MspInit+0x94>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d133      	bne.n	8000f9e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <HAL_UART_MspInit+0x98>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	4a1b      	ldr	r2, [pc, #108]	; (8000fac <HAL_UART_MspInit+0x98>)
 8000f40:	f043 0320 	orr.w	r3, r3, #32
 8000f44:	6453      	str	r3, [r2, #68]	; 0x44
 8000f46:	4b19      	ldr	r3, [pc, #100]	; (8000fac <HAL_UART_MspInit+0x98>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	f003 0320 	and.w	r3, r3, #32
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_UART_MspInit+0x98>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a14      	ldr	r2, [pc, #80]	; (8000fac <HAL_UART_MspInit+0x98>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_UART_MspInit+0x98>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f6e:	23c0      	movs	r3, #192	; 0xc0
 8000f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f7e:	2308      	movs	r3, #8
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <HAL_UART_MspInit+0x9c>)
 8000f8a:	f000 fd6f 	bl	8001a6c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	2047      	movs	r0, #71	; 0x47
 8000f94:	f000 fc93 	bl	80018be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000f98:	2047      	movs	r0, #71	; 0x47
 8000f9a:	f000 fcac 	bl	80018f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	3728      	adds	r7, #40	; 0x28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40011400 	.word	0x40011400
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020800 	.word	0x40020800

08000fb4 <process_command_line>:
extern traffic_mode_t current_mode;
extern uint32_t red_timeout_sec;
extern traffic_light_state_t current_state;

void process_command_line(const char *line)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0b0      	sub	sp, #192	; 0xc0
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	6078      	str	r0, [r7, #4]
    char cmd[32];
    char arg1[32];
    char arg2[32];

    int count = sscanf(line, "%31s %31s %31s", cmd, arg1, arg2);
 8000fbc:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000fc0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000fc4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	49a5      	ldr	r1, [pc, #660]	; (8001264 <process_command_line+0x2b0>)
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f002 fea8 	bl	8003d24 <siscanf>
 8000fd4:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0

    if (count <= 0) {
 8000fd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	dc03      	bgt.n	8000fe8 <process_command_line+0x34>
        uart_println_string("Empty command");
 8000fe0:	48a1      	ldr	r0, [pc, #644]	; (8001268 <process_command_line+0x2b4>)
 8000fe2:	f7ff fc87 	bl	80008f4 <uart_println_string>
 8000fe6:	e139      	b.n	800125c <process_command_line+0x2a8>
        return;
    }

    command_type = CMD_UNKNOWN;
 8000fe8:	4ba0      	ldr	r3, [pc, #640]	; (800126c <process_command_line+0x2b8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]

    if (strcmp(cmd, "?") == 0)
 8000fee:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ff2:	499f      	ldr	r1, [pc, #636]	; (8001270 <process_command_line+0x2bc>)
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff f8fb 	bl	80001f0 <strcmp>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d103      	bne.n	8001008 <process_command_line+0x54>
        command_type = CMD_STATUS;
 8001000:	4b9a      	ldr	r3, [pc, #616]	; (800126c <process_command_line+0x2b8>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	e032      	b.n	800106e <process_command_line+0xba>
    else if (strcmp(cmd, "set") == 0 && count >= 2)
 8001008:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800100c:	4999      	ldr	r1, [pc, #612]	; (8001274 <process_command_line+0x2c0>)
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff f8ee 	bl	80001f0 <strcmp>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d129      	bne.n	800106e <process_command_line+0xba>
 800101a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800101e:	2b01      	cmp	r3, #1
 8001020:	dd25      	ble.n	800106e <process_command_line+0xba>
    {
        if (strcmp(arg1, "mode") == 0) command_type = CMD_SET_MODE;
 8001022:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001026:	4994      	ldr	r1, [pc, #592]	; (8001278 <process_command_line+0x2c4>)
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff f8e1 	bl	80001f0 <strcmp>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d103      	bne.n	800103c <process_command_line+0x88>
 8001034:	4b8d      	ldr	r3, [pc, #564]	; (800126c <process_command_line+0x2b8>)
 8001036:	2202      	movs	r2, #2
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	e018      	b.n	800106e <process_command_line+0xba>
        else if (strcmp(arg1, "timeout") == 0) command_type = CMD_SET_TIMEOUT;
 800103c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001040:	498e      	ldr	r1, [pc, #568]	; (800127c <process_command_line+0x2c8>)
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff f8d4 	bl	80001f0 <strcmp>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d103      	bne.n	8001056 <process_command_line+0xa2>
 800104e:	4b87      	ldr	r3, [pc, #540]	; (800126c <process_command_line+0x2b8>)
 8001050:	2203      	movs	r2, #3
 8001052:	701a      	strb	r2, [r3, #0]
 8001054:	e00b      	b.n	800106e <process_command_line+0xba>
        else if (strcmp(arg1, "interrupts") == 0) command_type = CMD_SET_INTERRUPTS;
 8001056:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800105a:	4989      	ldr	r1, [pc, #548]	; (8001280 <process_command_line+0x2cc>)
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff f8c7 	bl	80001f0 <strcmp>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <process_command_line+0xba>
 8001068:	4b80      	ldr	r3, [pc, #512]	; (800126c <process_command_line+0x2b8>)
 800106a:	2204      	movs	r2, #4
 800106c:	701a      	strb	r2, [r3, #0]
    }

    switch (command_type) {
 800106e:	4b7f      	ldr	r3, [pc, #508]	; (800126c <process_command_line+0x2b8>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	3b01      	subs	r3, #1
 8001074:	2b03      	cmp	r3, #3
 8001076:	f200 80ed 	bhi.w	8001254 <process_command_line+0x2a0>
 800107a:	a201      	add	r2, pc, #4	; (adr r2, 8001080 <process_command_line+0xcc>)
 800107c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001080:	08001091 	.word	0x08001091
 8001084:	08001161 	.word	0x08001161
 8001088:	080011a9 	.word	0x080011a9
 800108c:	080011fd 	.word	0x080011fd

    case CMD_STATUS:
    {
        char buffer[64];
        char *color = "";
 8001090:	4b7c      	ldr	r3, [pc, #496]	; (8001284 <process_command_line+0x2d0>)
 8001092:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        switch (current_state) {
 8001096:	4b7c      	ldr	r3, [pc, #496]	; (8001288 <process_command_line+0x2d4>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b03      	cmp	r3, #3
 800109c:	d81a      	bhi.n	80010d4 <process_command_line+0x120>
 800109e:	a201      	add	r2, pc, #4	; (adr r2, 80010a4 <process_command_line+0xf0>)
 80010a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a4:	080010b5 	.word	0x080010b5
 80010a8:	080010bd 	.word	0x080010bd
 80010ac:	080010c5 	.word	0x080010c5
 80010b0:	080010cd 	.word	0x080010cd
			case STATE_RED:             color = "red"; break;
 80010b4:	4b75      	ldr	r3, [pc, #468]	; (800128c <process_command_line+0x2d8>)
 80010b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80010ba:	e00f      	b.n	80010dc <process_command_line+0x128>
			case STATE_GREEN:           color = "green"; break;
 80010bc:	4b74      	ldr	r3, [pc, #464]	; (8001290 <process_command_line+0x2dc>)
 80010be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80010c2:	e00b      	b.n	80010dc <process_command_line+0x128>
			case STATE_GREEN_BLINKING:  color = "blinking green"; break;
 80010c4:	4b73      	ldr	r3, [pc, #460]	; (8001294 <process_command_line+0x2e0>)
 80010c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80010ca:	e007      	b.n	80010dc <process_command_line+0x128>
			case STATE_YELLOW:          color = "yellow"; break;
 80010cc:	4b72      	ldr	r3, [pc, #456]	; (8001298 <process_command_line+0x2e4>)
 80010ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80010d2:	e003      	b.n	80010dc <process_command_line+0x128>
			default:                 	color = "unknown"; break;
 80010d4:	4b71      	ldr	r3, [pc, #452]	; (800129c <process_command_line+0x2e8>)
 80010d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80010da:	bf00      	nop
		}

        // Color
        uart_print_string("State: ");
 80010dc:	4870      	ldr	r0, [pc, #448]	; (80012a0 <process_command_line+0x2ec>)
 80010de:	f7ff fbf3 	bl	80008c8 <uart_print_string>
        uart_println_string((char *)color);
 80010e2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80010e6:	f7ff fc05 	bl	80008f4 <uart_println_string>

        // Mode
        uart_print_string("Mode: ");
 80010ea:	486e      	ldr	r0, [pc, #440]	; (80012a4 <process_command_line+0x2f0>)
 80010ec:	f7ff fbec 	bl	80008c8 <uart_print_string>
        snprintf(buffer, sizeof(buffer), "%d", current_mode);
 80010f0:	4b6d      	ldr	r3, [pc, #436]	; (80012a8 <process_command_line+0x2f4>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	f107 0008 	add.w	r0, r7, #8
 80010f8:	4a6c      	ldr	r2, [pc, #432]	; (80012ac <process_command_line+0x2f8>)
 80010fa:	2140      	movs	r1, #64	; 0x40
 80010fc:	f002 fdde 	bl	8003cbc <sniprintf>
        uart_println_string(buffer);
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fbf5 	bl	80008f4 <uart_println_string>

        // Timeout
        uart_print_string("Timeout (sec): ");
 800110a:	4869      	ldr	r0, [pc, #420]	; (80012b0 <process_command_line+0x2fc>)
 800110c:	f7ff fbdc 	bl	80008c8 <uart_print_string>
        snprintf(buffer, sizeof(buffer), "%lu", (unsigned long)red_timeout_sec / 1000);
 8001110:	4b68      	ldr	r3, [pc, #416]	; (80012b4 <process_command_line+0x300>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a68      	ldr	r2, [pc, #416]	; (80012b8 <process_command_line+0x304>)
 8001116:	fba2 2303 	umull	r2, r3, r2, r3
 800111a:	099b      	lsrs	r3, r3, #6
 800111c:	f107 0008 	add.w	r0, r7, #8
 8001120:	4a66      	ldr	r2, [pc, #408]	; (80012bc <process_command_line+0x308>)
 8001122:	2140      	movs	r1, #64	; 0x40
 8001124:	f002 fdca 	bl	8003cbc <sniprintf>
        uart_println_string(buffer);
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fbe1 	bl	80008f4 <uart_println_string>

        // Interruption
        uart_print_string("Interruption: ");
 8001132:	4863      	ldr	r0, [pc, #396]	; (80012c0 <process_command_line+0x30c>)
 8001134:	f7ff fbc8 	bl	80008c8 <uart_print_string>
        snprintf(buffer, sizeof(buffer), "%c", uart_get_interrupts() ? 'I' : 'P');
 8001138:	f7ff fb68 	bl	800080c <uart_get_interrupts>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <process_command_line+0x192>
 8001142:	2349      	movs	r3, #73	; 0x49
 8001144:	e000      	b.n	8001148 <process_command_line+0x194>
 8001146:	2350      	movs	r3, #80	; 0x50
 8001148:	f107 0008 	add.w	r0, r7, #8
 800114c:	4a5d      	ldr	r2, [pc, #372]	; (80012c4 <process_command_line+0x310>)
 800114e:	2140      	movs	r1, #64	; 0x40
 8001150:	f002 fdb4 	bl	8003cbc <sniprintf>
        uart_println_string(buffer);
 8001154:	f107 0308 	add.w	r3, r7, #8
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fbcb 	bl	80008f4 <uart_println_string>

        break;
 800115e:	e07d      	b.n	800125c <process_command_line+0x2a8>
    }
    case CMD_SET_MODE:
    {
        if (count < 3) {
 8001160:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001164:	2b02      	cmp	r3, #2
 8001166:	dc03      	bgt.n	8001170 <process_command_line+0x1bc>
            uart_println_string("Usage: set mode 1|2");
 8001168:	4857      	ldr	r0, [pc, #348]	; (80012c8 <process_command_line+0x314>)
 800116a:	f7ff fbc3 	bl	80008f4 <uart_println_string>
            break;
 800116e:	e075      	b.n	800125c <process_command_line+0x2a8>
        }
        int mode = atoi(arg2);
 8001170:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001174:	4618      	mov	r0, r3
 8001176:	f002 fd6b 	bl	8003c50 <atoi>
 800117a:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        if (mode == 1 || mode == 2) {
 800117e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001182:	2b01      	cmp	r3, #1
 8001184:	d003      	beq.n	800118e <process_command_line+0x1da>
 8001186:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800118a:	2b02      	cmp	r3, #2
 800118c:	d108      	bne.n	80011a0 <process_command_line+0x1ec>
            current_mode = mode;
 800118e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b44      	ldr	r3, [pc, #272]	; (80012a8 <process_command_line+0x2f4>)
 8001196:	701a      	strb	r2, [r3, #0]
            uart_println_string("OK");
 8001198:	484c      	ldr	r0, [pc, #304]	; (80012cc <process_command_line+0x318>)
 800119a:	f7ff fbab 	bl	80008f4 <uart_println_string>
        } else {
            uart_println_string("ERROR: Invalid mode. Usage: set mode 1|2");
        }
        break;
 800119e:	e05d      	b.n	800125c <process_command_line+0x2a8>
            uart_println_string("ERROR: Invalid mode. Usage: set mode 1|2");
 80011a0:	484b      	ldr	r0, [pc, #300]	; (80012d0 <process_command_line+0x31c>)
 80011a2:	f7ff fba7 	bl	80008f4 <uart_println_string>
        break;
 80011a6:	e059      	b.n	800125c <process_command_line+0x2a8>
    }
    case CMD_SET_TIMEOUT: {
        if (count < 3) {
 80011a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	dc03      	bgt.n	80011b8 <process_command_line+0x204>
            uart_println_string("Usage: set timeout X");
 80011b0:	4848      	ldr	r0, [pc, #288]	; (80012d4 <process_command_line+0x320>)
 80011b2:	f7ff fb9f 	bl	80008f4 <uart_println_string>
            break;
 80011b6:	e051      	b.n	800125c <process_command_line+0x2a8>
        }
        int t = atoi(arg2) * 1000;
 80011b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011bc:	4618      	mov	r0, r3
 80011be:	f002 fd47 	bl	8003c50 <atoi>
 80011c2:	4603      	mov	r3, r0
 80011c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011c8:	fb02 f303 	mul.w	r3, r2, r3
 80011cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        if (t > 0 && t > RED_TIME_SHORT_MS) {
 80011d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	dd0d      	ble.n	80011f4 <process_command_line+0x240>
 80011d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80011dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e0:	4293      	cmp	r3, r2
 80011e2:	dd07      	ble.n	80011f4 <process_command_line+0x240>
            red_timeout_sec = (uint32_t)t;
 80011e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80011e8:	4a32      	ldr	r2, [pc, #200]	; (80012b4 <process_command_line+0x300>)
 80011ea:	6013      	str	r3, [r2, #0]
            uart_println_string("OK");
 80011ec:	4837      	ldr	r0, [pc, #220]	; (80012cc <process_command_line+0x318>)
 80011ee:	f7ff fb81 	bl	80008f4 <uart_println_string>
        } else {
            uart_println_string("ERROR: Timeout must be more than RED_TIME_SHORT");
        }
        break;
 80011f2:	e033      	b.n	800125c <process_command_line+0x2a8>
            uart_println_string("ERROR: Timeout must be more than RED_TIME_SHORT");
 80011f4:	4838      	ldr	r0, [pc, #224]	; (80012d8 <process_command_line+0x324>)
 80011f6:	f7ff fb7d 	bl	80008f4 <uart_println_string>
        break;
 80011fa:	e02f      	b.n	800125c <process_command_line+0x2a8>
    }
    case CMD_SET_INTERRUPTS: {
        if (count < 3) {
 80011fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001200:	2b02      	cmp	r3, #2
 8001202:	dc03      	bgt.n	800120c <process_command_line+0x258>
            uart_println_string("Usage: set interrupts on|off");
 8001204:	4835      	ldr	r0, [pc, #212]	; (80012dc <process_command_line+0x328>)
 8001206:	f7ff fb75 	bl	80008f4 <uart_println_string>
            break;
 800120a:	e027      	b.n	800125c <process_command_line+0x2a8>
        }
        if (strcmp(arg2, "on") == 0) {
 800120c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001210:	4933      	ldr	r1, [pc, #204]	; (80012e0 <process_command_line+0x32c>)
 8001212:	4618      	mov	r0, r3
 8001214:	f7fe ffec 	bl	80001f0 <strcmp>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d106      	bne.n	800122c <process_command_line+0x278>
            uart_set_interrupts(1);
 800121e:	2001      	movs	r0, #1
 8001220:	f7ff fab6 	bl	8000790 <uart_set_interrupts>
            uart_println_string("Interrupts ON");
 8001224:	482f      	ldr	r0, [pc, #188]	; (80012e4 <process_command_line+0x330>)
 8001226:	f7ff fb65 	bl	80008f4 <uart_println_string>
            uart_set_interrupts(0);
            uart_println_string("Interrupts OFF");
        } else {
            uart_println_string("ERROR: Invalid parameter (use on|off)");
        }
        break;
 800122a:	e017      	b.n	800125c <process_command_line+0x2a8>
        } else if (strcmp(arg2, "off") == 0) {
 800122c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001230:	492d      	ldr	r1, [pc, #180]	; (80012e8 <process_command_line+0x334>)
 8001232:	4618      	mov	r0, r3
 8001234:	f7fe ffdc 	bl	80001f0 <strcmp>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d106      	bne.n	800124c <process_command_line+0x298>
            uart_set_interrupts(0);
 800123e:	2000      	movs	r0, #0
 8001240:	f7ff faa6 	bl	8000790 <uart_set_interrupts>
            uart_println_string("Interrupts OFF");
 8001244:	4829      	ldr	r0, [pc, #164]	; (80012ec <process_command_line+0x338>)
 8001246:	f7ff fb55 	bl	80008f4 <uart_println_string>
        break;
 800124a:	e007      	b.n	800125c <process_command_line+0x2a8>
            uart_println_string("ERROR: Invalid parameter (use on|off)");
 800124c:	4828      	ldr	r0, [pc, #160]	; (80012f0 <process_command_line+0x33c>)
 800124e:	f7ff fb51 	bl	80008f4 <uart_println_string>
        break;
 8001252:	e003      	b.n	800125c <process_command_line+0x2a8>
    }
    default:
        uart_println_string("Unknown command");
 8001254:	4827      	ldr	r0, [pc, #156]	; (80012f4 <process_command_line+0x340>)
 8001256:	f7ff fb4d 	bl	80008f4 <uart_println_string>
        break;
 800125a:	bf00      	nop
    }
}
 800125c:	37b8      	adds	r7, #184	; 0xb8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	08004f6c 	.word	0x08004f6c
 8001268:	08004f7c 	.word	0x08004f7c
 800126c:	20000270 	.word	0x20000270
 8001270:	08004f8c 	.word	0x08004f8c
 8001274:	08004f90 	.word	0x08004f90
 8001278:	08004f94 	.word	0x08004f94
 800127c:	08004f9c 	.word	0x08004f9c
 8001280:	08004fa4 	.word	0x08004fa4
 8001284:	08004fb0 	.word	0x08004fb0
 8001288:	2000029c 	.word	0x2000029c
 800128c:	08004fb4 	.word	0x08004fb4
 8001290:	08004fb8 	.word	0x08004fb8
 8001294:	08004fc0 	.word	0x08004fc0
 8001298:	08004fd0 	.word	0x08004fd0
 800129c:	08004fd8 	.word	0x08004fd8
 80012a0:	08004fe0 	.word	0x08004fe0
 80012a4:	08004fe8 	.word	0x08004fe8
 80012a8:	20000004 	.word	0x20000004
 80012ac:	08004ff0 	.word	0x08004ff0
 80012b0:	08004ff4 	.word	0x08004ff4
 80012b4:	20000008 	.word	0x20000008
 80012b8:	10624dd3 	.word	0x10624dd3
 80012bc:	08005004 	.word	0x08005004
 80012c0:	08005008 	.word	0x08005008
 80012c4:	08005018 	.word	0x08005018
 80012c8:	0800501c 	.word	0x0800501c
 80012cc:	08005030 	.word	0x08005030
 80012d0:	08005034 	.word	0x08005034
 80012d4:	08005060 	.word	0x08005060
 80012d8:	08005078 	.word	0x08005078
 80012dc:	080050a8 	.word	0x080050a8
 80012e0:	080050c8 	.word	0x080050c8
 80012e4:	080050cc 	.word	0x080050cc
 80012e8:	080050dc 	.word	0x080050dc
 80012ec:	080050e0 	.word	0x080050e0
 80012f0:	080050f0 	.word	0x080050f0
 80012f4:	08005118 	.word	0x08005118

080012f8 <traffic_light_init>:
uint8_t next_red_short = 0;
traffic_mode_t current_mode = MODE_BUTTON_ENABLED; 	// for set mode 1 or set mode 2
uint32_t red_timeout_sec = RED_TIME_FULL_MS;


void traffic_light_init(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
    led_init(&green_led, LED_PORT, GREEN_LED);
 80012fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001300:	4911      	ldr	r1, [pc, #68]	; (8001348 <traffic_light_init+0x50>)
 8001302:	4812      	ldr	r0, [pc, #72]	; (800134c <traffic_light_init+0x54>)
 8001304:	f7ff f9df 	bl	80006c6 <led_init>
    led_init(&yellow_led, LED_PORT, YELLOW_LED);
 8001308:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800130c:	490e      	ldr	r1, [pc, #56]	; (8001348 <traffic_light_init+0x50>)
 800130e:	4810      	ldr	r0, [pc, #64]	; (8001350 <traffic_light_init+0x58>)
 8001310:	f7ff f9d9 	bl	80006c6 <led_init>
    led_init(&red_led, LED_PORT, RED_LED);
 8001314:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001318:	490b      	ldr	r1, [pc, #44]	; (8001348 <traffic_light_init+0x50>)
 800131a:	480e      	ldr	r0, [pc, #56]	; (8001354 <traffic_light_init+0x5c>)
 800131c:	f7ff f9d3 	bl	80006c6 <led_init>
    button_init(&pedestrian_button, BUTTON_PORT, GPIO_PIN_15);
 8001320:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001324:	490c      	ldr	r1, [pc, #48]	; (8001358 <traffic_light_init+0x60>)
 8001326:	480d      	ldr	r0, [pc, #52]	; (800135c <traffic_light_init+0x64>)
 8001328:	f7ff f94c 	bl	80005c4 <button_init>

    current_state = STATE_RED;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <traffic_light_init+0x68>)
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
    state_start_time = HAL_GetTick();
 8001332:	f000 f9b9 	bl	80016a8 <HAL_GetTick>
 8001336:	4603      	mov	r3, r0
 8001338:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <traffic_light_init+0x6c>)
 800133a:	6013      	str	r3, [r2, #0]
    set_traffic_light(COLOR_RED);
 800133c:	2000      	movs	r0, #0
 800133e:	f000 f813 	bl	8001368 <set_traffic_light>
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40020c00 	.word	0x40020c00
 800134c:	20000274 	.word	0x20000274
 8001350:	2000027c 	.word	0x2000027c
 8001354:	20000284 	.word	0x20000284
 8001358:	40020800 	.word	0x40020800
 800135c:	2000028c 	.word	0x2000028c
 8001360:	2000029c 	.word	0x2000029c
 8001364:	200002a0 	.word	0x200002a0

08001368 <set_traffic_light>:

void set_traffic_light(led_color_t color) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
    led_off(&red_led);
 8001372:	4814      	ldr	r0, [pc, #80]	; (80013c4 <set_traffic_light+0x5c>)
 8001374:	f7ff f9ca 	bl	800070c <led_off>
    led_off(&yellow_led);
 8001378:	4813      	ldr	r0, [pc, #76]	; (80013c8 <set_traffic_light+0x60>)
 800137a:	f7ff f9c7 	bl	800070c <led_off>
    led_off(&green_led);
 800137e:	4813      	ldr	r0, [pc, #76]	; (80013cc <set_traffic_light+0x64>)
 8001380:	f7ff f9c4 	bl	800070c <led_off>

    switch(color) {
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	2b03      	cmp	r3, #3
 8001388:	d817      	bhi.n	80013ba <set_traffic_light+0x52>
 800138a:	a201      	add	r2, pc, #4	; (adr r2, 8001390 <set_traffic_light+0x28>)
 800138c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001390:	080013a1 	.word	0x080013a1
 8001394:	080013a9 	.word	0x080013a9
 8001398:	080013b1 	.word	0x080013b1
 800139c:	080013b9 	.word	0x080013b9
        case COLOR_RED:
            led_on(&red_led);
 80013a0:	4808      	ldr	r0, [pc, #32]	; (80013c4 <set_traffic_light+0x5c>)
 80013a2:	f7ff f9a3 	bl	80006ec <led_on>
            break;
 80013a6:	e008      	b.n	80013ba <set_traffic_light+0x52>
        case COLOR_YELLOW:
            led_on(&yellow_led);
 80013a8:	4807      	ldr	r0, [pc, #28]	; (80013c8 <set_traffic_light+0x60>)
 80013aa:	f7ff f99f 	bl	80006ec <led_on>
            break;
 80013ae:	e004      	b.n	80013ba <set_traffic_light+0x52>
        case COLOR_GREEN:
            led_on(&green_led);
 80013b0:	4806      	ldr	r0, [pc, #24]	; (80013cc <set_traffic_light+0x64>)
 80013b2:	f7ff f99b 	bl	80006ec <led_on>
            break;
 80013b6:	e000      	b.n	80013ba <set_traffic_light+0x52>
        case COLOR_NONE:
            break;
 80013b8:	bf00      	nop
    }
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000284 	.word	0x20000284
 80013c8:	2000027c 	.word	0x2000027c
 80013cc:	20000274 	.word	0x20000274

080013d0 <traffic_light_handler>:

void traffic_light_handler(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	uint32_t current_time = HAL_GetTick();
 80013d6:	f000 f967 	bl	80016a8 <HAL_GetTick>
 80013da:	60f8      	str	r0, [r7, #12]
	uint32_t state_elapsed = current_time - state_start_time;
 80013dc:	4b43      	ldr	r3, [pc, #268]	; (80014ec <traffic_light_handler+0x11c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	60bb      	str	r3, [r7, #8]
	uint32_t red_time = (current_mode == MODE_BUTTON_ENABLED) ? (next_red_short ? RED_TIME_SHORT_MS : red_timeout_sec) : red_timeout_sec;
 80013e6:	4b42      	ldr	r3, [pc, #264]	; (80014f0 <traffic_light_handler+0x120>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d109      	bne.n	8001402 <traffic_light_handler+0x32>
 80013ee:	4b41      	ldr	r3, [pc, #260]	; (80014f4 <traffic_light_handler+0x124>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d102      	bne.n	80013fc <traffic_light_handler+0x2c>
 80013f6:	4b40      	ldr	r3, [pc, #256]	; (80014f8 <traffic_light_handler+0x128>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	e004      	b.n	8001406 <traffic_light_handler+0x36>
 80013fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8001400:	e001      	b.n	8001406 <traffic_light_handler+0x36>
 8001402:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <traffic_light_handler+0x128>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	607b      	str	r3, [r7, #4]

	if (current_time - last_time < 10) return;
 8001408:	4b3c      	ldr	r3, [pc, #240]	; (80014fc <traffic_light_handler+0x12c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b09      	cmp	r3, #9
 8001412:	d95f      	bls.n	80014d4 <traffic_light_handler+0x104>
	last_time = current_time;
 8001414:	4a39      	ldr	r2, [pc, #228]	; (80014fc <traffic_light_handler+0x12c>)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6013      	str	r3, [r2, #0]

	switch (current_state) {
 800141a:	4b39      	ldr	r3, [pc, #228]	; (8001500 <traffic_light_handler+0x130>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b03      	cmp	r3, #3
 8001420:	d861      	bhi.n	80014e6 <traffic_light_handler+0x116>
 8001422:	a201      	add	r2, pc, #4	; (adr r2, 8001428 <traffic_light_handler+0x58>)
 8001424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001428:	08001439 	.word	0x08001439
 800142c:	0800145b 	.word	0x0800145b
 8001430:	08001479 	.word	0x08001479
 8001434:	080014b9 	.word	0x080014b9

		case STATE_RED:
			set_traffic_light(COLOR_RED);
 8001438:	2000      	movs	r0, #0
 800143a:	f7ff ff95 	bl	8001368 <set_traffic_light>

			if (state_elapsed >= red_time) {
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	429a      	cmp	r2, r3
 8001444:	d348      	bcc.n	80014d8 <traffic_light_handler+0x108>
				current_state = STATE_GREEN;
 8001446:	4b2e      	ldr	r3, [pc, #184]	; (8001500 <traffic_light_handler+0x130>)
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
				state_start_time = current_time;
 800144c:	4a27      	ldr	r2, [pc, #156]	; (80014ec <traffic_light_handler+0x11c>)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6013      	str	r3, [r2, #0]
				next_red_short = 0;
 8001452:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <traffic_light_handler+0x124>)
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001458:	e03e      	b.n	80014d8 <traffic_light_handler+0x108>

		case STATE_GREEN:
			set_traffic_light(COLOR_GREEN);
 800145a:	2002      	movs	r0, #2
 800145c:	f7ff ff84 	bl	8001368 <set_traffic_light>

			if (state_elapsed >= GREEN_TIME_MS) {
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	f241 3287 	movw	r2, #4999	; 0x1387
 8001466:	4293      	cmp	r3, r2
 8001468:	d938      	bls.n	80014dc <traffic_light_handler+0x10c>
				current_state = STATE_GREEN_BLINKING;
 800146a:	4b25      	ldr	r3, [pc, #148]	; (8001500 <traffic_light_handler+0x130>)
 800146c:	2202      	movs	r2, #2
 800146e:	701a      	strb	r2, [r3, #0]
				state_start_time = current_time;
 8001470:	4a1e      	ldr	r2, [pc, #120]	; (80014ec <traffic_light_handler+0x11c>)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6013      	str	r3, [r2, #0]
			}
			break;
 8001476:	e031      	b.n	80014dc <traffic_light_handler+0x10c>

		case STATE_GREEN_BLINKING:
			if (state_elapsed % 1000 < 500) {
 8001478:	68ba      	ldr	r2, [r7, #8]
 800147a:	4b22      	ldr	r3, [pc, #136]	; (8001504 <traffic_light_handler+0x134>)
 800147c:	fba3 1302 	umull	r1, r3, r3, r2
 8001480:	099b      	lsrs	r3, r3, #6
 8001482:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001486:	fb01 f303 	mul.w	r3, r1, r3
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001490:	d203      	bcs.n	800149a <traffic_light_handler+0xca>
				set_traffic_light(COLOR_NONE);
 8001492:	2003      	movs	r0, #3
 8001494:	f7ff ff68 	bl	8001368 <set_traffic_light>
 8001498:	e002      	b.n	80014a0 <traffic_light_handler+0xd0>
			} else {
				set_traffic_light(COLOR_GREEN);
 800149a:	2002      	movs	r0, #2
 800149c:	f7ff ff64 	bl	8001368 <set_traffic_light>
			}

			if (state_elapsed >= GREEN_BLINK_TIME_MS) {
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d91a      	bls.n	80014e0 <traffic_light_handler+0x110>
				current_state = STATE_YELLOW;
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <traffic_light_handler+0x130>)
 80014ac:	2203      	movs	r2, #3
 80014ae:	701a      	strb	r2, [r3, #0]
				state_start_time = current_time;
 80014b0:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <traffic_light_handler+0x11c>)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6013      	str	r3, [r2, #0]
			}
			break;
 80014b6:	e013      	b.n	80014e0 <traffic_light_handler+0x110>

		case STATE_YELLOW:
			set_traffic_light(COLOR_YELLOW);
 80014b8:	2001      	movs	r0, #1
 80014ba:	f7ff ff55 	bl	8001368 <set_traffic_light>

			if (state_elapsed >= YELLOW_TIME_MS) {
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80014c4:	d30e      	bcc.n	80014e4 <traffic_light_handler+0x114>
				current_state = STATE_RED;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <traffic_light_handler+0x130>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
				state_start_time = current_time;
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <traffic_light_handler+0x11c>)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6013      	str	r3, [r2, #0]
			}
			break;
 80014d2:	e007      	b.n	80014e4 <traffic_light_handler+0x114>
	if (current_time - last_time < 10) return;
 80014d4:	bf00      	nop
 80014d6:	e006      	b.n	80014e6 <traffic_light_handler+0x116>
			break;
 80014d8:	bf00      	nop
 80014da:	e004      	b.n	80014e6 <traffic_light_handler+0x116>
			break;
 80014dc:	bf00      	nop
 80014de:	e002      	b.n	80014e6 <traffic_light_handler+0x116>
			break;
 80014e0:	bf00      	nop
 80014e2:	e000      	b.n	80014e6 <traffic_light_handler+0x116>
			break;
 80014e4:	bf00      	nop
	}
}
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200002a0 	.word	0x200002a0
 80014f0:	20000004 	.word	0x20000004
 80014f4:	200002a4 	.word	0x200002a4
 80014f8:	20000008 	.word	0x20000008
 80014fc:	200002a8 	.word	0x200002a8
 8001500:	2000029c 	.word	0x2000029c
 8001504:	10624dd3 	.word	0x10624dd3

08001508 <handle_button_press>:


void handle_button_press(void) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0

	if (current_mode == MODE_BUTTON_DISABLED) return;
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <handle_button_press+0x70>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d02b      	beq.n	800156e <handle_button_press+0x66>

    if (current_state == STATE_RED) {
 8001516:	4b19      	ldr	r3, [pc, #100]	; (800157c <handle_button_press+0x74>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d11b      	bne.n	8001556 <handle_button_press+0x4e>
        uint32_t red_elapsed = HAL_GetTick() - state_start_time;
 800151e:	f000 f8c3 	bl	80016a8 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <handle_button_press+0x78>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	607b      	str	r3, [r7, #4]

        if (red_elapsed >= RED_TIME_SHORT_MS) {
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001532:	4293      	cmp	r3, r2
 8001534:	d90b      	bls.n	800154e <handle_button_press+0x46>
            current_state = STATE_GREEN;
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <handle_button_press+0x74>)
 8001538:	2201      	movs	r2, #1
 800153a:	701a      	strb	r2, [r3, #0]
            state_start_time = HAL_GetTick();
 800153c:	f000 f8b4 	bl	80016a8 <HAL_GetTick>
 8001540:	4603      	mov	r3, r0
 8001542:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <handle_button_press+0x78>)
 8001544:	6013      	str	r3, [r2, #0]
            next_red_short = 0;
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <handle_button_press+0x7c>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
 800154c:	e010      	b.n	8001570 <handle_button_press+0x68>
        } else {
            next_red_short = 1;
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <handle_button_press+0x7c>)
 8001550:	2201      	movs	r2, #1
 8001552:	701a      	strb	r2, [r3, #0]
 8001554:	e00c      	b.n	8001570 <handle_button_press+0x68>
        }
    } else if (current_state == STATE_YELLOW || current_state == STATE_GREEN_BLINKING) {
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <handle_button_press+0x74>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d003      	beq.n	8001566 <handle_button_press+0x5e>
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <handle_button_press+0x74>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d104      	bne.n	8001570 <handle_button_press+0x68>
        next_red_short = 1;
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <handle_button_press+0x7c>)
 8001568:	2201      	movs	r2, #1
 800156a:	701a      	strb	r2, [r3, #0]
 800156c:	e000      	b.n	8001570 <handle_button_press+0x68>
	if (current_mode == MODE_BUTTON_DISABLED) return;
 800156e:	bf00      	nop
    }
}
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000004 	.word	0x20000004
 800157c:	2000029c 	.word	0x2000029c
 8001580:	200002a0 	.word	0x200002a0
 8001584:	200002a4 	.word	0x200002a4

08001588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800158c:	480d      	ldr	r0, [pc, #52]	; (80015c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800158e:	490e      	ldr	r1, [pc, #56]	; (80015c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001594:	e002      	b.n	800159c <LoopCopyDataInit>

08001596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159a:	3304      	adds	r3, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800159c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a0:	d3f9      	bcc.n	8001596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a2:	4a0b      	ldr	r2, [pc, #44]	; (80015d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015a4:	4c0b      	ldr	r4, [pc, #44]	; (80015d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a8:	e001      	b.n	80015ae <LoopFillZerobss>

080015aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ac:	3204      	adds	r2, #4

080015ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b0:	d3fb      	bcc.n	80015aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015b2:	f7ff fc73 	bl	8000e9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015b6:	f002 fb55 	bl	8003c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ba:	f7ff fb55 	bl	8000c68 <main>
  bx  lr    
 80015be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80015cc:	0800530c 	.word	0x0800530c
  ldr r2, =_sbss
 80015d0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80015d4:	200002c0 	.word	0x200002c0

080015d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d8:	e7fe      	b.n	80015d8 <ADC_IRQHandler>
	...

080015dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015e0:	4b0e      	ldr	r3, [pc, #56]	; (800161c <HAL_Init+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0d      	ldr	r2, [pc, #52]	; (800161c <HAL_Init+0x40>)
 80015e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <HAL_Init+0x40>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0a      	ldr	r2, [pc, #40]	; (800161c <HAL_Init+0x40>)
 80015f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <HAL_Init+0x40>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a07      	ldr	r2, [pc, #28]	; (800161c <HAL_Init+0x40>)
 80015fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001602:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001604:	2003      	movs	r0, #3
 8001606:	f000 f94f 	bl	80018a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160a:	200f      	movs	r0, #15
 800160c:	f000 f808 	bl	8001620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001610:	f7ff fbb2 	bl	8000d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023c00 	.word	0x40023c00

08001620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_InitTick+0x54>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_InitTick+0x58>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001636:	fbb3 f3f1 	udiv	r3, r3, r1
 800163a:	fbb2 f3f3 	udiv	r3, r2, r3
 800163e:	4618      	mov	r0, r3
 8001640:	f000 f975 	bl	800192e <HAL_SYSTICK_Config>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e00e      	b.n	800166c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b0f      	cmp	r3, #15
 8001652:	d80a      	bhi.n	800166a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001654:	2200      	movs	r2, #0
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800165c:	f000 f92f 	bl	80018be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001660:	4a06      	ldr	r2, [pc, #24]	; (800167c <HAL_InitTick+0x5c>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	e000      	b.n	800166c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000000 	.word	0x20000000
 8001678:	20000010 	.word	0x20000010
 800167c:	2000000c 	.word	0x2000000c

08001680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_IncTick+0x20>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_IncTick+0x24>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4413      	add	r3, r2
 8001690:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <HAL_IncTick+0x24>)
 8001692:	6013      	str	r3, [r2, #0]
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000010 	.word	0x20000010
 80016a4:	200002ac 	.word	0x200002ac

080016a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return uwTick;
 80016ac:	4b03      	ldr	r3, [pc, #12]	; (80016bc <HAL_GetTick+0x14>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	200002ac 	.word	0x200002ac

080016c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016dc:	4013      	ands	r3, r2
 80016de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	60d3      	str	r3, [r2, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <__NVIC_GetPriorityGrouping+0x18>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	f003 0307 	and.w	r3, r3, #7
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	2b00      	cmp	r3, #0
 8001734:	db0b      	blt.n	800174e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	f003 021f 	and.w	r2, r3, #31
 800173c:	4907      	ldr	r1, [pc, #28]	; (800175c <__NVIC_EnableIRQ+0x38>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	095b      	lsrs	r3, r3, #5
 8001744:	2001      	movs	r0, #1
 8001746:	fa00 f202 	lsl.w	r2, r0, r2
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000e100 	.word	0xe000e100

08001760 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	2b00      	cmp	r3, #0
 8001770:	db12      	blt.n	8001798 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	f003 021f 	and.w	r2, r3, #31
 8001778:	490a      	ldr	r1, [pc, #40]	; (80017a4 <__NVIC_DisableIRQ+0x44>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	095b      	lsrs	r3, r3, #5
 8001780:	2001      	movs	r0, #1
 8001782:	fa00 f202 	lsl.w	r2, r0, r2
 8001786:	3320      	adds	r3, #32
 8001788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800178c:	f3bf 8f4f 	dsb	sy
}
 8001790:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001792:	f3bf 8f6f 	isb	sy
}
 8001796:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000e100 	.word	0xe000e100

080017a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	db0a      	blt.n	80017d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	490c      	ldr	r1, [pc, #48]	; (80017f4 <__NVIC_SetPriority+0x4c>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	0112      	lsls	r2, r2, #4
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	440b      	add	r3, r1
 80017cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d0:	e00a      	b.n	80017e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4908      	ldr	r1, [pc, #32]	; (80017f8 <__NVIC_SetPriority+0x50>)
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	3b04      	subs	r3, #4
 80017e0:	0112      	lsls	r2, r2, #4
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	440b      	add	r3, r1
 80017e6:	761a      	strb	r2, [r3, #24]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000e100 	.word	0xe000e100
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	; 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f1c3 0307 	rsb	r3, r3, #7
 8001816:	2b04      	cmp	r3, #4
 8001818:	bf28      	it	cs
 800181a:	2304      	movcs	r3, #4
 800181c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3304      	adds	r3, #4
 8001822:	2b06      	cmp	r3, #6
 8001824:	d902      	bls.n	800182c <NVIC_EncodePriority+0x30>
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3b03      	subs	r3, #3
 800182a:	e000      	b.n	800182e <NVIC_EncodePriority+0x32>
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43da      	mvns	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	401a      	ands	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001844:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa01 f303 	lsl.w	r3, r1, r3
 800184e:	43d9      	mvns	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	4313      	orrs	r3, r2
         );
}
 8001856:	4618      	mov	r0, r3
 8001858:	3724      	adds	r7, #36	; 0x24
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001874:	d301      	bcc.n	800187a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001876:	2301      	movs	r3, #1
 8001878:	e00f      	b.n	800189a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <SysTick_Config+0x40>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001882:	210f      	movs	r1, #15
 8001884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001888:	f7ff ff8e 	bl	80017a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <SysTick_Config+0x40>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001892:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <SysTick_Config+0x40>)
 8001894:	2207      	movs	r2, #7
 8001896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	e000e010 	.word	0xe000e010

080018a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ff05 	bl	80016c0 <__NVIC_SetPriorityGrouping>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d0:	f7ff ff1a 	bl	8001708 <__NVIC_GetPriorityGrouping>
 80018d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	68b9      	ldr	r1, [r7, #8]
 80018da:	6978      	ldr	r0, [r7, #20]
 80018dc:	f7ff ff8e 	bl	80017fc <NVIC_EncodePriority>
 80018e0:	4602      	mov	r2, r0
 80018e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e6:	4611      	mov	r1, r2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff5d 	bl	80017a8 <__NVIC_SetPriority>
}
 80018ee:	bf00      	nop
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff0d 	bl	8001724 <__NVIC_EnableIRQ>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff1d 	bl	8001760 <__NVIC_DisableIRQ>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ff94 	bl	8001864 <SysTick_Config>
 800193c:	4603      	mov	r3, r0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001954:	f7ff fea8 	bl	80016a8 <HAL_GetTick>
 8001958:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d008      	beq.n	8001978 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2280      	movs	r2, #128	; 0x80
 800196a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e052      	b.n	8001a1e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0216 	bic.w	r2, r2, #22
 8001986:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	695a      	ldr	r2, [r3, #20]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001996:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	2b00      	cmp	r3, #0
 800199e:	d103      	bne.n	80019a8 <HAL_DMA_Abort+0x62>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d007      	beq.n	80019b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0208 	bic.w	r2, r2, #8
 80019b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0201 	bic.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019c8:	e013      	b.n	80019f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019ca:	f7ff fe6d 	bl	80016a8 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b05      	cmp	r3, #5
 80019d6:	d90c      	bls.n	80019f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2220      	movs	r2, #32
 80019dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2203      	movs	r2, #3
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e015      	b.n	8001a1e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1e4      	bne.n	80019ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a04:	223f      	movs	r2, #63	; 0x3f
 8001a06:	409a      	lsls	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d004      	beq.n	8001a44 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2280      	movs	r2, #128	; 0x80
 8001a3e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e00c      	b.n	8001a5e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2205      	movs	r2, #5
 8001a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0201 	bic.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	e177      	b.n	8001d78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a88:	2201      	movs	r2, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	f040 8166 	bne.w	8001d72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d005      	beq.n	8001abe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d130      	bne.n	8001b20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	2203      	movs	r2, #3
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af4:	2201      	movs	r2, #1
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	f003 0201 	and.w	r2, r3, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d017      	beq.n	8001b5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2203      	movs	r2, #3
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d123      	bne.n	8001bb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	08da      	lsrs	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3208      	adds	r2, #8
 8001b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	220f      	movs	r2, #15
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	08da      	lsrs	r2, r3, #3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3208      	adds	r2, #8
 8001baa:	69b9      	ldr	r1, [r7, #24]
 8001bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	2203      	movs	r2, #3
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0203 	and.w	r2, r3, #3
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80c0 	beq.w	8001d72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b66      	ldr	r3, [pc, #408]	; (8001d90 <HAL_GPIO_Init+0x324>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4a65      	ldr	r2, [pc, #404]	; (8001d90 <HAL_GPIO_Init+0x324>)
 8001bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c00:	6453      	str	r3, [r2, #68]	; 0x44
 8001c02:	4b63      	ldr	r3, [pc, #396]	; (8001d90 <HAL_GPIO_Init+0x324>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c0e:	4a61      	ldr	r2, [pc, #388]	; (8001d94 <HAL_GPIO_Init+0x328>)
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	089b      	lsrs	r3, r3, #2
 8001c14:	3302      	adds	r3, #2
 8001c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	220f      	movs	r2, #15
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a58      	ldr	r2, [pc, #352]	; (8001d98 <HAL_GPIO_Init+0x32c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d037      	beq.n	8001caa <HAL_GPIO_Init+0x23e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a57      	ldr	r2, [pc, #348]	; (8001d9c <HAL_GPIO_Init+0x330>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d031      	beq.n	8001ca6 <HAL_GPIO_Init+0x23a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a56      	ldr	r2, [pc, #344]	; (8001da0 <HAL_GPIO_Init+0x334>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d02b      	beq.n	8001ca2 <HAL_GPIO_Init+0x236>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a55      	ldr	r2, [pc, #340]	; (8001da4 <HAL_GPIO_Init+0x338>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d025      	beq.n	8001c9e <HAL_GPIO_Init+0x232>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a54      	ldr	r2, [pc, #336]	; (8001da8 <HAL_GPIO_Init+0x33c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d01f      	beq.n	8001c9a <HAL_GPIO_Init+0x22e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a53      	ldr	r2, [pc, #332]	; (8001dac <HAL_GPIO_Init+0x340>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d019      	beq.n	8001c96 <HAL_GPIO_Init+0x22a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a52      	ldr	r2, [pc, #328]	; (8001db0 <HAL_GPIO_Init+0x344>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d013      	beq.n	8001c92 <HAL_GPIO_Init+0x226>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a51      	ldr	r2, [pc, #324]	; (8001db4 <HAL_GPIO_Init+0x348>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00d      	beq.n	8001c8e <HAL_GPIO_Init+0x222>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a50      	ldr	r2, [pc, #320]	; (8001db8 <HAL_GPIO_Init+0x34c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d007      	beq.n	8001c8a <HAL_GPIO_Init+0x21e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4f      	ldr	r2, [pc, #316]	; (8001dbc <HAL_GPIO_Init+0x350>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d101      	bne.n	8001c86 <HAL_GPIO_Init+0x21a>
 8001c82:	2309      	movs	r3, #9
 8001c84:	e012      	b.n	8001cac <HAL_GPIO_Init+0x240>
 8001c86:	230a      	movs	r3, #10
 8001c88:	e010      	b.n	8001cac <HAL_GPIO_Init+0x240>
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	e00e      	b.n	8001cac <HAL_GPIO_Init+0x240>
 8001c8e:	2307      	movs	r3, #7
 8001c90:	e00c      	b.n	8001cac <HAL_GPIO_Init+0x240>
 8001c92:	2306      	movs	r3, #6
 8001c94:	e00a      	b.n	8001cac <HAL_GPIO_Init+0x240>
 8001c96:	2305      	movs	r3, #5
 8001c98:	e008      	b.n	8001cac <HAL_GPIO_Init+0x240>
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	e006      	b.n	8001cac <HAL_GPIO_Init+0x240>
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e004      	b.n	8001cac <HAL_GPIO_Init+0x240>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e002      	b.n	8001cac <HAL_GPIO_Init+0x240>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_GPIO_Init+0x240>
 8001caa:	2300      	movs	r3, #0
 8001cac:	69fa      	ldr	r2, [r7, #28]
 8001cae:	f002 0203 	and.w	r2, r2, #3
 8001cb2:	0092      	lsls	r2, r2, #2
 8001cb4:	4093      	lsls	r3, r2
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cbc:	4935      	ldr	r1, [pc, #212]	; (8001d94 <HAL_GPIO_Init+0x328>)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cca:	4b3d      	ldr	r3, [pc, #244]	; (8001dc0 <HAL_GPIO_Init+0x354>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cee:	4a34      	ldr	r2, [pc, #208]	; (8001dc0 <HAL_GPIO_Init+0x354>)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf4:	4b32      	ldr	r3, [pc, #200]	; (8001dc0 <HAL_GPIO_Init+0x354>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d18:	4a29      	ldr	r2, [pc, #164]	; (8001dc0 <HAL_GPIO_Init+0x354>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d1e:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <HAL_GPIO_Init+0x354>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d42:	4a1f      	ldr	r2, [pc, #124]	; (8001dc0 <HAL_GPIO_Init+0x354>)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d48:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <HAL_GPIO_Init+0x354>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d6c:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <HAL_GPIO_Init+0x354>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3301      	adds	r3, #1
 8001d76:	61fb      	str	r3, [r7, #28]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	2b0f      	cmp	r3, #15
 8001d7c:	f67f ae84 	bls.w	8001a88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
 8001d84:	3724      	adds	r7, #36	; 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40013800 	.word	0x40013800
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	40020400 	.word	0x40020400
 8001da0:	40020800 	.word	0x40020800
 8001da4:	40020c00 	.word	0x40020c00
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40021400 	.word	0x40021400
 8001db0:	40021800 	.word	0x40021800
 8001db4:	40021c00 	.word	0x40021c00
 8001db8:	40022000 	.word	0x40022000
 8001dbc:	40022400 	.word	0x40022400
 8001dc0:	40013c00 	.word	0x40013c00

08001dc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	887b      	ldrh	r3, [r7, #2]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
 8001de0:	e001      	b.n	8001de6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001de2:	2300      	movs	r3, #0
 8001de4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
 8001e00:	4613      	mov	r3, r2
 8001e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e04:	787b      	ldrb	r3, [r7, #1]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e0a:	887a      	ldrh	r2, [r7, #2]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e10:	e003      	b.n	8001e1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e12:	887b      	ldrh	r3, [r7, #2]
 8001e14:	041a      	lsls	r2, r3, #16
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	619a      	str	r2, [r3, #24]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e267      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d075      	beq.n	8001f32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e46:	4b88      	ldr	r3, [pc, #544]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d00c      	beq.n	8001e6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e52:	4b85      	ldr	r3, [pc, #532]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d112      	bne.n	8001e84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e5e:	4b82      	ldr	r3, [pc, #520]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e6a:	d10b      	bne.n	8001e84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6c:	4b7e      	ldr	r3, [pc, #504]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d05b      	beq.n	8001f30 <HAL_RCC_OscConfig+0x108>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d157      	bne.n	8001f30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e242      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8c:	d106      	bne.n	8001e9c <HAL_RCC_OscConfig+0x74>
 8001e8e:	4b76      	ldr	r3, [pc, #472]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a75      	ldr	r2, [pc, #468]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	e01d      	b.n	8001ed8 <HAL_RCC_OscConfig+0xb0>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea4:	d10c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x98>
 8001ea6:	4b70      	ldr	r3, [pc, #448]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a6f      	ldr	r2, [pc, #444]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	4b6d      	ldr	r3, [pc, #436]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a6c      	ldr	r2, [pc, #432]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e00b      	b.n	8001ed8 <HAL_RCC_OscConfig+0xb0>
 8001ec0:	4b69      	ldr	r3, [pc, #420]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a68      	ldr	r2, [pc, #416]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	4b66      	ldr	r3, [pc, #408]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a65      	ldr	r2, [pc, #404]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d013      	beq.n	8001f08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7ff fbe2 	bl	80016a8 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7ff fbde 	bl	80016a8 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b64      	cmp	r3, #100	; 0x64
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e207      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efa:	4b5b      	ldr	r3, [pc, #364]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0xc0>
 8001f06:	e014      	b.n	8001f32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7ff fbce 	bl	80016a8 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f10:	f7ff fbca 	bl	80016a8 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	; 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e1f3      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f22:	4b51      	ldr	r3, [pc, #324]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0xe8>
 8001f2e:	e000      	b.n	8001f32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d063      	beq.n	8002006 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f3e:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00b      	beq.n	8001f62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f4a:	4b47      	ldr	r3, [pc, #284]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d11c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f56:	4b44      	ldr	r3, [pc, #272]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d116      	bne.n	8001f90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f62:	4b41      	ldr	r3, [pc, #260]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d005      	beq.n	8001f7a <HAL_RCC_OscConfig+0x152>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d001      	beq.n	8001f7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e1c7      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7a:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4937      	ldr	r1, [pc, #220]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8e:	e03a      	b.n	8002006 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d020      	beq.n	8001fda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f98:	4b34      	ldr	r3, [pc, #208]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9e:	f7ff fb83 	bl	80016a8 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa6:	f7ff fb7f 	bl	80016a8 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e1a8      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb8:	4b2b      	ldr	r3, [pc, #172]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc4:	4b28      	ldr	r3, [pc, #160]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4925      	ldr	r1, [pc, #148]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]
 8001fd8:	e015      	b.n	8002006 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <HAL_RCC_OscConfig+0x244>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7ff fb62 	bl	80016a8 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe8:	f7ff fb5e 	bl	80016a8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e187      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d036      	beq.n	8002080 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d016      	beq.n	8002048 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <HAL_RCC_OscConfig+0x248>)
 800201c:	2201      	movs	r2, #1
 800201e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002020:	f7ff fb42 	bl	80016a8 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002028:	f7ff fb3e 	bl	80016a8 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e167      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCC_OscConfig+0x240>)
 800203c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0x200>
 8002046:	e01b      	b.n	8002080 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002048:	4b09      	ldr	r3, [pc, #36]	; (8002070 <HAL_RCC_OscConfig+0x248>)
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204e:	f7ff fb2b 	bl	80016a8 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002054:	e00e      	b.n	8002074 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002056:	f7ff fb27 	bl	80016a8 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d907      	bls.n	8002074 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e150      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
 8002068:	40023800 	.word	0x40023800
 800206c:	42470000 	.word	0x42470000
 8002070:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002074:	4b88      	ldr	r3, [pc, #544]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 8002076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1ea      	bne.n	8002056 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 8097 	beq.w	80021bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002092:	4b81      	ldr	r3, [pc, #516]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10f      	bne.n	80020be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	4b7d      	ldr	r3, [pc, #500]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	4a7c      	ldr	r2, [pc, #496]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 80020a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ac:	6413      	str	r3, [r2, #64]	; 0x40
 80020ae:	4b7a      	ldr	r3, [pc, #488]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ba:	2301      	movs	r3, #1
 80020bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020be:	4b77      	ldr	r3, [pc, #476]	; (800229c <HAL_RCC_OscConfig+0x474>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d118      	bne.n	80020fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ca:	4b74      	ldr	r3, [pc, #464]	; (800229c <HAL_RCC_OscConfig+0x474>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a73      	ldr	r2, [pc, #460]	; (800229c <HAL_RCC_OscConfig+0x474>)
 80020d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d6:	f7ff fae7 	bl	80016a8 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020de:	f7ff fae3 	bl	80016a8 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e10c      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f0:	4b6a      	ldr	r3, [pc, #424]	; (800229c <HAL_RCC_OscConfig+0x474>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d106      	bne.n	8002112 <HAL_RCC_OscConfig+0x2ea>
 8002104:	4b64      	ldr	r3, [pc, #400]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 8002106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002108:	4a63      	ldr	r2, [pc, #396]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6713      	str	r3, [r2, #112]	; 0x70
 8002110:	e01c      	b.n	800214c <HAL_RCC_OscConfig+0x324>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b05      	cmp	r3, #5
 8002118:	d10c      	bne.n	8002134 <HAL_RCC_OscConfig+0x30c>
 800211a:	4b5f      	ldr	r3, [pc, #380]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	4a5e      	ldr	r2, [pc, #376]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 8002120:	f043 0304 	orr.w	r3, r3, #4
 8002124:	6713      	str	r3, [r2, #112]	; 0x70
 8002126:	4b5c      	ldr	r3, [pc, #368]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 8002128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212a:	4a5b      	ldr	r2, [pc, #364]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6713      	str	r3, [r2, #112]	; 0x70
 8002132:	e00b      	b.n	800214c <HAL_RCC_OscConfig+0x324>
 8002134:	4b58      	ldr	r3, [pc, #352]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 8002136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002138:	4a57      	ldr	r2, [pc, #348]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	6713      	str	r3, [r2, #112]	; 0x70
 8002140:	4b55      	ldr	r3, [pc, #340]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 8002142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002144:	4a54      	ldr	r2, [pc, #336]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 8002146:	f023 0304 	bic.w	r3, r3, #4
 800214a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d015      	beq.n	8002180 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002154:	f7ff faa8 	bl	80016a8 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215a:	e00a      	b.n	8002172 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800215c:	f7ff faa4 	bl	80016a8 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	; 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e0cb      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002172:	4b49      	ldr	r3, [pc, #292]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0ee      	beq.n	800215c <HAL_RCC_OscConfig+0x334>
 800217e:	e014      	b.n	80021aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002180:	f7ff fa92 	bl	80016a8 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002186:	e00a      	b.n	800219e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002188:	f7ff fa8e 	bl	80016a8 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	; 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e0b5      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219e:	4b3e      	ldr	r3, [pc, #248]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1ee      	bne.n	8002188 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021aa:	7dfb      	ldrb	r3, [r7, #23]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d105      	bne.n	80021bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b0:	4b39      	ldr	r3, [pc, #228]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	4a38      	ldr	r2, [pc, #224]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 80021b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80a1 	beq.w	8002308 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021c6:	4b34      	ldr	r3, [pc, #208]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d05c      	beq.n	800228c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d141      	bne.n	800225e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021da:	4b31      	ldr	r3, [pc, #196]	; (80022a0 <HAL_RCC_OscConfig+0x478>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7ff fa62 	bl	80016a8 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e8:	f7ff fa5e 	bl	80016a8 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e087      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fa:	4b27      	ldr	r3, [pc, #156]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69da      	ldr	r2, [r3, #28]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	019b      	lsls	r3, r3, #6
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	085b      	lsrs	r3, r3, #1
 800221e:	3b01      	subs	r3, #1
 8002220:	041b      	lsls	r3, r3, #16
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	061b      	lsls	r3, r3, #24
 800222a:	491b      	ldr	r1, [pc, #108]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002230:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <HAL_RCC_OscConfig+0x478>)
 8002232:	2201      	movs	r2, #1
 8002234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7ff fa37 	bl	80016a8 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223e:	f7ff fa33 	bl	80016a8 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e05c      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x416>
 800225c:	e054      	b.n	8002308 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_RCC_OscConfig+0x478>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7ff fa20 	bl	80016a8 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226c:	f7ff fa1c 	bl	80016a8 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e045      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_RCC_OscConfig+0x470>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x444>
 800228a:	e03d      	b.n	8002308 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d107      	bne.n	80022a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e038      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
 8002298:	40023800 	.word	0x40023800
 800229c:	40007000 	.word	0x40007000
 80022a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022a4:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <HAL_RCC_OscConfig+0x4ec>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d028      	beq.n	8002304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022bc:	429a      	cmp	r2, r3
 80022be:	d121      	bne.n	8002304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d11a      	bne.n	8002304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022d4:	4013      	ands	r3, r2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022dc:	4293      	cmp	r3, r2
 80022de:	d111      	bne.n	8002304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	085b      	lsrs	r3, r3, #1
 80022ec:	3b01      	subs	r3, #1
 80022ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d107      	bne.n	8002304 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002300:	429a      	cmp	r2, r3
 8002302:	d001      	beq.n	8002308 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800

08002318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0cc      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800232c:	4b68      	ldr	r3, [pc, #416]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d90c      	bls.n	8002354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b65      	ldr	r3, [pc, #404]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b63      	ldr	r3, [pc, #396]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0b8      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d020      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800236c:	4b59      	ldr	r3, [pc, #356]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4a58      	ldr	r2, [pc, #352]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002376:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002384:	4b53      	ldr	r3, [pc, #332]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4a52      	ldr	r2, [pc, #328]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800238e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002390:	4b50      	ldr	r3, [pc, #320]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	494d      	ldr	r1, [pc, #308]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d044      	beq.n	8002438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	4b47      	ldr	r3, [pc, #284]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d119      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e07f      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d003      	beq.n	80023d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d6:	4b3f      	ldr	r3, [pc, #252]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d109      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e06f      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e6:	4b3b      	ldr	r3, [pc, #236]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e067      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f6:	4b37      	ldr	r3, [pc, #220]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f023 0203 	bic.w	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4934      	ldr	r1, [pc, #208]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	4313      	orrs	r3, r2
 8002406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002408:	f7ff f94e 	bl	80016a8 <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	e00a      	b.n	8002426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002410:	f7ff f94a 	bl	80016a8 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	; 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e04f      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	4b2b      	ldr	r3, [pc, #172]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 020c 	and.w	r2, r3, #12
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	429a      	cmp	r2, r3
 8002436:	d1eb      	bne.n	8002410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002438:	4b25      	ldr	r3, [pc, #148]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d20c      	bcs.n	8002460 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d001      	beq.n	8002460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e032      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800246c:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4916      	ldr	r1, [pc, #88]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	4313      	orrs	r3, r2
 800247c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	490e      	ldr	r1, [pc, #56]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	4313      	orrs	r3, r2
 800249c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800249e:	f000 f821 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 80024a2:	4602      	mov	r2, r0
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	490a      	ldr	r1, [pc, #40]	; (80024d8 <HAL_RCC_ClockConfig+0x1c0>)
 80024b0:	5ccb      	ldrb	r3, [r1, r3]
 80024b2:	fa22 f303 	lsr.w	r3, r2, r3
 80024b6:	4a09      	ldr	r2, [pc, #36]	; (80024dc <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_RCC_ClockConfig+0x1c8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff f8ae 	bl	8001620 <HAL_InitTick>

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023c00 	.word	0x40023c00
 80024d4:	40023800 	.word	0x40023800
 80024d8:	08005134 	.word	0x08005134
 80024dc:	20000000 	.word	0x20000000
 80024e0:	2000000c 	.word	0x2000000c

080024e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024e8:	b090      	sub	sp, #64	; 0x40
 80024ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	637b      	str	r3, [r7, #52]	; 0x34
 80024f0:	2300      	movs	r3, #0
 80024f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f4:	2300      	movs	r3, #0
 80024f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024fc:	4b59      	ldr	r3, [pc, #356]	; (8002664 <HAL_RCC_GetSysClockFreq+0x180>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b08      	cmp	r3, #8
 8002506:	d00d      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x40>
 8002508:	2b08      	cmp	r3, #8
 800250a:	f200 80a1 	bhi.w	8002650 <HAL_RCC_GetSysClockFreq+0x16c>
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x34>
 8002512:	2b04      	cmp	r3, #4
 8002514:	d003      	beq.n	800251e <HAL_RCC_GetSysClockFreq+0x3a>
 8002516:	e09b      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002518:	4b53      	ldr	r3, [pc, #332]	; (8002668 <HAL_RCC_GetSysClockFreq+0x184>)
 800251a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800251c:	e09b      	b.n	8002656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800251e:	4b53      	ldr	r3, [pc, #332]	; (800266c <HAL_RCC_GetSysClockFreq+0x188>)
 8002520:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002522:	e098      	b.n	8002656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002524:	4b4f      	ldr	r3, [pc, #316]	; (8002664 <HAL_RCC_GetSysClockFreq+0x180>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800252c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800252e:	4b4d      	ldr	r3, [pc, #308]	; (8002664 <HAL_RCC_GetSysClockFreq+0x180>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d028      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800253a:	4b4a      	ldr	r3, [pc, #296]	; (8002664 <HAL_RCC_GetSysClockFreq+0x180>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	099b      	lsrs	r3, r3, #6
 8002540:	2200      	movs	r2, #0
 8002542:	623b      	str	r3, [r7, #32]
 8002544:	627a      	str	r2, [r7, #36]	; 0x24
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800254c:	2100      	movs	r1, #0
 800254e:	4b47      	ldr	r3, [pc, #284]	; (800266c <HAL_RCC_GetSysClockFreq+0x188>)
 8002550:	fb03 f201 	mul.w	r2, r3, r1
 8002554:	2300      	movs	r3, #0
 8002556:	fb00 f303 	mul.w	r3, r0, r3
 800255a:	4413      	add	r3, r2
 800255c:	4a43      	ldr	r2, [pc, #268]	; (800266c <HAL_RCC_GetSysClockFreq+0x188>)
 800255e:	fba0 1202 	umull	r1, r2, r0, r2
 8002562:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002564:	460a      	mov	r2, r1
 8002566:	62ba      	str	r2, [r7, #40]	; 0x28
 8002568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800256a:	4413      	add	r3, r2
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800256e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002570:	2200      	movs	r2, #0
 8002572:	61bb      	str	r3, [r7, #24]
 8002574:	61fa      	str	r2, [r7, #28]
 8002576:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800257a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800257e:	f7fd fe9f 	bl	80002c0 <__aeabi_uldivmod>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4613      	mov	r3, r2
 8002588:	63fb      	str	r3, [r7, #60]	; 0x3c
 800258a:	e053      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800258c:	4b35      	ldr	r3, [pc, #212]	; (8002664 <HAL_RCC_GetSysClockFreq+0x180>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	099b      	lsrs	r3, r3, #6
 8002592:	2200      	movs	r2, #0
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	617a      	str	r2, [r7, #20]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800259e:	f04f 0b00 	mov.w	fp, #0
 80025a2:	4652      	mov	r2, sl
 80025a4:	465b      	mov	r3, fp
 80025a6:	f04f 0000 	mov.w	r0, #0
 80025aa:	f04f 0100 	mov.w	r1, #0
 80025ae:	0159      	lsls	r1, r3, #5
 80025b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025b4:	0150      	lsls	r0, r2, #5
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	ebb2 080a 	subs.w	r8, r2, sl
 80025be:	eb63 090b 	sbc.w	r9, r3, fp
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025d6:	ebb2 0408 	subs.w	r4, r2, r8
 80025da:	eb63 0509 	sbc.w	r5, r3, r9
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	00eb      	lsls	r3, r5, #3
 80025e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025ec:	00e2      	lsls	r2, r4, #3
 80025ee:	4614      	mov	r4, r2
 80025f0:	461d      	mov	r5, r3
 80025f2:	eb14 030a 	adds.w	r3, r4, sl
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	eb45 030b 	adc.w	r3, r5, fp
 80025fc:	607b      	str	r3, [r7, #4]
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	e9d7 4500 	ldrd	r4, r5, [r7]
 800260a:	4629      	mov	r1, r5
 800260c:	028b      	lsls	r3, r1, #10
 800260e:	4621      	mov	r1, r4
 8002610:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002614:	4621      	mov	r1, r4
 8002616:	028a      	lsls	r2, r1, #10
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
 800261c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800261e:	2200      	movs	r2, #0
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	60fa      	str	r2, [r7, #12]
 8002624:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002628:	f7fd fe4a 	bl	80002c0 <__aeabi_uldivmod>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4613      	mov	r3, r2
 8002632:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_RCC_GetSysClockFreq+0x180>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	0c1b      	lsrs	r3, r3, #16
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	3301      	adds	r3, #1
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002644:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002648:	fbb2 f3f3 	udiv	r3, r2, r3
 800264c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800264e:	e002      	b.n	8002656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <HAL_RCC_GetSysClockFreq+0x184>)
 8002652:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002654:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002658:	4618      	mov	r0, r3
 800265a:	3740      	adds	r7, #64	; 0x40
 800265c:	46bd      	mov	sp, r7
 800265e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002662:	bf00      	nop
 8002664:	40023800 	.word	0x40023800
 8002668:	00f42400 	.word	0x00f42400
 800266c:	017d7840 	.word	0x017d7840

08002670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002674:	4b03      	ldr	r3, [pc, #12]	; (8002684 <HAL_RCC_GetHCLKFreq+0x14>)
 8002676:	681b      	ldr	r3, [r3, #0]
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	20000000 	.word	0x20000000

08002688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800268c:	f7ff fff0 	bl	8002670 <HAL_RCC_GetHCLKFreq>
 8002690:	4602      	mov	r2, r0
 8002692:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	0a9b      	lsrs	r3, r3, #10
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	4903      	ldr	r1, [pc, #12]	; (80026ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800269e:	5ccb      	ldrb	r3, [r1, r3]
 80026a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40023800 	.word	0x40023800
 80026ac:	08005144 	.word	0x08005144

080026b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026b4:	f7ff ffdc 	bl	8002670 <HAL_RCC_GetHCLKFreq>
 80026b8:	4602      	mov	r2, r0
 80026ba:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	0b5b      	lsrs	r3, r3, #13
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	4903      	ldr	r1, [pc, #12]	; (80026d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026c6:	5ccb      	ldrb	r3, [r1, r3]
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40023800 	.word	0x40023800
 80026d4:	08005144 	.word	0x08005144

080026d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e03f      	b.n	800276a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d106      	bne.n	8002704 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7fe fc08 	bl	8000f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2224      	movs	r2, #36	; 0x24
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800271a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f001 f823 	bl	8003768 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002730:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695a      	ldr	r2, [r3, #20]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002740:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002750:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b08a      	sub	sp, #40	; 0x28
 8002776:	af02      	add	r7, sp, #8
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	603b      	str	r3, [r7, #0]
 800277e:	4613      	mov	r3, r2
 8002780:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b20      	cmp	r3, #32
 8002790:	d17c      	bne.n	800288c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <HAL_UART_Transmit+0x2c>
 8002798:	88fb      	ldrh	r3, [r7, #6]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e075      	b.n	800288e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_UART_Transmit+0x3e>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e06e      	b.n	800288e <HAL_UART_Transmit+0x11c>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2221      	movs	r2, #33	; 0x21
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027c6:	f7fe ff6f 	bl	80016a8 <HAL_GetTick>
 80027ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	88fa      	ldrh	r2, [r7, #6]
 80027d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	88fa      	ldrh	r2, [r7, #6]
 80027d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e0:	d108      	bne.n	80027f4 <HAL_UART_Transmit+0x82>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d104      	bne.n	80027f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	e003      	b.n	80027fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002804:	e02a      	b.n	800285c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2200      	movs	r2, #0
 800280e:	2180      	movs	r1, #128	; 0x80
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 fd35 	bl	8003280 <UART_WaitOnFlagUntilTimeout>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e036      	b.n	800288e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10b      	bne.n	800283e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002834:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	3302      	adds	r3, #2
 800283a:	61bb      	str	r3, [r7, #24]
 800283c:	e007      	b.n	800284e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	781a      	ldrb	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	3301      	adds	r3, #1
 800284c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002852:	b29b      	uxth	r3, r3
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002860:	b29b      	uxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1cf      	bne.n	8002806 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2200      	movs	r2, #0
 800286e:	2140      	movs	r1, #64	; 0x40
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 fd05 	bl	8003280 <UART_WaitOnFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e006      	b.n	800288e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	e000      	b.n	800288e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800288c:	2302      	movs	r3, #2
  }
}
 800288e:	4618      	mov	r0, r3
 8002890:	3720      	adds	r7, #32
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b08a      	sub	sp, #40	; 0x28
 800289a:	af02      	add	r7, sp, #8
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	603b      	str	r3, [r7, #0]
 80028a2:	4613      	mov	r3, r2
 80028a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b20      	cmp	r3, #32
 80028b4:	f040 808c 	bne.w	80029d0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <HAL_UART_Receive+0x2e>
 80028be:	88fb      	ldrh	r3, [r7, #6]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e084      	b.n	80029d2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_UART_Receive+0x40>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e07d      	b.n	80029d2 <HAL_UART_Receive+0x13c>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2222      	movs	r2, #34	; 0x22
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028f2:	f7fe fed9 	bl	80016a8 <HAL_GetTick>
 80028f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	88fa      	ldrh	r2, [r7, #6]
 80028fc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	88fa      	ldrh	r2, [r7, #6]
 8002902:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290c:	d108      	bne.n	8002920 <HAL_UART_Receive+0x8a>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d104      	bne.n	8002920 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	e003      	b.n	8002928 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002924:	2300      	movs	r3, #0
 8002926:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002930:	e043      	b.n	80029ba <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2200      	movs	r2, #0
 800293a:	2120      	movs	r1, #32
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 fc9f 	bl	8003280 <UART_WaitOnFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e042      	b.n	80029d2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10c      	bne.n	800296c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	b29b      	uxth	r3, r3
 800295a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800295e:	b29a      	uxth	r2, r3
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	3302      	adds	r3, #2
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	e01f      	b.n	80029ac <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002974:	d007      	beq.n	8002986 <HAL_UART_Receive+0xf0>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10a      	bne.n	8002994 <HAL_UART_Receive+0xfe>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	b2da      	uxtb	r2, r3
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	701a      	strb	r2, [r3, #0]
 8002992:	e008      	b.n	80029a6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	3301      	adds	r3, #1
 80029aa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029be:	b29b      	uxth	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1b6      	bne.n	8002932 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e000      	b.n	80029d2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80029d0:	2302      	movs	r3, #2
  }
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3720      	adds	r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80029da:	b480      	push	{r7}
 80029dc:	b085      	sub	sp, #20
 80029de:	af00      	add	r7, sp, #0
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	4613      	mov	r3, r2
 80029e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	d130      	bne.n	8002a56 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <HAL_UART_Transmit_IT+0x26>
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e029      	b.n	8002a58 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_UART_Transmit_IT+0x38>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e022      	b.n	8002a58 <HAL_UART_Transmit_IT+0x7e>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	88fa      	ldrh	r2, [r7, #6]
 8002a24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	88fa      	ldrh	r2, [r7, #6]
 8002a2a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2221      	movs	r2, #33	; 0x21
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a50:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	e000      	b.n	8002a58 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002a56:	2302      	movs	r3, #2
  }
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	d11d      	bne.n	8002aba <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <HAL_UART_Receive_IT+0x26>
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e016      	b.n	8002abc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_UART_Receive_IT+0x38>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e00f      	b.n	8002abc <HAL_UART_Receive_IT+0x58>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	461a      	mov	r2, r3
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 fc53 	bl	800335c <UART_Start_Receive_IT>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	e000      	b.n	8002abc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002aba:	2302      	movs	r3, #2
  }
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08e      	sub	sp, #56	; 0x38
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	330c      	adds	r3, #12
 8002ad2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	e853 3f00 	ldrex	r3, [r3]
 8002ada:	61fb      	str	r3, [r7, #28]
   return(result);
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	330c      	adds	r3, #12
 8002aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002aee:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002af4:	e841 2300 	strex	r3, r2, [r1]
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1e5      	bne.n	8002acc <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0a:	2b80      	cmp	r3, #128	; 0x80
 8002b0c:	d13c      	bne.n	8002b88 <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	3314      	adds	r3, #20
 8002b14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	e853 3f00 	ldrex	r3, [r3]
 8002b1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b24:	633b      	str	r3, [r7, #48]	; 0x30
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3314      	adds	r3, #20
 8002b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b2e:	61ba      	str	r2, [r7, #24]
 8002b30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b32:	6979      	ldr	r1, [r7, #20]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	e841 2300 	strex	r3, r2, [r1]
 8002b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1e5      	bne.n	8002b0e <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d013      	beq.n	8002b72 <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4e:	4a16      	ldr	r2, [pc, #88]	; (8002ba8 <HAL_UART_AbortTransmit_IT+0xe4>)
 8002b50:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe ff65 	bl	8001a26 <HAL_DMA_Abort_IT>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d01c      	beq.n	8002b9c <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4798      	blx	r3
 8002b70:	e014      	b.n	8002b9c <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 fb5d 	bl	8003240 <HAL_UART_AbortTransmitCpltCallback>
 8002b86:	e009      	b.n	8002b9c <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fb52 	bl	8003240 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3738      	adds	r7, #56	; 0x38
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	080034c7 	.word	0x080034c7

08002bac <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b09a      	sub	sp, #104	; 0x68
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	330c      	adds	r3, #12
 8002bba:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bbe:	e853 3f00 	ldrex	r3, [r3]
 8002bc2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bca:	667b      	str	r3, [r7, #100]	; 0x64
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	330c      	adds	r3, #12
 8002bd2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002bd4:	657a      	str	r2, [r7, #84]	; 0x54
 8002bd6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002bda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bdc:	e841 2300 	strex	r3, r2, [r1]
 8002be0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1e5      	bne.n	8002bb4 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	3314      	adds	r3, #20
 8002bee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf2:	e853 3f00 	ldrex	r3, [r3]
 8002bf6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	663b      	str	r3, [r7, #96]	; 0x60
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3314      	adds	r3, #20
 8002c06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c08:	643a      	str	r2, [r7, #64]	; 0x40
 8002c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c10:	e841 2300 	strex	r3, r2, [r1]
 8002c14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1e5      	bne.n	8002be8 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d119      	bne.n	8002c58 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	330c      	adds	r3, #12
 8002c2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	e853 3f00 	ldrex	r3, [r3]
 8002c32:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f023 0310 	bic.w	r3, r3, #16
 8002c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	330c      	adds	r3, #12
 8002c42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c4c:	e841 2300 	strex	r3, r2, [r1]
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1e5      	bne.n	8002c24 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c62:	2b40      	cmp	r3, #64	; 0x40
 8002c64:	d13f      	bne.n	8002ce6 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	3314      	adds	r3, #20
 8002c6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	e853 3f00 	ldrex	r3, [r3]
 8002c74:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3314      	adds	r3, #20
 8002c84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c86:	61ba      	str	r2, [r7, #24]
 8002c88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8a:	6979      	ldr	r1, [r7, #20]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	e841 2300 	strex	r3, r2, [r1]
 8002c92:	613b      	str	r3, [r7, #16]
   return(result);
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1e5      	bne.n	8002c66 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d013      	beq.n	8002cca <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca6:	4a19      	ldr	r2, [pc, #100]	; (8002d0c <HAL_UART_AbortReceive_IT+0x160>)
 8002ca8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe feb9 	bl	8001a26 <HAL_DMA_Abort_IT>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d022      	beq.n	8002d00 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4798      	blx	r3
 8002cc8:	e01a      	b.n	8002d00 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 fab8 	bl	8003254 <HAL_UART_AbortReceiveCpltCallback>
 8002ce4:	e00c      	b.n	8002d00 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 faaa 	bl	8003254 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3768      	adds	r7, #104	; 0x68
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	080034f1 	.word	0x080034f1

08002d10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b0ba      	sub	sp, #232	; 0xe8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002d4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10f      	bne.n	8002d76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d009      	beq.n	8002d76 <HAL_UART_IRQHandler+0x66>
 8002d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d66:	f003 0320 	and.w	r3, r3, #32
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fc3e 	bl	80035f0 <UART_Receive_IT>
      return;
 8002d74:	e256      	b.n	8003224 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 80de 	beq.w	8002f3c <HAL_UART_IRQHandler+0x22c>
 8002d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d106      	bne.n	8002d9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80d1 	beq.w	8002f3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00b      	beq.n	8002dbe <HAL_UART_IRQHandler+0xae>
 8002da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d005      	beq.n	8002dbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f043 0201 	orr.w	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00b      	beq.n	8002de2 <HAL_UART_IRQHandler+0xd2>
 8002dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d005      	beq.n	8002de2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f043 0202 	orr.w	r2, r3, #2
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00b      	beq.n	8002e06 <HAL_UART_IRQHandler+0xf6>
 8002dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f043 0204 	orr.w	r2, r3, #4
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d011      	beq.n	8002e36 <HAL_UART_IRQHandler+0x126>
 8002e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e16:	f003 0320 	and.w	r3, r3, #32
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d105      	bne.n	8002e2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f043 0208 	orr.w	r2, r3, #8
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 81ed 	beq.w	800321a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_UART_IRQHandler+0x14e>
 8002e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 fbc9 	bl	80035f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e68:	2b40      	cmp	r3, #64	; 0x40
 8002e6a:	bf0c      	ite	eq
 8002e6c:	2301      	moveq	r3, #1
 8002e6e:	2300      	movne	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d103      	bne.n	8002e8a <HAL_UART_IRQHandler+0x17a>
 8002e82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d04f      	beq.n	8002f2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 faa4 	bl	80033d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9a:	2b40      	cmp	r3, #64	; 0x40
 8002e9c:	d141      	bne.n	8002f22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	3314      	adds	r3, #20
 8002ea4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002eac:	e853 3f00 	ldrex	r3, [r3]
 8002eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3314      	adds	r3, #20
 8002ec6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002eca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ece:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ed6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002eda:	e841 2300 	strex	r3, r2, [r1]
 8002ede:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ee2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1d9      	bne.n	8002e9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d013      	beq.n	8002f1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef6:	4a7d      	ldr	r2, [pc, #500]	; (80030ec <HAL_UART_IRQHandler+0x3dc>)
 8002ef8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe fd91 	bl	8001a26 <HAL_DMA_Abort_IT>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d016      	beq.n	8002f38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f14:	4610      	mov	r0, r2
 8002f16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f18:	e00e      	b.n	8002f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f986 	bl	800322c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f20:	e00a      	b.n	8002f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f982 	bl	800322c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f28:	e006      	b.n	8002f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f97e 	bl	800322c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f36:	e170      	b.n	800321a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f38:	bf00      	nop
    return;
 8002f3a:	e16e      	b.n	800321a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	f040 814a 	bne.w	80031da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 8143 	beq.w	80031da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f58:	f003 0310 	and.w	r3, r3, #16
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 813c 	beq.w	80031da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f62:	2300      	movs	r3, #0
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f82:	2b40      	cmp	r3, #64	; 0x40
 8002f84:	f040 80b4 	bne.w	80030f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 8140 	beq.w	800321e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	f080 8139 	bcs.w	800321e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fb2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fbe:	f000 8088 	beq.w	80030d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	330c      	adds	r3, #12
 8002fc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fd0:	e853 3f00 	ldrex	r3, [r3]
 8002fd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	330c      	adds	r3, #12
 8002fea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002fee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ffa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ffe:	e841 2300 	strex	r3, r2, [r1]
 8003002:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1d9      	bne.n	8002fc2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3314      	adds	r3, #20
 8003014:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003018:	e853 3f00 	ldrex	r3, [r3]
 800301c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800301e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3314      	adds	r3, #20
 800302e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003032:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003036:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003038:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800303a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800303e:	e841 2300 	strex	r3, r2, [r1]
 8003042:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1e1      	bne.n	800300e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3314      	adds	r3, #20
 8003050:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003052:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003054:	e853 3f00 	ldrex	r3, [r3]
 8003058:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800305a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800305c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003060:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3314      	adds	r3, #20
 800306a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800306e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003070:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003072:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003074:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003076:	e841 2300 	strex	r3, r2, [r1]
 800307a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800307c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1e3      	bne.n	800304a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	330c      	adds	r3, #12
 8003096:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309a:	e853 3f00 	ldrex	r3, [r3]
 800309e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030a2:	f023 0310 	bic.w	r3, r3, #16
 80030a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	330c      	adds	r3, #12
 80030b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80030b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80030b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030bc:	e841 2300 	strex	r3, r2, [r1]
 80030c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1e3      	bne.n	8003090 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fe fc3a 	bl	8001946 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030da:	b29b      	uxth	r3, r3
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	b29b      	uxth	r3, r3
 80030e0:	4619      	mov	r1, r3
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f8c0 	bl	8003268 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030e8:	e099      	b.n	800321e <HAL_UART_IRQHandler+0x50e>
 80030ea:	bf00      	nop
 80030ec:	0800349f 	.word	0x0800349f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 808b 	beq.w	8003222 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800310c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 8086 	beq.w	8003222 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	330c      	adds	r3, #12
 800311c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003120:	e853 3f00 	ldrex	r3, [r3]
 8003124:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003128:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800312c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	330c      	adds	r3, #12
 8003136:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800313a:	647a      	str	r2, [r7, #68]	; 0x44
 800313c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003140:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003142:	e841 2300 	strex	r3, r2, [r1]
 8003146:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1e3      	bne.n	8003116 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	3314      	adds	r3, #20
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	e853 3f00 	ldrex	r3, [r3]
 800315c:	623b      	str	r3, [r7, #32]
   return(result);
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	f023 0301 	bic.w	r3, r3, #1
 8003164:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	3314      	adds	r3, #20
 800316e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003172:	633a      	str	r2, [r7, #48]	; 0x30
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800317a:	e841 2300 	strex	r3, r2, [r1]
 800317e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1e3      	bne.n	800314e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	330c      	adds	r3, #12
 800319a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	e853 3f00 	ldrex	r3, [r3]
 80031a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f023 0310 	bic.w	r3, r3, #16
 80031aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	330c      	adds	r3, #12
 80031b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80031b8:	61fa      	str	r2, [r7, #28]
 80031ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031bc:	69b9      	ldr	r1, [r7, #24]
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	e841 2300 	strex	r3, r2, [r1]
 80031c4:	617b      	str	r3, [r7, #20]
   return(result);
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1e3      	bne.n	8003194 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031d0:	4619      	mov	r1, r3
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f848 	bl	8003268 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031d8:	e023      	b.n	8003222 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <HAL_UART_IRQHandler+0x4ea>
 80031e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f994 	bl	8003520 <UART_Transmit_IT>
    return;
 80031f8:	e014      	b.n	8003224 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80031fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00e      	beq.n	8003224 <HAL_UART_IRQHandler+0x514>
 8003206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800320a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	d008      	beq.n	8003224 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f9d4 	bl	80035c0 <UART_EndTransmit_IT>
    return;
 8003218:	e004      	b.n	8003224 <HAL_UART_IRQHandler+0x514>
    return;
 800321a:	bf00      	nop
 800321c:	e002      	b.n	8003224 <HAL_UART_IRQHandler+0x514>
      return;
 800321e:	bf00      	nop
 8003220:	e000      	b.n	8003224 <HAL_UART_IRQHandler+0x514>
      return;
 8003222:	bf00      	nop
  }
}
 8003224:	37e8      	adds	r7, #232	; 0xe8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop

0800322c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b090      	sub	sp, #64	; 0x40
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003290:	e050      	b.n	8003334 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003298:	d04c      	beq.n	8003334 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800329a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800329c:	2b00      	cmp	r3, #0
 800329e:	d007      	beq.n	80032b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80032a0:	f7fe fa02 	bl	80016a8 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d241      	bcs.n	8003334 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	330c      	adds	r3, #12
 80032b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ba:	e853 3f00 	ldrex	r3, [r3]
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	330c      	adds	r3, #12
 80032ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032d0:	637a      	str	r2, [r7, #52]	; 0x34
 80032d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032d8:	e841 2300 	strex	r3, r2, [r1]
 80032dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1e5      	bne.n	80032b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3314      	adds	r3, #20
 80032ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	e853 3f00 	ldrex	r3, [r3]
 80032f2:	613b      	str	r3, [r7, #16]
   return(result);
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f023 0301 	bic.w	r3, r3, #1
 80032fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	3314      	adds	r3, #20
 8003302:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003304:	623a      	str	r2, [r7, #32]
 8003306:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003308:	69f9      	ldr	r1, [r7, #28]
 800330a:	6a3a      	ldr	r2, [r7, #32]
 800330c:	e841 2300 	strex	r3, r2, [r1]
 8003310:	61bb      	str	r3, [r7, #24]
   return(result);
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e5      	bne.n	80032e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e00f      	b.n	8003354 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4013      	ands	r3, r2
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	429a      	cmp	r2, r3
 8003342:	bf0c      	ite	eq
 8003344:	2301      	moveq	r3, #1
 8003346:	2300      	movne	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	461a      	mov	r2, r3
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	429a      	cmp	r2, r3
 8003350:	d09f      	beq.n	8003292 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3740      	adds	r7, #64	; 0x40
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	4613      	mov	r3, r2
 8003368:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	88fa      	ldrh	r2, [r7, #6]
 8003374:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	88fa      	ldrh	r2, [r7, #6]
 800337a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2222      	movs	r2, #34	; 0x22
 8003386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d007      	beq.n	80033aa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033a8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695a      	ldr	r2, [r3, #20]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0201 	orr.w	r2, r2, #1
 80033b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0220 	orr.w	r2, r2, #32
 80033c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033d8:	b480      	push	{r7}
 80033da:	b095      	sub	sp, #84	; 0x54
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	330c      	adds	r3, #12
 80033e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	330c      	adds	r3, #12
 80033fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003400:	643a      	str	r2, [r7, #64]	; 0x40
 8003402:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003404:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003406:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003408:	e841 2300 	strex	r3, r2, [r1]
 800340c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e5      	bne.n	80033e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3314      	adds	r3, #20
 800341a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	e853 3f00 	ldrex	r3, [r3]
 8003422:	61fb      	str	r3, [r7, #28]
   return(result);
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f023 0301 	bic.w	r3, r3, #1
 800342a:	64bb      	str	r3, [r7, #72]	; 0x48
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3314      	adds	r3, #20
 8003432:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003434:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003436:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800343a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800343c:	e841 2300 	strex	r3, r2, [r1]
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1e5      	bne.n	8003414 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	2b01      	cmp	r3, #1
 800344e:	d119      	bne.n	8003484 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	330c      	adds	r3, #12
 8003456:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	e853 3f00 	ldrex	r3, [r3]
 800345e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f023 0310 	bic.w	r3, r3, #16
 8003466:	647b      	str	r3, [r7, #68]	; 0x44
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	330c      	adds	r3, #12
 800346e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003470:	61ba      	str	r2, [r7, #24]
 8003472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003474:	6979      	ldr	r1, [r7, #20]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	e841 2300 	strex	r3, r2, [r1]
 800347c:	613b      	str	r3, [r7, #16]
   return(result);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e5      	bne.n	8003450 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003492:	bf00      	nop
 8003494:	3754      	adds	r7, #84	; 0x54
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b084      	sub	sp, #16
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f7ff feb7 	bl	800322c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034be:	bf00      	nop
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d2:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f7ff feac 	bl	8003240 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034e8:	bf00      	nop
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f7ff fe9e 	bl	8003254 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b21      	cmp	r3, #33	; 0x21
 8003532:	d13e      	bne.n	80035b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353c:	d114      	bne.n	8003568 <UART_Transmit_IT+0x48>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d110      	bne.n	8003568 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800355a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	1c9a      	adds	r2, r3, #2
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	621a      	str	r2, [r3, #32]
 8003566:	e008      	b.n	800357a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	1c59      	adds	r1, r3, #1
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6211      	str	r1, [r2, #32]
 8003572:	781a      	ldrb	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29b      	uxth	r3, r3
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	4619      	mov	r1, r3
 8003588:	84d1      	strh	r1, [r2, #38]	; 0x26
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10f      	bne.n	80035ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800359c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	e000      	b.n	80035b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035b2:	2302      	movs	r3, #2
  }
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7fd fa25 	bl	8000a30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08c      	sub	sp, #48	; 0x30
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b22      	cmp	r3, #34	; 0x22
 8003602:	f040 80ab 	bne.w	800375c <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360e:	d117      	bne.n	8003640 <UART_Receive_IT+0x50>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d113      	bne.n	8003640 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003618:	2300      	movs	r3, #0
 800361a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003620:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	b29b      	uxth	r3, r3
 800362a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800362e:	b29a      	uxth	r2, r3
 8003630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003632:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003638:	1c9a      	adds	r2, r3, #2
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	629a      	str	r2, [r3, #40]	; 0x28
 800363e:	e026      	b.n	800368e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003646:	2300      	movs	r3, #0
 8003648:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003652:	d007      	beq.n	8003664 <UART_Receive_IT+0x74>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <UART_Receive_IT+0x82>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d106      	bne.n	8003672 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	b2da      	uxtb	r2, r3
 800366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366e:	701a      	strb	r2, [r3, #0]
 8003670:	e008      	b.n	8003684 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800367e:	b2da      	uxtb	r2, r3
 8003680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003682:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29b      	uxth	r3, r3
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	4619      	mov	r1, r3
 800369c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d15a      	bne.n	8003758 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0220 	bic.w	r2, r2, #32
 80036b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695a      	ldr	r2, [r3, #20]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0201 	bic.w	r2, r2, #1
 80036d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d135      	bne.n	800374e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	330c      	adds	r3, #12
 80036ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	e853 3f00 	ldrex	r3, [r3]
 80036f6:	613b      	str	r3, [r7, #16]
   return(result);
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f023 0310 	bic.w	r3, r3, #16
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	330c      	adds	r3, #12
 8003706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003708:	623a      	str	r2, [r7, #32]
 800370a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370c:	69f9      	ldr	r1, [r7, #28]
 800370e:	6a3a      	ldr	r2, [r7, #32]
 8003710:	e841 2300 	strex	r3, r2, [r1]
 8003714:	61bb      	str	r3, [r7, #24]
   return(result);
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1e5      	bne.n	80036e8 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0310 	and.w	r3, r3, #16
 8003726:	2b10      	cmp	r3, #16
 8003728:	d10a      	bne.n	8003740 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800372a:	2300      	movs	r3, #0
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003744:	4619      	mov	r1, r3
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff fd8e 	bl	8003268 <HAL_UARTEx_RxEventCallback>
 800374c:	e002      	b.n	8003754 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fd f92a 	bl	80009a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	e002      	b.n	800375e <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	e000      	b.n	800375e <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800375c:	2302      	movs	r3, #2
  }
}
 800375e:	4618      	mov	r0, r3
 8003760:	3730      	adds	r7, #48	; 0x30
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800376c:	b0c0      	sub	sp, #256	; 0x100
 800376e:	af00      	add	r7, sp, #0
 8003770:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003784:	68d9      	ldr	r1, [r3, #12]
 8003786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	ea40 0301 	orr.w	r3, r0, r1
 8003790:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	431a      	orrs	r2, r3
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037c0:	f021 010c 	bic.w	r1, r1, #12
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037ce:	430b      	orrs	r3, r1
 80037d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e2:	6999      	ldr	r1, [r3, #24]
 80037e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	ea40 0301 	orr.w	r3, r0, r1
 80037ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4b8f      	ldr	r3, [pc, #572]	; (8003a34 <UART_SetConfig+0x2cc>)
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d005      	beq.n	8003808 <UART_SetConfig+0xa0>
 80037fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	4b8d      	ldr	r3, [pc, #564]	; (8003a38 <UART_SetConfig+0x2d0>)
 8003804:	429a      	cmp	r2, r3
 8003806:	d104      	bne.n	8003812 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003808:	f7fe ff52 	bl	80026b0 <HAL_RCC_GetPCLK2Freq>
 800380c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003810:	e003      	b.n	800381a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003812:	f7fe ff39 	bl	8002688 <HAL_RCC_GetPCLK1Freq>
 8003816:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800381a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003824:	f040 810c 	bne.w	8003a40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800382c:	2200      	movs	r2, #0
 800382e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003832:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003836:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800383a:	4622      	mov	r2, r4
 800383c:	462b      	mov	r3, r5
 800383e:	1891      	adds	r1, r2, r2
 8003840:	65b9      	str	r1, [r7, #88]	; 0x58
 8003842:	415b      	adcs	r3, r3
 8003844:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003846:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800384a:	4621      	mov	r1, r4
 800384c:	eb12 0801 	adds.w	r8, r2, r1
 8003850:	4629      	mov	r1, r5
 8003852:	eb43 0901 	adc.w	r9, r3, r1
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003862:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003866:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800386a:	4690      	mov	r8, r2
 800386c:	4699      	mov	r9, r3
 800386e:	4623      	mov	r3, r4
 8003870:	eb18 0303 	adds.w	r3, r8, r3
 8003874:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003878:	462b      	mov	r3, r5
 800387a:	eb49 0303 	adc.w	r3, r9, r3
 800387e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800388e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003892:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003896:	460b      	mov	r3, r1
 8003898:	18db      	adds	r3, r3, r3
 800389a:	653b      	str	r3, [r7, #80]	; 0x50
 800389c:	4613      	mov	r3, r2
 800389e:	eb42 0303 	adc.w	r3, r2, r3
 80038a2:	657b      	str	r3, [r7, #84]	; 0x54
 80038a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038ac:	f7fc fd08 	bl	80002c0 <__aeabi_uldivmod>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4b61      	ldr	r3, [pc, #388]	; (8003a3c <UART_SetConfig+0x2d4>)
 80038b6:	fba3 2302 	umull	r2, r3, r3, r2
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	011c      	lsls	r4, r3, #4
 80038be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038c2:	2200      	movs	r2, #0
 80038c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80038cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80038d0:	4642      	mov	r2, r8
 80038d2:	464b      	mov	r3, r9
 80038d4:	1891      	adds	r1, r2, r2
 80038d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80038d8:	415b      	adcs	r3, r3
 80038da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038e0:	4641      	mov	r1, r8
 80038e2:	eb12 0a01 	adds.w	sl, r2, r1
 80038e6:	4649      	mov	r1, r9
 80038e8:	eb43 0b01 	adc.w	fp, r3, r1
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003900:	4692      	mov	sl, r2
 8003902:	469b      	mov	fp, r3
 8003904:	4643      	mov	r3, r8
 8003906:	eb1a 0303 	adds.w	r3, sl, r3
 800390a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800390e:	464b      	mov	r3, r9
 8003910:	eb4b 0303 	adc.w	r3, fp, r3
 8003914:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003924:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003928:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800392c:	460b      	mov	r3, r1
 800392e:	18db      	adds	r3, r3, r3
 8003930:	643b      	str	r3, [r7, #64]	; 0x40
 8003932:	4613      	mov	r3, r2
 8003934:	eb42 0303 	adc.w	r3, r2, r3
 8003938:	647b      	str	r3, [r7, #68]	; 0x44
 800393a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800393e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003942:	f7fc fcbd 	bl	80002c0 <__aeabi_uldivmod>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4611      	mov	r1, r2
 800394c:	4b3b      	ldr	r3, [pc, #236]	; (8003a3c <UART_SetConfig+0x2d4>)
 800394e:	fba3 2301 	umull	r2, r3, r3, r1
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	2264      	movs	r2, #100	; 0x64
 8003956:	fb02 f303 	mul.w	r3, r2, r3
 800395a:	1acb      	subs	r3, r1, r3
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003962:	4b36      	ldr	r3, [pc, #216]	; (8003a3c <UART_SetConfig+0x2d4>)
 8003964:	fba3 2302 	umull	r2, r3, r3, r2
 8003968:	095b      	lsrs	r3, r3, #5
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003970:	441c      	add	r4, r3
 8003972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003976:	2200      	movs	r2, #0
 8003978:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800397c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003980:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003984:	4642      	mov	r2, r8
 8003986:	464b      	mov	r3, r9
 8003988:	1891      	adds	r1, r2, r2
 800398a:	63b9      	str	r1, [r7, #56]	; 0x38
 800398c:	415b      	adcs	r3, r3
 800398e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003990:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003994:	4641      	mov	r1, r8
 8003996:	1851      	adds	r1, r2, r1
 8003998:	6339      	str	r1, [r7, #48]	; 0x30
 800399a:	4649      	mov	r1, r9
 800399c:	414b      	adcs	r3, r1
 800399e:	637b      	str	r3, [r7, #52]	; 0x34
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039ac:	4659      	mov	r1, fp
 80039ae:	00cb      	lsls	r3, r1, #3
 80039b0:	4651      	mov	r1, sl
 80039b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039b6:	4651      	mov	r1, sl
 80039b8:	00ca      	lsls	r2, r1, #3
 80039ba:	4610      	mov	r0, r2
 80039bc:	4619      	mov	r1, r3
 80039be:	4603      	mov	r3, r0
 80039c0:	4642      	mov	r2, r8
 80039c2:	189b      	adds	r3, r3, r2
 80039c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039c8:	464b      	mov	r3, r9
 80039ca:	460a      	mov	r2, r1
 80039cc:	eb42 0303 	adc.w	r3, r2, r3
 80039d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039e8:	460b      	mov	r3, r1
 80039ea:	18db      	adds	r3, r3, r3
 80039ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ee:	4613      	mov	r3, r2
 80039f0:	eb42 0303 	adc.w	r3, r2, r3
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80039fe:	f7fc fc5f 	bl	80002c0 <__aeabi_uldivmod>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <UART_SetConfig+0x2d4>)
 8003a08:	fba3 1302 	umull	r1, r3, r3, r2
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	2164      	movs	r1, #100	; 0x64
 8003a10:	fb01 f303 	mul.w	r3, r1, r3
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	3332      	adds	r3, #50	; 0x32
 8003a1a:	4a08      	ldr	r2, [pc, #32]	; (8003a3c <UART_SetConfig+0x2d4>)
 8003a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a20:	095b      	lsrs	r3, r3, #5
 8003a22:	f003 0207 	and.w	r2, r3, #7
 8003a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4422      	add	r2, r4
 8003a2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a30:	e105      	b.n	8003c3e <UART_SetConfig+0x4d6>
 8003a32:	bf00      	nop
 8003a34:	40011000 	.word	0x40011000
 8003a38:	40011400 	.word	0x40011400
 8003a3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a44:	2200      	movs	r2, #0
 8003a46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a52:	4642      	mov	r2, r8
 8003a54:	464b      	mov	r3, r9
 8003a56:	1891      	adds	r1, r2, r2
 8003a58:	6239      	str	r1, [r7, #32]
 8003a5a:	415b      	adcs	r3, r3
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a62:	4641      	mov	r1, r8
 8003a64:	1854      	adds	r4, r2, r1
 8003a66:	4649      	mov	r1, r9
 8003a68:	eb43 0501 	adc.w	r5, r3, r1
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	00eb      	lsls	r3, r5, #3
 8003a76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a7a:	00e2      	lsls	r2, r4, #3
 8003a7c:	4614      	mov	r4, r2
 8003a7e:	461d      	mov	r5, r3
 8003a80:	4643      	mov	r3, r8
 8003a82:	18e3      	adds	r3, r4, r3
 8003a84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a88:	464b      	mov	r3, r9
 8003a8a:	eb45 0303 	adc.w	r3, r5, r3
 8003a8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003aae:	4629      	mov	r1, r5
 8003ab0:	008b      	lsls	r3, r1, #2
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ab8:	4621      	mov	r1, r4
 8003aba:	008a      	lsls	r2, r1, #2
 8003abc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ac0:	f7fc fbfe 	bl	80002c0 <__aeabi_uldivmod>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4b60      	ldr	r3, [pc, #384]	; (8003c4c <UART_SetConfig+0x4e4>)
 8003aca:	fba3 2302 	umull	r2, r3, r3, r2
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	011c      	lsls	r4, r3, #4
 8003ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003adc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ae0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ae4:	4642      	mov	r2, r8
 8003ae6:	464b      	mov	r3, r9
 8003ae8:	1891      	adds	r1, r2, r2
 8003aea:	61b9      	str	r1, [r7, #24]
 8003aec:	415b      	adcs	r3, r3
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003af4:	4641      	mov	r1, r8
 8003af6:	1851      	adds	r1, r2, r1
 8003af8:	6139      	str	r1, [r7, #16]
 8003afa:	4649      	mov	r1, r9
 8003afc:	414b      	adcs	r3, r1
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b0c:	4659      	mov	r1, fp
 8003b0e:	00cb      	lsls	r3, r1, #3
 8003b10:	4651      	mov	r1, sl
 8003b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b16:	4651      	mov	r1, sl
 8003b18:	00ca      	lsls	r2, r1, #3
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4603      	mov	r3, r0
 8003b20:	4642      	mov	r2, r8
 8003b22:	189b      	adds	r3, r3, r2
 8003b24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b28:	464b      	mov	r3, r9
 8003b2a:	460a      	mov	r2, r1
 8003b2c:	eb42 0303 	adc.w	r3, r2, r3
 8003b30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b4c:	4649      	mov	r1, r9
 8003b4e:	008b      	lsls	r3, r1, #2
 8003b50:	4641      	mov	r1, r8
 8003b52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b56:	4641      	mov	r1, r8
 8003b58:	008a      	lsls	r2, r1, #2
 8003b5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b5e:	f7fc fbaf 	bl	80002c0 <__aeabi_uldivmod>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4b39      	ldr	r3, [pc, #228]	; (8003c4c <UART_SetConfig+0x4e4>)
 8003b68:	fba3 1302 	umull	r1, r3, r3, r2
 8003b6c:	095b      	lsrs	r3, r3, #5
 8003b6e:	2164      	movs	r1, #100	; 0x64
 8003b70:	fb01 f303 	mul.w	r3, r1, r3
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	3332      	adds	r3, #50	; 0x32
 8003b7a:	4a34      	ldr	r2, [pc, #208]	; (8003c4c <UART_SetConfig+0x4e4>)
 8003b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b86:	441c      	add	r4, r3
 8003b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	673b      	str	r3, [r7, #112]	; 0x70
 8003b90:	677a      	str	r2, [r7, #116]	; 0x74
 8003b92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b96:	4642      	mov	r2, r8
 8003b98:	464b      	mov	r3, r9
 8003b9a:	1891      	adds	r1, r2, r2
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	415b      	adcs	r3, r3
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ba6:	4641      	mov	r1, r8
 8003ba8:	1851      	adds	r1, r2, r1
 8003baa:	6039      	str	r1, [r7, #0]
 8003bac:	4649      	mov	r1, r9
 8003bae:	414b      	adcs	r3, r1
 8003bb0:	607b      	str	r3, [r7, #4]
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bbe:	4659      	mov	r1, fp
 8003bc0:	00cb      	lsls	r3, r1, #3
 8003bc2:	4651      	mov	r1, sl
 8003bc4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bc8:	4651      	mov	r1, sl
 8003bca:	00ca      	lsls	r2, r1, #3
 8003bcc:	4610      	mov	r0, r2
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	4642      	mov	r2, r8
 8003bd4:	189b      	adds	r3, r3, r2
 8003bd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bd8:	464b      	mov	r3, r9
 8003bda:	460a      	mov	r2, r1
 8003bdc:	eb42 0303 	adc.w	r3, r2, r3
 8003be0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	663b      	str	r3, [r7, #96]	; 0x60
 8003bec:	667a      	str	r2, [r7, #100]	; 0x64
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	008b      	lsls	r3, r1, #2
 8003bfe:	4641      	mov	r1, r8
 8003c00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c04:	4641      	mov	r1, r8
 8003c06:	008a      	lsls	r2, r1, #2
 8003c08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c0c:	f7fc fb58 	bl	80002c0 <__aeabi_uldivmod>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4b0d      	ldr	r3, [pc, #52]	; (8003c4c <UART_SetConfig+0x4e4>)
 8003c16:	fba3 1302 	umull	r1, r3, r3, r2
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	2164      	movs	r1, #100	; 0x64
 8003c1e:	fb01 f303 	mul.w	r3, r1, r3
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	3332      	adds	r3, #50	; 0x32
 8003c28:	4a08      	ldr	r2, [pc, #32]	; (8003c4c <UART_SetConfig+0x4e4>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	f003 020f 	and.w	r2, r3, #15
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4422      	add	r2, r4
 8003c3c:	609a      	str	r2, [r3, #8]
}
 8003c3e:	bf00      	nop
 8003c40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c44:	46bd      	mov	sp, r7
 8003c46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c4a:	bf00      	nop
 8003c4c:	51eb851f 	.word	0x51eb851f

08003c50 <atoi>:
 8003c50:	220a      	movs	r2, #10
 8003c52:	2100      	movs	r1, #0
 8003c54:	f000 b918 	b.w	8003e88 <strtol>

08003c58 <__errno>:
 8003c58:	4b01      	ldr	r3, [pc, #4]	; (8003c60 <__errno+0x8>)
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	20000014 	.word	0x20000014

08003c64 <__libc_init_array>:
 8003c64:	b570      	push	{r4, r5, r6, lr}
 8003c66:	4d0d      	ldr	r5, [pc, #52]	; (8003c9c <__libc_init_array+0x38>)
 8003c68:	4c0d      	ldr	r4, [pc, #52]	; (8003ca0 <__libc_init_array+0x3c>)
 8003c6a:	1b64      	subs	r4, r4, r5
 8003c6c:	10a4      	asrs	r4, r4, #2
 8003c6e:	2600      	movs	r6, #0
 8003c70:	42a6      	cmp	r6, r4
 8003c72:	d109      	bne.n	8003c88 <__libc_init_array+0x24>
 8003c74:	4d0b      	ldr	r5, [pc, #44]	; (8003ca4 <__libc_init_array+0x40>)
 8003c76:	4c0c      	ldr	r4, [pc, #48]	; (8003ca8 <__libc_init_array+0x44>)
 8003c78:	f001 f968 	bl	8004f4c <_init>
 8003c7c:	1b64      	subs	r4, r4, r5
 8003c7e:	10a4      	asrs	r4, r4, #2
 8003c80:	2600      	movs	r6, #0
 8003c82:	42a6      	cmp	r6, r4
 8003c84:	d105      	bne.n	8003c92 <__libc_init_array+0x2e>
 8003c86:	bd70      	pop	{r4, r5, r6, pc}
 8003c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c8c:	4798      	blx	r3
 8003c8e:	3601      	adds	r6, #1
 8003c90:	e7ee      	b.n	8003c70 <__libc_init_array+0xc>
 8003c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c96:	4798      	blx	r3
 8003c98:	3601      	adds	r6, #1
 8003c9a:	e7f2      	b.n	8003c82 <__libc_init_array+0x1e>
 8003c9c:	08005304 	.word	0x08005304
 8003ca0:	08005304 	.word	0x08005304
 8003ca4:	08005304 	.word	0x08005304
 8003ca8:	08005308 	.word	0x08005308

08003cac <memset>:
 8003cac:	4402      	add	r2, r0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d100      	bne.n	8003cb6 <memset+0xa>
 8003cb4:	4770      	bx	lr
 8003cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cba:	e7f9      	b.n	8003cb0 <memset+0x4>

08003cbc <sniprintf>:
 8003cbc:	b40c      	push	{r2, r3}
 8003cbe:	b530      	push	{r4, r5, lr}
 8003cc0:	4b17      	ldr	r3, [pc, #92]	; (8003d20 <sniprintf+0x64>)
 8003cc2:	1e0c      	subs	r4, r1, #0
 8003cc4:	681d      	ldr	r5, [r3, #0]
 8003cc6:	b09d      	sub	sp, #116	; 0x74
 8003cc8:	da08      	bge.n	8003cdc <sniprintf+0x20>
 8003cca:	238b      	movs	r3, #139	; 0x8b
 8003ccc:	602b      	str	r3, [r5, #0]
 8003cce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cd2:	b01d      	add	sp, #116	; 0x74
 8003cd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003cd8:	b002      	add	sp, #8
 8003cda:	4770      	bx	lr
 8003cdc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003ce0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003ce4:	bf14      	ite	ne
 8003ce6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8003cea:	4623      	moveq	r3, r4
 8003cec:	9304      	str	r3, [sp, #16]
 8003cee:	9307      	str	r3, [sp, #28]
 8003cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cf4:	9002      	str	r0, [sp, #8]
 8003cf6:	9006      	str	r0, [sp, #24]
 8003cf8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003cfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003cfe:	ab21      	add	r3, sp, #132	; 0x84
 8003d00:	a902      	add	r1, sp, #8
 8003d02:	4628      	mov	r0, r5
 8003d04:	9301      	str	r3, [sp, #4]
 8003d06:	f000 f925 	bl	8003f54 <_svfiprintf_r>
 8003d0a:	1c43      	adds	r3, r0, #1
 8003d0c:	bfbc      	itt	lt
 8003d0e:	238b      	movlt	r3, #139	; 0x8b
 8003d10:	602b      	strlt	r3, [r5, #0]
 8003d12:	2c00      	cmp	r4, #0
 8003d14:	d0dd      	beq.n	8003cd2 <sniprintf+0x16>
 8003d16:	9b02      	ldr	r3, [sp, #8]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	701a      	strb	r2, [r3, #0]
 8003d1c:	e7d9      	b.n	8003cd2 <sniprintf+0x16>
 8003d1e:	bf00      	nop
 8003d20:	20000014 	.word	0x20000014

08003d24 <siscanf>:
 8003d24:	b40e      	push	{r1, r2, r3}
 8003d26:	b510      	push	{r4, lr}
 8003d28:	b09f      	sub	sp, #124	; 0x7c
 8003d2a:	ac21      	add	r4, sp, #132	; 0x84
 8003d2c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003d30:	f854 2b04 	ldr.w	r2, [r4], #4
 8003d34:	9201      	str	r2, [sp, #4]
 8003d36:	f8ad 101c 	strh.w	r1, [sp, #28]
 8003d3a:	9004      	str	r0, [sp, #16]
 8003d3c:	9008      	str	r0, [sp, #32]
 8003d3e:	f7fc fa61 	bl	8000204 <strlen>
 8003d42:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <siscanf+0x50>)
 8003d44:	9005      	str	r0, [sp, #20]
 8003d46:	9009      	str	r0, [sp, #36]	; 0x24
 8003d48:	930d      	str	r3, [sp, #52]	; 0x34
 8003d4a:	480b      	ldr	r0, [pc, #44]	; (8003d78 <siscanf+0x54>)
 8003d4c:	9a01      	ldr	r2, [sp, #4]
 8003d4e:	6800      	ldr	r0, [r0, #0]
 8003d50:	9403      	str	r4, [sp, #12]
 8003d52:	2300      	movs	r3, #0
 8003d54:	9311      	str	r3, [sp, #68]	; 0x44
 8003d56:	9316      	str	r3, [sp, #88]	; 0x58
 8003d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d5c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8003d60:	a904      	add	r1, sp, #16
 8003d62:	4623      	mov	r3, r4
 8003d64:	f000 fa50 	bl	8004208 <__ssvfiscanf_r>
 8003d68:	b01f      	add	sp, #124	; 0x7c
 8003d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d6e:	b003      	add	sp, #12
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	08003d7d 	.word	0x08003d7d
 8003d78:	20000014 	.word	0x20000014

08003d7c <__seofread>:
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	4770      	bx	lr

08003d80 <_strtol_l.constprop.0>:
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d86:	d001      	beq.n	8003d8c <_strtol_l.constprop.0+0xc>
 8003d88:	2b24      	cmp	r3, #36	; 0x24
 8003d8a:	d906      	bls.n	8003d9a <_strtol_l.constprop.0+0x1a>
 8003d8c:	f7ff ff64 	bl	8003c58 <__errno>
 8003d90:	2316      	movs	r3, #22
 8003d92:	6003      	str	r3, [r0, #0]
 8003d94:	2000      	movs	r0, #0
 8003d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d9a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003e80 <_strtol_l.constprop.0+0x100>
 8003d9e:	460d      	mov	r5, r1
 8003da0:	462e      	mov	r6, r5
 8003da2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003da6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003daa:	f017 0708 	ands.w	r7, r7, #8
 8003dae:	d1f7      	bne.n	8003da0 <_strtol_l.constprop.0+0x20>
 8003db0:	2c2d      	cmp	r4, #45	; 0x2d
 8003db2:	d132      	bne.n	8003e1a <_strtol_l.constprop.0+0x9a>
 8003db4:	782c      	ldrb	r4, [r5, #0]
 8003db6:	2701      	movs	r7, #1
 8003db8:	1cb5      	adds	r5, r6, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d05b      	beq.n	8003e76 <_strtol_l.constprop.0+0xf6>
 8003dbe:	2b10      	cmp	r3, #16
 8003dc0:	d109      	bne.n	8003dd6 <_strtol_l.constprop.0+0x56>
 8003dc2:	2c30      	cmp	r4, #48	; 0x30
 8003dc4:	d107      	bne.n	8003dd6 <_strtol_l.constprop.0+0x56>
 8003dc6:	782c      	ldrb	r4, [r5, #0]
 8003dc8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003dcc:	2c58      	cmp	r4, #88	; 0x58
 8003dce:	d14d      	bne.n	8003e6c <_strtol_l.constprop.0+0xec>
 8003dd0:	786c      	ldrb	r4, [r5, #1]
 8003dd2:	2310      	movs	r3, #16
 8003dd4:	3502      	adds	r5, #2
 8003dd6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003dda:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003dde:	f04f 0c00 	mov.w	ip, #0
 8003de2:	fbb8 f9f3 	udiv	r9, r8, r3
 8003de6:	4666      	mov	r6, ip
 8003de8:	fb03 8a19 	mls	sl, r3, r9, r8
 8003dec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003df0:	f1be 0f09 	cmp.w	lr, #9
 8003df4:	d816      	bhi.n	8003e24 <_strtol_l.constprop.0+0xa4>
 8003df6:	4674      	mov	r4, lr
 8003df8:	42a3      	cmp	r3, r4
 8003dfa:	dd24      	ble.n	8003e46 <_strtol_l.constprop.0+0xc6>
 8003dfc:	f1bc 0f00 	cmp.w	ip, #0
 8003e00:	db1e      	blt.n	8003e40 <_strtol_l.constprop.0+0xc0>
 8003e02:	45b1      	cmp	r9, r6
 8003e04:	d31c      	bcc.n	8003e40 <_strtol_l.constprop.0+0xc0>
 8003e06:	d101      	bne.n	8003e0c <_strtol_l.constprop.0+0x8c>
 8003e08:	45a2      	cmp	sl, r4
 8003e0a:	db19      	blt.n	8003e40 <_strtol_l.constprop.0+0xc0>
 8003e0c:	fb06 4603 	mla	r6, r6, r3, r4
 8003e10:	f04f 0c01 	mov.w	ip, #1
 8003e14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003e18:	e7e8      	b.n	8003dec <_strtol_l.constprop.0+0x6c>
 8003e1a:	2c2b      	cmp	r4, #43	; 0x2b
 8003e1c:	bf04      	itt	eq
 8003e1e:	782c      	ldrbeq	r4, [r5, #0]
 8003e20:	1cb5      	addeq	r5, r6, #2
 8003e22:	e7ca      	b.n	8003dba <_strtol_l.constprop.0+0x3a>
 8003e24:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003e28:	f1be 0f19 	cmp.w	lr, #25
 8003e2c:	d801      	bhi.n	8003e32 <_strtol_l.constprop.0+0xb2>
 8003e2e:	3c37      	subs	r4, #55	; 0x37
 8003e30:	e7e2      	b.n	8003df8 <_strtol_l.constprop.0+0x78>
 8003e32:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003e36:	f1be 0f19 	cmp.w	lr, #25
 8003e3a:	d804      	bhi.n	8003e46 <_strtol_l.constprop.0+0xc6>
 8003e3c:	3c57      	subs	r4, #87	; 0x57
 8003e3e:	e7db      	b.n	8003df8 <_strtol_l.constprop.0+0x78>
 8003e40:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8003e44:	e7e6      	b.n	8003e14 <_strtol_l.constprop.0+0x94>
 8003e46:	f1bc 0f00 	cmp.w	ip, #0
 8003e4a:	da05      	bge.n	8003e58 <_strtol_l.constprop.0+0xd8>
 8003e4c:	2322      	movs	r3, #34	; 0x22
 8003e4e:	6003      	str	r3, [r0, #0]
 8003e50:	4646      	mov	r6, r8
 8003e52:	b942      	cbnz	r2, 8003e66 <_strtol_l.constprop.0+0xe6>
 8003e54:	4630      	mov	r0, r6
 8003e56:	e79e      	b.n	8003d96 <_strtol_l.constprop.0+0x16>
 8003e58:	b107      	cbz	r7, 8003e5c <_strtol_l.constprop.0+0xdc>
 8003e5a:	4276      	negs	r6, r6
 8003e5c:	2a00      	cmp	r2, #0
 8003e5e:	d0f9      	beq.n	8003e54 <_strtol_l.constprop.0+0xd4>
 8003e60:	f1bc 0f00 	cmp.w	ip, #0
 8003e64:	d000      	beq.n	8003e68 <_strtol_l.constprop.0+0xe8>
 8003e66:	1e69      	subs	r1, r5, #1
 8003e68:	6011      	str	r1, [r2, #0]
 8003e6a:	e7f3      	b.n	8003e54 <_strtol_l.constprop.0+0xd4>
 8003e6c:	2430      	movs	r4, #48	; 0x30
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1b1      	bne.n	8003dd6 <_strtol_l.constprop.0+0x56>
 8003e72:	2308      	movs	r3, #8
 8003e74:	e7af      	b.n	8003dd6 <_strtol_l.constprop.0+0x56>
 8003e76:	2c30      	cmp	r4, #48	; 0x30
 8003e78:	d0a5      	beq.n	8003dc6 <_strtol_l.constprop.0+0x46>
 8003e7a:	230a      	movs	r3, #10
 8003e7c:	e7ab      	b.n	8003dd6 <_strtol_l.constprop.0+0x56>
 8003e7e:	bf00      	nop
 8003e80:	0800514d 	.word	0x0800514d

08003e84 <_strtol_r>:
 8003e84:	f7ff bf7c 	b.w	8003d80 <_strtol_l.constprop.0>

08003e88 <strtol>:
 8003e88:	4613      	mov	r3, r2
 8003e8a:	460a      	mov	r2, r1
 8003e8c:	4601      	mov	r1, r0
 8003e8e:	4802      	ldr	r0, [pc, #8]	; (8003e98 <strtol+0x10>)
 8003e90:	6800      	ldr	r0, [r0, #0]
 8003e92:	f7ff bf75 	b.w	8003d80 <_strtol_l.constprop.0>
 8003e96:	bf00      	nop
 8003e98:	20000014 	.word	0x20000014

08003e9c <__ssputs_r>:
 8003e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea0:	688e      	ldr	r6, [r1, #8]
 8003ea2:	429e      	cmp	r6, r3
 8003ea4:	4682      	mov	sl, r0
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	4690      	mov	r8, r2
 8003eaa:	461f      	mov	r7, r3
 8003eac:	d838      	bhi.n	8003f20 <__ssputs_r+0x84>
 8003eae:	898a      	ldrh	r2, [r1, #12]
 8003eb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003eb4:	d032      	beq.n	8003f1c <__ssputs_r+0x80>
 8003eb6:	6825      	ldr	r5, [r4, #0]
 8003eb8:	6909      	ldr	r1, [r1, #16]
 8003eba:	eba5 0901 	sub.w	r9, r5, r1
 8003ebe:	6965      	ldr	r5, [r4, #20]
 8003ec0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ec4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ec8:	3301      	adds	r3, #1
 8003eca:	444b      	add	r3, r9
 8003ecc:	106d      	asrs	r5, r5, #1
 8003ece:	429d      	cmp	r5, r3
 8003ed0:	bf38      	it	cc
 8003ed2:	461d      	movcc	r5, r3
 8003ed4:	0553      	lsls	r3, r2, #21
 8003ed6:	d531      	bpl.n	8003f3c <__ssputs_r+0xa0>
 8003ed8:	4629      	mov	r1, r5
 8003eda:	f000 ff6f 	bl	8004dbc <_malloc_r>
 8003ede:	4606      	mov	r6, r0
 8003ee0:	b950      	cbnz	r0, 8003ef8 <__ssputs_r+0x5c>
 8003ee2:	230c      	movs	r3, #12
 8003ee4:	f8ca 3000 	str.w	r3, [sl]
 8003ee8:	89a3      	ldrh	r3, [r4, #12]
 8003eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eee:	81a3      	strh	r3, [r4, #12]
 8003ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef8:	6921      	ldr	r1, [r4, #16]
 8003efa:	464a      	mov	r2, r9
 8003efc:	f000 feca 	bl	8004c94 <memcpy>
 8003f00:	89a3      	ldrh	r3, [r4, #12]
 8003f02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f0a:	81a3      	strh	r3, [r4, #12]
 8003f0c:	6126      	str	r6, [r4, #16]
 8003f0e:	6165      	str	r5, [r4, #20]
 8003f10:	444e      	add	r6, r9
 8003f12:	eba5 0509 	sub.w	r5, r5, r9
 8003f16:	6026      	str	r6, [r4, #0]
 8003f18:	60a5      	str	r5, [r4, #8]
 8003f1a:	463e      	mov	r6, r7
 8003f1c:	42be      	cmp	r6, r7
 8003f1e:	d900      	bls.n	8003f22 <__ssputs_r+0x86>
 8003f20:	463e      	mov	r6, r7
 8003f22:	6820      	ldr	r0, [r4, #0]
 8003f24:	4632      	mov	r2, r6
 8003f26:	4641      	mov	r1, r8
 8003f28:	f000 fec2 	bl	8004cb0 <memmove>
 8003f2c:	68a3      	ldr	r3, [r4, #8]
 8003f2e:	1b9b      	subs	r3, r3, r6
 8003f30:	60a3      	str	r3, [r4, #8]
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	4433      	add	r3, r6
 8003f36:	6023      	str	r3, [r4, #0]
 8003f38:	2000      	movs	r0, #0
 8003f3a:	e7db      	b.n	8003ef4 <__ssputs_r+0x58>
 8003f3c:	462a      	mov	r2, r5
 8003f3e:	f000 ffb1 	bl	8004ea4 <_realloc_r>
 8003f42:	4606      	mov	r6, r0
 8003f44:	2800      	cmp	r0, #0
 8003f46:	d1e1      	bne.n	8003f0c <__ssputs_r+0x70>
 8003f48:	6921      	ldr	r1, [r4, #16]
 8003f4a:	4650      	mov	r0, sl
 8003f4c:	f000 feca 	bl	8004ce4 <_free_r>
 8003f50:	e7c7      	b.n	8003ee2 <__ssputs_r+0x46>
	...

08003f54 <_svfiprintf_r>:
 8003f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f58:	4698      	mov	r8, r3
 8003f5a:	898b      	ldrh	r3, [r1, #12]
 8003f5c:	061b      	lsls	r3, r3, #24
 8003f5e:	b09d      	sub	sp, #116	; 0x74
 8003f60:	4607      	mov	r7, r0
 8003f62:	460d      	mov	r5, r1
 8003f64:	4614      	mov	r4, r2
 8003f66:	d50e      	bpl.n	8003f86 <_svfiprintf_r+0x32>
 8003f68:	690b      	ldr	r3, [r1, #16]
 8003f6a:	b963      	cbnz	r3, 8003f86 <_svfiprintf_r+0x32>
 8003f6c:	2140      	movs	r1, #64	; 0x40
 8003f6e:	f000 ff25 	bl	8004dbc <_malloc_r>
 8003f72:	6028      	str	r0, [r5, #0]
 8003f74:	6128      	str	r0, [r5, #16]
 8003f76:	b920      	cbnz	r0, 8003f82 <_svfiprintf_r+0x2e>
 8003f78:	230c      	movs	r3, #12
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f80:	e0d1      	b.n	8004126 <_svfiprintf_r+0x1d2>
 8003f82:	2340      	movs	r3, #64	; 0x40
 8003f84:	616b      	str	r3, [r5, #20]
 8003f86:	2300      	movs	r3, #0
 8003f88:	9309      	str	r3, [sp, #36]	; 0x24
 8003f8a:	2320      	movs	r3, #32
 8003f8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f90:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f94:	2330      	movs	r3, #48	; 0x30
 8003f96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004140 <_svfiprintf_r+0x1ec>
 8003f9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f9e:	f04f 0901 	mov.w	r9, #1
 8003fa2:	4623      	mov	r3, r4
 8003fa4:	469a      	mov	sl, r3
 8003fa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003faa:	b10a      	cbz	r2, 8003fb0 <_svfiprintf_r+0x5c>
 8003fac:	2a25      	cmp	r2, #37	; 0x25
 8003fae:	d1f9      	bne.n	8003fa4 <_svfiprintf_r+0x50>
 8003fb0:	ebba 0b04 	subs.w	fp, sl, r4
 8003fb4:	d00b      	beq.n	8003fce <_svfiprintf_r+0x7a>
 8003fb6:	465b      	mov	r3, fp
 8003fb8:	4622      	mov	r2, r4
 8003fba:	4629      	mov	r1, r5
 8003fbc:	4638      	mov	r0, r7
 8003fbe:	f7ff ff6d 	bl	8003e9c <__ssputs_r>
 8003fc2:	3001      	adds	r0, #1
 8003fc4:	f000 80aa 	beq.w	800411c <_svfiprintf_r+0x1c8>
 8003fc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fca:	445a      	add	r2, fp
 8003fcc:	9209      	str	r2, [sp, #36]	; 0x24
 8003fce:	f89a 3000 	ldrb.w	r3, [sl]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 80a2 	beq.w	800411c <_svfiprintf_r+0x1c8>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fe2:	f10a 0a01 	add.w	sl, sl, #1
 8003fe6:	9304      	str	r3, [sp, #16]
 8003fe8:	9307      	str	r3, [sp, #28]
 8003fea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fee:	931a      	str	r3, [sp, #104]	; 0x68
 8003ff0:	4654      	mov	r4, sl
 8003ff2:	2205      	movs	r2, #5
 8003ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ff8:	4851      	ldr	r0, [pc, #324]	; (8004140 <_svfiprintf_r+0x1ec>)
 8003ffa:	f7fc f911 	bl	8000220 <memchr>
 8003ffe:	9a04      	ldr	r2, [sp, #16]
 8004000:	b9d8      	cbnz	r0, 800403a <_svfiprintf_r+0xe6>
 8004002:	06d0      	lsls	r0, r2, #27
 8004004:	bf44      	itt	mi
 8004006:	2320      	movmi	r3, #32
 8004008:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800400c:	0711      	lsls	r1, r2, #28
 800400e:	bf44      	itt	mi
 8004010:	232b      	movmi	r3, #43	; 0x2b
 8004012:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004016:	f89a 3000 	ldrb.w	r3, [sl]
 800401a:	2b2a      	cmp	r3, #42	; 0x2a
 800401c:	d015      	beq.n	800404a <_svfiprintf_r+0xf6>
 800401e:	9a07      	ldr	r2, [sp, #28]
 8004020:	4654      	mov	r4, sl
 8004022:	2000      	movs	r0, #0
 8004024:	f04f 0c0a 	mov.w	ip, #10
 8004028:	4621      	mov	r1, r4
 800402a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800402e:	3b30      	subs	r3, #48	; 0x30
 8004030:	2b09      	cmp	r3, #9
 8004032:	d94e      	bls.n	80040d2 <_svfiprintf_r+0x17e>
 8004034:	b1b0      	cbz	r0, 8004064 <_svfiprintf_r+0x110>
 8004036:	9207      	str	r2, [sp, #28]
 8004038:	e014      	b.n	8004064 <_svfiprintf_r+0x110>
 800403a:	eba0 0308 	sub.w	r3, r0, r8
 800403e:	fa09 f303 	lsl.w	r3, r9, r3
 8004042:	4313      	orrs	r3, r2
 8004044:	9304      	str	r3, [sp, #16]
 8004046:	46a2      	mov	sl, r4
 8004048:	e7d2      	b.n	8003ff0 <_svfiprintf_r+0x9c>
 800404a:	9b03      	ldr	r3, [sp, #12]
 800404c:	1d19      	adds	r1, r3, #4
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	9103      	str	r1, [sp, #12]
 8004052:	2b00      	cmp	r3, #0
 8004054:	bfbb      	ittet	lt
 8004056:	425b      	neglt	r3, r3
 8004058:	f042 0202 	orrlt.w	r2, r2, #2
 800405c:	9307      	strge	r3, [sp, #28]
 800405e:	9307      	strlt	r3, [sp, #28]
 8004060:	bfb8      	it	lt
 8004062:	9204      	strlt	r2, [sp, #16]
 8004064:	7823      	ldrb	r3, [r4, #0]
 8004066:	2b2e      	cmp	r3, #46	; 0x2e
 8004068:	d10c      	bne.n	8004084 <_svfiprintf_r+0x130>
 800406a:	7863      	ldrb	r3, [r4, #1]
 800406c:	2b2a      	cmp	r3, #42	; 0x2a
 800406e:	d135      	bne.n	80040dc <_svfiprintf_r+0x188>
 8004070:	9b03      	ldr	r3, [sp, #12]
 8004072:	1d1a      	adds	r2, r3, #4
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	9203      	str	r2, [sp, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	bfb8      	it	lt
 800407c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004080:	3402      	adds	r4, #2
 8004082:	9305      	str	r3, [sp, #20]
 8004084:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004150 <_svfiprintf_r+0x1fc>
 8004088:	7821      	ldrb	r1, [r4, #0]
 800408a:	2203      	movs	r2, #3
 800408c:	4650      	mov	r0, sl
 800408e:	f7fc f8c7 	bl	8000220 <memchr>
 8004092:	b140      	cbz	r0, 80040a6 <_svfiprintf_r+0x152>
 8004094:	2340      	movs	r3, #64	; 0x40
 8004096:	eba0 000a 	sub.w	r0, r0, sl
 800409a:	fa03 f000 	lsl.w	r0, r3, r0
 800409e:	9b04      	ldr	r3, [sp, #16]
 80040a0:	4303      	orrs	r3, r0
 80040a2:	3401      	adds	r4, #1
 80040a4:	9304      	str	r3, [sp, #16]
 80040a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040aa:	4826      	ldr	r0, [pc, #152]	; (8004144 <_svfiprintf_r+0x1f0>)
 80040ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040b0:	2206      	movs	r2, #6
 80040b2:	f7fc f8b5 	bl	8000220 <memchr>
 80040b6:	2800      	cmp	r0, #0
 80040b8:	d038      	beq.n	800412c <_svfiprintf_r+0x1d8>
 80040ba:	4b23      	ldr	r3, [pc, #140]	; (8004148 <_svfiprintf_r+0x1f4>)
 80040bc:	bb1b      	cbnz	r3, 8004106 <_svfiprintf_r+0x1b2>
 80040be:	9b03      	ldr	r3, [sp, #12]
 80040c0:	3307      	adds	r3, #7
 80040c2:	f023 0307 	bic.w	r3, r3, #7
 80040c6:	3308      	adds	r3, #8
 80040c8:	9303      	str	r3, [sp, #12]
 80040ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040cc:	4433      	add	r3, r6
 80040ce:	9309      	str	r3, [sp, #36]	; 0x24
 80040d0:	e767      	b.n	8003fa2 <_svfiprintf_r+0x4e>
 80040d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80040d6:	460c      	mov	r4, r1
 80040d8:	2001      	movs	r0, #1
 80040da:	e7a5      	b.n	8004028 <_svfiprintf_r+0xd4>
 80040dc:	2300      	movs	r3, #0
 80040de:	3401      	adds	r4, #1
 80040e0:	9305      	str	r3, [sp, #20]
 80040e2:	4619      	mov	r1, r3
 80040e4:	f04f 0c0a 	mov.w	ip, #10
 80040e8:	4620      	mov	r0, r4
 80040ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040ee:	3a30      	subs	r2, #48	; 0x30
 80040f0:	2a09      	cmp	r2, #9
 80040f2:	d903      	bls.n	80040fc <_svfiprintf_r+0x1a8>
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0c5      	beq.n	8004084 <_svfiprintf_r+0x130>
 80040f8:	9105      	str	r1, [sp, #20]
 80040fa:	e7c3      	b.n	8004084 <_svfiprintf_r+0x130>
 80040fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004100:	4604      	mov	r4, r0
 8004102:	2301      	movs	r3, #1
 8004104:	e7f0      	b.n	80040e8 <_svfiprintf_r+0x194>
 8004106:	ab03      	add	r3, sp, #12
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	462a      	mov	r2, r5
 800410c:	4b0f      	ldr	r3, [pc, #60]	; (800414c <_svfiprintf_r+0x1f8>)
 800410e:	a904      	add	r1, sp, #16
 8004110:	4638      	mov	r0, r7
 8004112:	f3af 8000 	nop.w
 8004116:	1c42      	adds	r2, r0, #1
 8004118:	4606      	mov	r6, r0
 800411a:	d1d6      	bne.n	80040ca <_svfiprintf_r+0x176>
 800411c:	89ab      	ldrh	r3, [r5, #12]
 800411e:	065b      	lsls	r3, r3, #25
 8004120:	f53f af2c 	bmi.w	8003f7c <_svfiprintf_r+0x28>
 8004124:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004126:	b01d      	add	sp, #116	; 0x74
 8004128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800412c:	ab03      	add	r3, sp, #12
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	462a      	mov	r2, r5
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <_svfiprintf_r+0x1f8>)
 8004134:	a904      	add	r1, sp, #16
 8004136:	4638      	mov	r0, r7
 8004138:	f000 fa4c 	bl	80045d4 <_printf_i>
 800413c:	e7eb      	b.n	8004116 <_svfiprintf_r+0x1c2>
 800413e:	bf00      	nop
 8004140:	0800524d 	.word	0x0800524d
 8004144:	08005257 	.word	0x08005257
 8004148:	00000000 	.word	0x00000000
 800414c:	08003e9d 	.word	0x08003e9d
 8004150:	08005253 	.word	0x08005253

08004154 <_sungetc_r>:
 8004154:	b538      	push	{r3, r4, r5, lr}
 8004156:	1c4b      	adds	r3, r1, #1
 8004158:	4614      	mov	r4, r2
 800415a:	d103      	bne.n	8004164 <_sungetc_r+0x10>
 800415c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004160:	4628      	mov	r0, r5
 8004162:	bd38      	pop	{r3, r4, r5, pc}
 8004164:	8993      	ldrh	r3, [r2, #12]
 8004166:	f023 0320 	bic.w	r3, r3, #32
 800416a:	8193      	strh	r3, [r2, #12]
 800416c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800416e:	6852      	ldr	r2, [r2, #4]
 8004170:	b2cd      	uxtb	r5, r1
 8004172:	b18b      	cbz	r3, 8004198 <_sungetc_r+0x44>
 8004174:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004176:	4293      	cmp	r3, r2
 8004178:	dd08      	ble.n	800418c <_sungetc_r+0x38>
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	1e5a      	subs	r2, r3, #1
 800417e:	6022      	str	r2, [r4, #0]
 8004180:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004184:	6863      	ldr	r3, [r4, #4]
 8004186:	3301      	adds	r3, #1
 8004188:	6063      	str	r3, [r4, #4]
 800418a:	e7e9      	b.n	8004160 <_sungetc_r+0xc>
 800418c:	4621      	mov	r1, r4
 800418e:	f000 fd45 	bl	8004c1c <__submore>
 8004192:	2800      	cmp	r0, #0
 8004194:	d0f1      	beq.n	800417a <_sungetc_r+0x26>
 8004196:	e7e1      	b.n	800415c <_sungetc_r+0x8>
 8004198:	6921      	ldr	r1, [r4, #16]
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	b151      	cbz	r1, 80041b4 <_sungetc_r+0x60>
 800419e:	4299      	cmp	r1, r3
 80041a0:	d208      	bcs.n	80041b4 <_sungetc_r+0x60>
 80041a2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80041a6:	42a9      	cmp	r1, r5
 80041a8:	d104      	bne.n	80041b4 <_sungetc_r+0x60>
 80041aa:	3b01      	subs	r3, #1
 80041ac:	3201      	adds	r2, #1
 80041ae:	6023      	str	r3, [r4, #0]
 80041b0:	6062      	str	r2, [r4, #4]
 80041b2:	e7d5      	b.n	8004160 <_sungetc_r+0xc>
 80041b4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80041b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041bc:	6363      	str	r3, [r4, #52]	; 0x34
 80041be:	2303      	movs	r3, #3
 80041c0:	63a3      	str	r3, [r4, #56]	; 0x38
 80041c2:	4623      	mov	r3, r4
 80041c4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80041c8:	6023      	str	r3, [r4, #0]
 80041ca:	2301      	movs	r3, #1
 80041cc:	e7dc      	b.n	8004188 <_sungetc_r+0x34>

080041ce <__ssrefill_r>:
 80041ce:	b510      	push	{r4, lr}
 80041d0:	460c      	mov	r4, r1
 80041d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80041d4:	b169      	cbz	r1, 80041f2 <__ssrefill_r+0x24>
 80041d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041da:	4299      	cmp	r1, r3
 80041dc:	d001      	beq.n	80041e2 <__ssrefill_r+0x14>
 80041de:	f000 fd81 	bl	8004ce4 <_free_r>
 80041e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041e4:	6063      	str	r3, [r4, #4]
 80041e6:	2000      	movs	r0, #0
 80041e8:	6360      	str	r0, [r4, #52]	; 0x34
 80041ea:	b113      	cbz	r3, 80041f2 <__ssrefill_r+0x24>
 80041ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80041ee:	6023      	str	r3, [r4, #0]
 80041f0:	bd10      	pop	{r4, pc}
 80041f2:	6923      	ldr	r3, [r4, #16]
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	2300      	movs	r3, #0
 80041f8:	6063      	str	r3, [r4, #4]
 80041fa:	89a3      	ldrh	r3, [r4, #12]
 80041fc:	f043 0320 	orr.w	r3, r3, #32
 8004200:	81a3      	strh	r3, [r4, #12]
 8004202:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004206:	e7f3      	b.n	80041f0 <__ssrefill_r+0x22>

08004208 <__ssvfiscanf_r>:
 8004208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800420c:	460c      	mov	r4, r1
 800420e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8004212:	2100      	movs	r1, #0
 8004214:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004218:	49a6      	ldr	r1, [pc, #664]	; (80044b4 <__ssvfiscanf_r+0x2ac>)
 800421a:	91a0      	str	r1, [sp, #640]	; 0x280
 800421c:	f10d 0804 	add.w	r8, sp, #4
 8004220:	49a5      	ldr	r1, [pc, #660]	; (80044b8 <__ssvfiscanf_r+0x2b0>)
 8004222:	4fa6      	ldr	r7, [pc, #664]	; (80044bc <__ssvfiscanf_r+0x2b4>)
 8004224:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80044c0 <__ssvfiscanf_r+0x2b8>
 8004228:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800422c:	4606      	mov	r6, r0
 800422e:	91a1      	str	r1, [sp, #644]	; 0x284
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	7813      	ldrb	r3, [r2, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 815a 	beq.w	80044ee <__ssvfiscanf_r+0x2e6>
 800423a:	5dd9      	ldrb	r1, [r3, r7]
 800423c:	f011 0108 	ands.w	r1, r1, #8
 8004240:	f102 0501 	add.w	r5, r2, #1
 8004244:	d019      	beq.n	800427a <__ssvfiscanf_r+0x72>
 8004246:	6863      	ldr	r3, [r4, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	dd0f      	ble.n	800426c <__ssvfiscanf_r+0x64>
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	781a      	ldrb	r2, [r3, #0]
 8004250:	5cba      	ldrb	r2, [r7, r2]
 8004252:	0712      	lsls	r2, r2, #28
 8004254:	d401      	bmi.n	800425a <__ssvfiscanf_r+0x52>
 8004256:	462a      	mov	r2, r5
 8004258:	e7eb      	b.n	8004232 <__ssvfiscanf_r+0x2a>
 800425a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800425c:	3201      	adds	r2, #1
 800425e:	9245      	str	r2, [sp, #276]	; 0x114
 8004260:	6862      	ldr	r2, [r4, #4]
 8004262:	3301      	adds	r3, #1
 8004264:	3a01      	subs	r2, #1
 8004266:	6062      	str	r2, [r4, #4]
 8004268:	6023      	str	r3, [r4, #0]
 800426a:	e7ec      	b.n	8004246 <__ssvfiscanf_r+0x3e>
 800426c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800426e:	4621      	mov	r1, r4
 8004270:	4630      	mov	r0, r6
 8004272:	4798      	blx	r3
 8004274:	2800      	cmp	r0, #0
 8004276:	d0e9      	beq.n	800424c <__ssvfiscanf_r+0x44>
 8004278:	e7ed      	b.n	8004256 <__ssvfiscanf_r+0x4e>
 800427a:	2b25      	cmp	r3, #37	; 0x25
 800427c:	d012      	beq.n	80042a4 <__ssvfiscanf_r+0x9c>
 800427e:	469a      	mov	sl, r3
 8004280:	6863      	ldr	r3, [r4, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f340 8091 	ble.w	80043aa <__ssvfiscanf_r+0x1a2>
 8004288:	6822      	ldr	r2, [r4, #0]
 800428a:	7813      	ldrb	r3, [r2, #0]
 800428c:	4553      	cmp	r3, sl
 800428e:	f040 812e 	bne.w	80044ee <__ssvfiscanf_r+0x2e6>
 8004292:	6863      	ldr	r3, [r4, #4]
 8004294:	3b01      	subs	r3, #1
 8004296:	6063      	str	r3, [r4, #4]
 8004298:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800429a:	3201      	adds	r2, #1
 800429c:	3301      	adds	r3, #1
 800429e:	6022      	str	r2, [r4, #0]
 80042a0:	9345      	str	r3, [sp, #276]	; 0x114
 80042a2:	e7d8      	b.n	8004256 <__ssvfiscanf_r+0x4e>
 80042a4:	9141      	str	r1, [sp, #260]	; 0x104
 80042a6:	9143      	str	r1, [sp, #268]	; 0x10c
 80042a8:	7853      	ldrb	r3, [r2, #1]
 80042aa:	2b2a      	cmp	r3, #42	; 0x2a
 80042ac:	bf02      	ittt	eq
 80042ae:	2310      	moveq	r3, #16
 80042b0:	1c95      	addeq	r5, r2, #2
 80042b2:	9341      	streq	r3, [sp, #260]	; 0x104
 80042b4:	220a      	movs	r2, #10
 80042b6:	46aa      	mov	sl, r5
 80042b8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80042bc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80042c0:	2b09      	cmp	r3, #9
 80042c2:	d91d      	bls.n	8004300 <__ssvfiscanf_r+0xf8>
 80042c4:	487e      	ldr	r0, [pc, #504]	; (80044c0 <__ssvfiscanf_r+0x2b8>)
 80042c6:	2203      	movs	r2, #3
 80042c8:	f7fb ffaa 	bl	8000220 <memchr>
 80042cc:	b140      	cbz	r0, 80042e0 <__ssvfiscanf_r+0xd8>
 80042ce:	2301      	movs	r3, #1
 80042d0:	eba0 0009 	sub.w	r0, r0, r9
 80042d4:	fa03 f000 	lsl.w	r0, r3, r0
 80042d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80042da:	4318      	orrs	r0, r3
 80042dc:	9041      	str	r0, [sp, #260]	; 0x104
 80042de:	4655      	mov	r5, sl
 80042e0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80042e4:	2b78      	cmp	r3, #120	; 0x78
 80042e6:	d806      	bhi.n	80042f6 <__ssvfiscanf_r+0xee>
 80042e8:	2b57      	cmp	r3, #87	; 0x57
 80042ea:	d810      	bhi.n	800430e <__ssvfiscanf_r+0x106>
 80042ec:	2b25      	cmp	r3, #37	; 0x25
 80042ee:	d0c6      	beq.n	800427e <__ssvfiscanf_r+0x76>
 80042f0:	d856      	bhi.n	80043a0 <__ssvfiscanf_r+0x198>
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d064      	beq.n	80043c0 <__ssvfiscanf_r+0x1b8>
 80042f6:	2303      	movs	r3, #3
 80042f8:	9347      	str	r3, [sp, #284]	; 0x11c
 80042fa:	230a      	movs	r3, #10
 80042fc:	9342      	str	r3, [sp, #264]	; 0x108
 80042fe:	e071      	b.n	80043e4 <__ssvfiscanf_r+0x1dc>
 8004300:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004302:	fb02 1103 	mla	r1, r2, r3, r1
 8004306:	3930      	subs	r1, #48	; 0x30
 8004308:	9143      	str	r1, [sp, #268]	; 0x10c
 800430a:	4655      	mov	r5, sl
 800430c:	e7d3      	b.n	80042b6 <__ssvfiscanf_r+0xae>
 800430e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004312:	2a20      	cmp	r2, #32
 8004314:	d8ef      	bhi.n	80042f6 <__ssvfiscanf_r+0xee>
 8004316:	a101      	add	r1, pc, #4	; (adr r1, 800431c <__ssvfiscanf_r+0x114>)
 8004318:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800431c:	080043cf 	.word	0x080043cf
 8004320:	080042f7 	.word	0x080042f7
 8004324:	080042f7 	.word	0x080042f7
 8004328:	0800442d 	.word	0x0800442d
 800432c:	080042f7 	.word	0x080042f7
 8004330:	080042f7 	.word	0x080042f7
 8004334:	080042f7 	.word	0x080042f7
 8004338:	080042f7 	.word	0x080042f7
 800433c:	080042f7 	.word	0x080042f7
 8004340:	080042f7 	.word	0x080042f7
 8004344:	080042f7 	.word	0x080042f7
 8004348:	08004443 	.word	0x08004443
 800434c:	08004419 	.word	0x08004419
 8004350:	080043a7 	.word	0x080043a7
 8004354:	080043a7 	.word	0x080043a7
 8004358:	080043a7 	.word	0x080043a7
 800435c:	080042f7 	.word	0x080042f7
 8004360:	0800441d 	.word	0x0800441d
 8004364:	080042f7 	.word	0x080042f7
 8004368:	080042f7 	.word	0x080042f7
 800436c:	080042f7 	.word	0x080042f7
 8004370:	080042f7 	.word	0x080042f7
 8004374:	08004453 	.word	0x08004453
 8004378:	08004425 	.word	0x08004425
 800437c:	080043c7 	.word	0x080043c7
 8004380:	080042f7 	.word	0x080042f7
 8004384:	080042f7 	.word	0x080042f7
 8004388:	0800444f 	.word	0x0800444f
 800438c:	080042f7 	.word	0x080042f7
 8004390:	08004419 	.word	0x08004419
 8004394:	080042f7 	.word	0x080042f7
 8004398:	080042f7 	.word	0x080042f7
 800439c:	080043cf 	.word	0x080043cf
 80043a0:	3b45      	subs	r3, #69	; 0x45
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d8a7      	bhi.n	80042f6 <__ssvfiscanf_r+0xee>
 80043a6:	2305      	movs	r3, #5
 80043a8:	e01b      	b.n	80043e2 <__ssvfiscanf_r+0x1da>
 80043aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80043ac:	4621      	mov	r1, r4
 80043ae:	4630      	mov	r0, r6
 80043b0:	4798      	blx	r3
 80043b2:	2800      	cmp	r0, #0
 80043b4:	f43f af68 	beq.w	8004288 <__ssvfiscanf_r+0x80>
 80043b8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80043ba:	2800      	cmp	r0, #0
 80043bc:	f040 808d 	bne.w	80044da <__ssvfiscanf_r+0x2d2>
 80043c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043c4:	e08f      	b.n	80044e6 <__ssvfiscanf_r+0x2de>
 80043c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80043c8:	f042 0220 	orr.w	r2, r2, #32
 80043cc:	9241      	str	r2, [sp, #260]	; 0x104
 80043ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80043d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d4:	9241      	str	r2, [sp, #260]	; 0x104
 80043d6:	2210      	movs	r2, #16
 80043d8:	2b6f      	cmp	r3, #111	; 0x6f
 80043da:	9242      	str	r2, [sp, #264]	; 0x108
 80043dc:	bf34      	ite	cc
 80043de:	2303      	movcc	r3, #3
 80043e0:	2304      	movcs	r3, #4
 80043e2:	9347      	str	r3, [sp, #284]	; 0x11c
 80043e4:	6863      	ldr	r3, [r4, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	dd42      	ble.n	8004470 <__ssvfiscanf_r+0x268>
 80043ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80043ec:	0659      	lsls	r1, r3, #25
 80043ee:	d404      	bmi.n	80043fa <__ssvfiscanf_r+0x1f2>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	781a      	ldrb	r2, [r3, #0]
 80043f4:	5cba      	ldrb	r2, [r7, r2]
 80043f6:	0712      	lsls	r2, r2, #28
 80043f8:	d441      	bmi.n	800447e <__ssvfiscanf_r+0x276>
 80043fa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	dc50      	bgt.n	80044a2 <__ssvfiscanf_r+0x29a>
 8004400:	466b      	mov	r3, sp
 8004402:	4622      	mov	r2, r4
 8004404:	a941      	add	r1, sp, #260	; 0x104
 8004406:	4630      	mov	r0, r6
 8004408:	f000 fa0a 	bl	8004820 <_scanf_chars>
 800440c:	2801      	cmp	r0, #1
 800440e:	d06e      	beq.n	80044ee <__ssvfiscanf_r+0x2e6>
 8004410:	2802      	cmp	r0, #2
 8004412:	f47f af20 	bne.w	8004256 <__ssvfiscanf_r+0x4e>
 8004416:	e7cf      	b.n	80043b8 <__ssvfiscanf_r+0x1b0>
 8004418:	220a      	movs	r2, #10
 800441a:	e7dd      	b.n	80043d8 <__ssvfiscanf_r+0x1d0>
 800441c:	2300      	movs	r3, #0
 800441e:	9342      	str	r3, [sp, #264]	; 0x108
 8004420:	2303      	movs	r3, #3
 8004422:	e7de      	b.n	80043e2 <__ssvfiscanf_r+0x1da>
 8004424:	2308      	movs	r3, #8
 8004426:	9342      	str	r3, [sp, #264]	; 0x108
 8004428:	2304      	movs	r3, #4
 800442a:	e7da      	b.n	80043e2 <__ssvfiscanf_r+0x1da>
 800442c:	4629      	mov	r1, r5
 800442e:	4640      	mov	r0, r8
 8004430:	f000 fb48 	bl	8004ac4 <__sccl>
 8004434:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800443a:	9341      	str	r3, [sp, #260]	; 0x104
 800443c:	4605      	mov	r5, r0
 800443e:	2301      	movs	r3, #1
 8004440:	e7cf      	b.n	80043e2 <__ssvfiscanf_r+0x1da>
 8004442:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004448:	9341      	str	r3, [sp, #260]	; 0x104
 800444a:	2300      	movs	r3, #0
 800444c:	e7c9      	b.n	80043e2 <__ssvfiscanf_r+0x1da>
 800444e:	2302      	movs	r3, #2
 8004450:	e7c7      	b.n	80043e2 <__ssvfiscanf_r+0x1da>
 8004452:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004454:	06c3      	lsls	r3, r0, #27
 8004456:	f53f aefe 	bmi.w	8004256 <__ssvfiscanf_r+0x4e>
 800445a:	9b00      	ldr	r3, [sp, #0]
 800445c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800445e:	1d19      	adds	r1, r3, #4
 8004460:	9100      	str	r1, [sp, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f010 0f01 	tst.w	r0, #1
 8004468:	bf14      	ite	ne
 800446a:	801a      	strhne	r2, [r3, #0]
 800446c:	601a      	streq	r2, [r3, #0]
 800446e:	e6f2      	b.n	8004256 <__ssvfiscanf_r+0x4e>
 8004470:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004472:	4621      	mov	r1, r4
 8004474:	4630      	mov	r0, r6
 8004476:	4798      	blx	r3
 8004478:	2800      	cmp	r0, #0
 800447a:	d0b6      	beq.n	80043ea <__ssvfiscanf_r+0x1e2>
 800447c:	e79c      	b.n	80043b8 <__ssvfiscanf_r+0x1b0>
 800447e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004480:	3201      	adds	r2, #1
 8004482:	9245      	str	r2, [sp, #276]	; 0x114
 8004484:	6862      	ldr	r2, [r4, #4]
 8004486:	3a01      	subs	r2, #1
 8004488:	2a00      	cmp	r2, #0
 800448a:	6062      	str	r2, [r4, #4]
 800448c:	dd02      	ble.n	8004494 <__ssvfiscanf_r+0x28c>
 800448e:	3301      	adds	r3, #1
 8004490:	6023      	str	r3, [r4, #0]
 8004492:	e7ad      	b.n	80043f0 <__ssvfiscanf_r+0x1e8>
 8004494:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004496:	4621      	mov	r1, r4
 8004498:	4630      	mov	r0, r6
 800449a:	4798      	blx	r3
 800449c:	2800      	cmp	r0, #0
 800449e:	d0a7      	beq.n	80043f0 <__ssvfiscanf_r+0x1e8>
 80044a0:	e78a      	b.n	80043b8 <__ssvfiscanf_r+0x1b0>
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	dc0e      	bgt.n	80044c4 <__ssvfiscanf_r+0x2bc>
 80044a6:	466b      	mov	r3, sp
 80044a8:	4622      	mov	r2, r4
 80044aa:	a941      	add	r1, sp, #260	; 0x104
 80044ac:	4630      	mov	r0, r6
 80044ae:	f000 fa11 	bl	80048d4 <_scanf_i>
 80044b2:	e7ab      	b.n	800440c <__ssvfiscanf_r+0x204>
 80044b4:	08004155 	.word	0x08004155
 80044b8:	080041cf 	.word	0x080041cf
 80044bc:	0800514d 	.word	0x0800514d
 80044c0:	08005253 	.word	0x08005253
 80044c4:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <__ssvfiscanf_r+0x2ec>)
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f43f aec5 	beq.w	8004256 <__ssvfiscanf_r+0x4e>
 80044cc:	466b      	mov	r3, sp
 80044ce:	4622      	mov	r2, r4
 80044d0:	a941      	add	r1, sp, #260	; 0x104
 80044d2:	4630      	mov	r0, r6
 80044d4:	f3af 8000 	nop.w
 80044d8:	e798      	b.n	800440c <__ssvfiscanf_r+0x204>
 80044da:	89a3      	ldrh	r3, [r4, #12]
 80044dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80044e0:	bf18      	it	ne
 80044e2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80044e6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80044ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ee:	9844      	ldr	r0, [sp, #272]	; 0x110
 80044f0:	e7f9      	b.n	80044e6 <__ssvfiscanf_r+0x2de>
 80044f2:	bf00      	nop
 80044f4:	00000000 	.word	0x00000000

080044f8 <_printf_common>:
 80044f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044fc:	4616      	mov	r6, r2
 80044fe:	4699      	mov	r9, r3
 8004500:	688a      	ldr	r2, [r1, #8]
 8004502:	690b      	ldr	r3, [r1, #16]
 8004504:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004508:	4293      	cmp	r3, r2
 800450a:	bfb8      	it	lt
 800450c:	4613      	movlt	r3, r2
 800450e:	6033      	str	r3, [r6, #0]
 8004510:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004514:	4607      	mov	r7, r0
 8004516:	460c      	mov	r4, r1
 8004518:	b10a      	cbz	r2, 800451e <_printf_common+0x26>
 800451a:	3301      	adds	r3, #1
 800451c:	6033      	str	r3, [r6, #0]
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	0699      	lsls	r1, r3, #26
 8004522:	bf42      	ittt	mi
 8004524:	6833      	ldrmi	r3, [r6, #0]
 8004526:	3302      	addmi	r3, #2
 8004528:	6033      	strmi	r3, [r6, #0]
 800452a:	6825      	ldr	r5, [r4, #0]
 800452c:	f015 0506 	ands.w	r5, r5, #6
 8004530:	d106      	bne.n	8004540 <_printf_common+0x48>
 8004532:	f104 0a19 	add.w	sl, r4, #25
 8004536:	68e3      	ldr	r3, [r4, #12]
 8004538:	6832      	ldr	r2, [r6, #0]
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	42ab      	cmp	r3, r5
 800453e:	dc26      	bgt.n	800458e <_printf_common+0x96>
 8004540:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004544:	1e13      	subs	r3, r2, #0
 8004546:	6822      	ldr	r2, [r4, #0]
 8004548:	bf18      	it	ne
 800454a:	2301      	movne	r3, #1
 800454c:	0692      	lsls	r2, r2, #26
 800454e:	d42b      	bmi.n	80045a8 <_printf_common+0xb0>
 8004550:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004554:	4649      	mov	r1, r9
 8004556:	4638      	mov	r0, r7
 8004558:	47c0      	blx	r8
 800455a:	3001      	adds	r0, #1
 800455c:	d01e      	beq.n	800459c <_printf_common+0xa4>
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	68e5      	ldr	r5, [r4, #12]
 8004562:	6832      	ldr	r2, [r6, #0]
 8004564:	f003 0306 	and.w	r3, r3, #6
 8004568:	2b04      	cmp	r3, #4
 800456a:	bf08      	it	eq
 800456c:	1aad      	subeq	r5, r5, r2
 800456e:	68a3      	ldr	r3, [r4, #8]
 8004570:	6922      	ldr	r2, [r4, #16]
 8004572:	bf0c      	ite	eq
 8004574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004578:	2500      	movne	r5, #0
 800457a:	4293      	cmp	r3, r2
 800457c:	bfc4      	itt	gt
 800457e:	1a9b      	subgt	r3, r3, r2
 8004580:	18ed      	addgt	r5, r5, r3
 8004582:	2600      	movs	r6, #0
 8004584:	341a      	adds	r4, #26
 8004586:	42b5      	cmp	r5, r6
 8004588:	d11a      	bne.n	80045c0 <_printf_common+0xc8>
 800458a:	2000      	movs	r0, #0
 800458c:	e008      	b.n	80045a0 <_printf_common+0xa8>
 800458e:	2301      	movs	r3, #1
 8004590:	4652      	mov	r2, sl
 8004592:	4649      	mov	r1, r9
 8004594:	4638      	mov	r0, r7
 8004596:	47c0      	blx	r8
 8004598:	3001      	adds	r0, #1
 800459a:	d103      	bne.n	80045a4 <_printf_common+0xac>
 800459c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045a4:	3501      	adds	r5, #1
 80045a6:	e7c6      	b.n	8004536 <_printf_common+0x3e>
 80045a8:	18e1      	adds	r1, r4, r3
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	2030      	movs	r0, #48	; 0x30
 80045ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045b2:	4422      	add	r2, r4
 80045b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045bc:	3302      	adds	r3, #2
 80045be:	e7c7      	b.n	8004550 <_printf_common+0x58>
 80045c0:	2301      	movs	r3, #1
 80045c2:	4622      	mov	r2, r4
 80045c4:	4649      	mov	r1, r9
 80045c6:	4638      	mov	r0, r7
 80045c8:	47c0      	blx	r8
 80045ca:	3001      	adds	r0, #1
 80045cc:	d0e6      	beq.n	800459c <_printf_common+0xa4>
 80045ce:	3601      	adds	r6, #1
 80045d0:	e7d9      	b.n	8004586 <_printf_common+0x8e>
	...

080045d4 <_printf_i>:
 80045d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045d8:	7e0f      	ldrb	r7, [r1, #24]
 80045da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045dc:	2f78      	cmp	r7, #120	; 0x78
 80045de:	4691      	mov	r9, r2
 80045e0:	4680      	mov	r8, r0
 80045e2:	460c      	mov	r4, r1
 80045e4:	469a      	mov	sl, r3
 80045e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045ea:	d807      	bhi.n	80045fc <_printf_i+0x28>
 80045ec:	2f62      	cmp	r7, #98	; 0x62
 80045ee:	d80a      	bhi.n	8004606 <_printf_i+0x32>
 80045f0:	2f00      	cmp	r7, #0
 80045f2:	f000 80d8 	beq.w	80047a6 <_printf_i+0x1d2>
 80045f6:	2f58      	cmp	r7, #88	; 0x58
 80045f8:	f000 80a3 	beq.w	8004742 <_printf_i+0x16e>
 80045fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004600:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004604:	e03a      	b.n	800467c <_printf_i+0xa8>
 8004606:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800460a:	2b15      	cmp	r3, #21
 800460c:	d8f6      	bhi.n	80045fc <_printf_i+0x28>
 800460e:	a101      	add	r1, pc, #4	; (adr r1, 8004614 <_printf_i+0x40>)
 8004610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004614:	0800466d 	.word	0x0800466d
 8004618:	08004681 	.word	0x08004681
 800461c:	080045fd 	.word	0x080045fd
 8004620:	080045fd 	.word	0x080045fd
 8004624:	080045fd 	.word	0x080045fd
 8004628:	080045fd 	.word	0x080045fd
 800462c:	08004681 	.word	0x08004681
 8004630:	080045fd 	.word	0x080045fd
 8004634:	080045fd 	.word	0x080045fd
 8004638:	080045fd 	.word	0x080045fd
 800463c:	080045fd 	.word	0x080045fd
 8004640:	0800478d 	.word	0x0800478d
 8004644:	080046b1 	.word	0x080046b1
 8004648:	0800476f 	.word	0x0800476f
 800464c:	080045fd 	.word	0x080045fd
 8004650:	080045fd 	.word	0x080045fd
 8004654:	080047af 	.word	0x080047af
 8004658:	080045fd 	.word	0x080045fd
 800465c:	080046b1 	.word	0x080046b1
 8004660:	080045fd 	.word	0x080045fd
 8004664:	080045fd 	.word	0x080045fd
 8004668:	08004777 	.word	0x08004777
 800466c:	682b      	ldr	r3, [r5, #0]
 800466e:	1d1a      	adds	r2, r3, #4
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	602a      	str	r2, [r5, #0]
 8004674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800467c:	2301      	movs	r3, #1
 800467e:	e0a3      	b.n	80047c8 <_printf_i+0x1f4>
 8004680:	6820      	ldr	r0, [r4, #0]
 8004682:	6829      	ldr	r1, [r5, #0]
 8004684:	0606      	lsls	r6, r0, #24
 8004686:	f101 0304 	add.w	r3, r1, #4
 800468a:	d50a      	bpl.n	80046a2 <_printf_i+0xce>
 800468c:	680e      	ldr	r6, [r1, #0]
 800468e:	602b      	str	r3, [r5, #0]
 8004690:	2e00      	cmp	r6, #0
 8004692:	da03      	bge.n	800469c <_printf_i+0xc8>
 8004694:	232d      	movs	r3, #45	; 0x2d
 8004696:	4276      	negs	r6, r6
 8004698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800469c:	485e      	ldr	r0, [pc, #376]	; (8004818 <_printf_i+0x244>)
 800469e:	230a      	movs	r3, #10
 80046a0:	e019      	b.n	80046d6 <_printf_i+0x102>
 80046a2:	680e      	ldr	r6, [r1, #0]
 80046a4:	602b      	str	r3, [r5, #0]
 80046a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046aa:	bf18      	it	ne
 80046ac:	b236      	sxthne	r6, r6
 80046ae:	e7ef      	b.n	8004690 <_printf_i+0xbc>
 80046b0:	682b      	ldr	r3, [r5, #0]
 80046b2:	6820      	ldr	r0, [r4, #0]
 80046b4:	1d19      	adds	r1, r3, #4
 80046b6:	6029      	str	r1, [r5, #0]
 80046b8:	0601      	lsls	r1, r0, #24
 80046ba:	d501      	bpl.n	80046c0 <_printf_i+0xec>
 80046bc:	681e      	ldr	r6, [r3, #0]
 80046be:	e002      	b.n	80046c6 <_printf_i+0xf2>
 80046c0:	0646      	lsls	r6, r0, #25
 80046c2:	d5fb      	bpl.n	80046bc <_printf_i+0xe8>
 80046c4:	881e      	ldrh	r6, [r3, #0]
 80046c6:	4854      	ldr	r0, [pc, #336]	; (8004818 <_printf_i+0x244>)
 80046c8:	2f6f      	cmp	r7, #111	; 0x6f
 80046ca:	bf0c      	ite	eq
 80046cc:	2308      	moveq	r3, #8
 80046ce:	230a      	movne	r3, #10
 80046d0:	2100      	movs	r1, #0
 80046d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046d6:	6865      	ldr	r5, [r4, #4]
 80046d8:	60a5      	str	r5, [r4, #8]
 80046da:	2d00      	cmp	r5, #0
 80046dc:	bfa2      	ittt	ge
 80046de:	6821      	ldrge	r1, [r4, #0]
 80046e0:	f021 0104 	bicge.w	r1, r1, #4
 80046e4:	6021      	strge	r1, [r4, #0]
 80046e6:	b90e      	cbnz	r6, 80046ec <_printf_i+0x118>
 80046e8:	2d00      	cmp	r5, #0
 80046ea:	d04d      	beq.n	8004788 <_printf_i+0x1b4>
 80046ec:	4615      	mov	r5, r2
 80046ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80046f2:	fb03 6711 	mls	r7, r3, r1, r6
 80046f6:	5dc7      	ldrb	r7, [r0, r7]
 80046f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046fc:	4637      	mov	r7, r6
 80046fe:	42bb      	cmp	r3, r7
 8004700:	460e      	mov	r6, r1
 8004702:	d9f4      	bls.n	80046ee <_printf_i+0x11a>
 8004704:	2b08      	cmp	r3, #8
 8004706:	d10b      	bne.n	8004720 <_printf_i+0x14c>
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	07de      	lsls	r6, r3, #31
 800470c:	d508      	bpl.n	8004720 <_printf_i+0x14c>
 800470e:	6923      	ldr	r3, [r4, #16]
 8004710:	6861      	ldr	r1, [r4, #4]
 8004712:	4299      	cmp	r1, r3
 8004714:	bfde      	ittt	le
 8004716:	2330      	movle	r3, #48	; 0x30
 8004718:	f805 3c01 	strble.w	r3, [r5, #-1]
 800471c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004720:	1b52      	subs	r2, r2, r5
 8004722:	6122      	str	r2, [r4, #16]
 8004724:	f8cd a000 	str.w	sl, [sp]
 8004728:	464b      	mov	r3, r9
 800472a:	aa03      	add	r2, sp, #12
 800472c:	4621      	mov	r1, r4
 800472e:	4640      	mov	r0, r8
 8004730:	f7ff fee2 	bl	80044f8 <_printf_common>
 8004734:	3001      	adds	r0, #1
 8004736:	d14c      	bne.n	80047d2 <_printf_i+0x1fe>
 8004738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800473c:	b004      	add	sp, #16
 800473e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004742:	4835      	ldr	r0, [pc, #212]	; (8004818 <_printf_i+0x244>)
 8004744:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004748:	6829      	ldr	r1, [r5, #0]
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004750:	6029      	str	r1, [r5, #0]
 8004752:	061d      	lsls	r5, r3, #24
 8004754:	d514      	bpl.n	8004780 <_printf_i+0x1ac>
 8004756:	07df      	lsls	r7, r3, #31
 8004758:	bf44      	itt	mi
 800475a:	f043 0320 	orrmi.w	r3, r3, #32
 800475e:	6023      	strmi	r3, [r4, #0]
 8004760:	b91e      	cbnz	r6, 800476a <_printf_i+0x196>
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	f023 0320 	bic.w	r3, r3, #32
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	2310      	movs	r3, #16
 800476c:	e7b0      	b.n	80046d0 <_printf_i+0xfc>
 800476e:	6823      	ldr	r3, [r4, #0]
 8004770:	f043 0320 	orr.w	r3, r3, #32
 8004774:	6023      	str	r3, [r4, #0]
 8004776:	2378      	movs	r3, #120	; 0x78
 8004778:	4828      	ldr	r0, [pc, #160]	; (800481c <_printf_i+0x248>)
 800477a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800477e:	e7e3      	b.n	8004748 <_printf_i+0x174>
 8004780:	0659      	lsls	r1, r3, #25
 8004782:	bf48      	it	mi
 8004784:	b2b6      	uxthmi	r6, r6
 8004786:	e7e6      	b.n	8004756 <_printf_i+0x182>
 8004788:	4615      	mov	r5, r2
 800478a:	e7bb      	b.n	8004704 <_printf_i+0x130>
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	6826      	ldr	r6, [r4, #0]
 8004790:	6961      	ldr	r1, [r4, #20]
 8004792:	1d18      	adds	r0, r3, #4
 8004794:	6028      	str	r0, [r5, #0]
 8004796:	0635      	lsls	r5, r6, #24
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	d501      	bpl.n	80047a0 <_printf_i+0x1cc>
 800479c:	6019      	str	r1, [r3, #0]
 800479e:	e002      	b.n	80047a6 <_printf_i+0x1d2>
 80047a0:	0670      	lsls	r0, r6, #25
 80047a2:	d5fb      	bpl.n	800479c <_printf_i+0x1c8>
 80047a4:	8019      	strh	r1, [r3, #0]
 80047a6:	2300      	movs	r3, #0
 80047a8:	6123      	str	r3, [r4, #16]
 80047aa:	4615      	mov	r5, r2
 80047ac:	e7ba      	b.n	8004724 <_printf_i+0x150>
 80047ae:	682b      	ldr	r3, [r5, #0]
 80047b0:	1d1a      	adds	r2, r3, #4
 80047b2:	602a      	str	r2, [r5, #0]
 80047b4:	681d      	ldr	r5, [r3, #0]
 80047b6:	6862      	ldr	r2, [r4, #4]
 80047b8:	2100      	movs	r1, #0
 80047ba:	4628      	mov	r0, r5
 80047bc:	f7fb fd30 	bl	8000220 <memchr>
 80047c0:	b108      	cbz	r0, 80047c6 <_printf_i+0x1f2>
 80047c2:	1b40      	subs	r0, r0, r5
 80047c4:	6060      	str	r0, [r4, #4]
 80047c6:	6863      	ldr	r3, [r4, #4]
 80047c8:	6123      	str	r3, [r4, #16]
 80047ca:	2300      	movs	r3, #0
 80047cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047d0:	e7a8      	b.n	8004724 <_printf_i+0x150>
 80047d2:	6923      	ldr	r3, [r4, #16]
 80047d4:	462a      	mov	r2, r5
 80047d6:	4649      	mov	r1, r9
 80047d8:	4640      	mov	r0, r8
 80047da:	47d0      	blx	sl
 80047dc:	3001      	adds	r0, #1
 80047de:	d0ab      	beq.n	8004738 <_printf_i+0x164>
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	079b      	lsls	r3, r3, #30
 80047e4:	d413      	bmi.n	800480e <_printf_i+0x23a>
 80047e6:	68e0      	ldr	r0, [r4, #12]
 80047e8:	9b03      	ldr	r3, [sp, #12]
 80047ea:	4298      	cmp	r0, r3
 80047ec:	bfb8      	it	lt
 80047ee:	4618      	movlt	r0, r3
 80047f0:	e7a4      	b.n	800473c <_printf_i+0x168>
 80047f2:	2301      	movs	r3, #1
 80047f4:	4632      	mov	r2, r6
 80047f6:	4649      	mov	r1, r9
 80047f8:	4640      	mov	r0, r8
 80047fa:	47d0      	blx	sl
 80047fc:	3001      	adds	r0, #1
 80047fe:	d09b      	beq.n	8004738 <_printf_i+0x164>
 8004800:	3501      	adds	r5, #1
 8004802:	68e3      	ldr	r3, [r4, #12]
 8004804:	9903      	ldr	r1, [sp, #12]
 8004806:	1a5b      	subs	r3, r3, r1
 8004808:	42ab      	cmp	r3, r5
 800480a:	dcf2      	bgt.n	80047f2 <_printf_i+0x21e>
 800480c:	e7eb      	b.n	80047e6 <_printf_i+0x212>
 800480e:	2500      	movs	r5, #0
 8004810:	f104 0619 	add.w	r6, r4, #25
 8004814:	e7f5      	b.n	8004802 <_printf_i+0x22e>
 8004816:	bf00      	nop
 8004818:	0800525e 	.word	0x0800525e
 800481c:	0800526f 	.word	0x0800526f

08004820 <_scanf_chars>:
 8004820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004824:	4615      	mov	r5, r2
 8004826:	688a      	ldr	r2, [r1, #8]
 8004828:	4680      	mov	r8, r0
 800482a:	460c      	mov	r4, r1
 800482c:	b932      	cbnz	r2, 800483c <_scanf_chars+0x1c>
 800482e:	698a      	ldr	r2, [r1, #24]
 8004830:	2a00      	cmp	r2, #0
 8004832:	bf0c      	ite	eq
 8004834:	2201      	moveq	r2, #1
 8004836:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800483a:	608a      	str	r2, [r1, #8]
 800483c:	6822      	ldr	r2, [r4, #0]
 800483e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80048d0 <_scanf_chars+0xb0>
 8004842:	06d1      	lsls	r1, r2, #27
 8004844:	bf5f      	itttt	pl
 8004846:	681a      	ldrpl	r2, [r3, #0]
 8004848:	1d11      	addpl	r1, r2, #4
 800484a:	6019      	strpl	r1, [r3, #0]
 800484c:	6816      	ldrpl	r6, [r2, #0]
 800484e:	2700      	movs	r7, #0
 8004850:	69a0      	ldr	r0, [r4, #24]
 8004852:	b188      	cbz	r0, 8004878 <_scanf_chars+0x58>
 8004854:	2801      	cmp	r0, #1
 8004856:	d107      	bne.n	8004868 <_scanf_chars+0x48>
 8004858:	682a      	ldr	r2, [r5, #0]
 800485a:	7811      	ldrb	r1, [r2, #0]
 800485c:	6962      	ldr	r2, [r4, #20]
 800485e:	5c52      	ldrb	r2, [r2, r1]
 8004860:	b952      	cbnz	r2, 8004878 <_scanf_chars+0x58>
 8004862:	2f00      	cmp	r7, #0
 8004864:	d031      	beq.n	80048ca <_scanf_chars+0xaa>
 8004866:	e022      	b.n	80048ae <_scanf_chars+0x8e>
 8004868:	2802      	cmp	r0, #2
 800486a:	d120      	bne.n	80048ae <_scanf_chars+0x8e>
 800486c:	682b      	ldr	r3, [r5, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	f813 3009 	ldrb.w	r3, [r3, r9]
 8004874:	071b      	lsls	r3, r3, #28
 8004876:	d41a      	bmi.n	80048ae <_scanf_chars+0x8e>
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	06da      	lsls	r2, r3, #27
 800487c:	bf5e      	ittt	pl
 800487e:	682b      	ldrpl	r3, [r5, #0]
 8004880:	781b      	ldrbpl	r3, [r3, #0]
 8004882:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004886:	682a      	ldr	r2, [r5, #0]
 8004888:	686b      	ldr	r3, [r5, #4]
 800488a:	3201      	adds	r2, #1
 800488c:	602a      	str	r2, [r5, #0]
 800488e:	68a2      	ldr	r2, [r4, #8]
 8004890:	3b01      	subs	r3, #1
 8004892:	3a01      	subs	r2, #1
 8004894:	606b      	str	r3, [r5, #4]
 8004896:	3701      	adds	r7, #1
 8004898:	60a2      	str	r2, [r4, #8]
 800489a:	b142      	cbz	r2, 80048ae <_scanf_chars+0x8e>
 800489c:	2b00      	cmp	r3, #0
 800489e:	dcd7      	bgt.n	8004850 <_scanf_chars+0x30>
 80048a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80048a4:	4629      	mov	r1, r5
 80048a6:	4640      	mov	r0, r8
 80048a8:	4798      	blx	r3
 80048aa:	2800      	cmp	r0, #0
 80048ac:	d0d0      	beq.n	8004850 <_scanf_chars+0x30>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	f013 0310 	ands.w	r3, r3, #16
 80048b4:	d105      	bne.n	80048c2 <_scanf_chars+0xa2>
 80048b6:	68e2      	ldr	r2, [r4, #12]
 80048b8:	3201      	adds	r2, #1
 80048ba:	60e2      	str	r2, [r4, #12]
 80048bc:	69a2      	ldr	r2, [r4, #24]
 80048be:	b102      	cbz	r2, 80048c2 <_scanf_chars+0xa2>
 80048c0:	7033      	strb	r3, [r6, #0]
 80048c2:	6923      	ldr	r3, [r4, #16]
 80048c4:	443b      	add	r3, r7
 80048c6:	6123      	str	r3, [r4, #16]
 80048c8:	2000      	movs	r0, #0
 80048ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048ce:	bf00      	nop
 80048d0:	0800514d 	.word	0x0800514d

080048d4 <_scanf_i>:
 80048d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d8:	4698      	mov	r8, r3
 80048da:	4b76      	ldr	r3, [pc, #472]	; (8004ab4 <_scanf_i+0x1e0>)
 80048dc:	460c      	mov	r4, r1
 80048de:	4682      	mov	sl, r0
 80048e0:	4616      	mov	r6, r2
 80048e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80048e6:	b087      	sub	sp, #28
 80048e8:	ab03      	add	r3, sp, #12
 80048ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80048ee:	4b72      	ldr	r3, [pc, #456]	; (8004ab8 <_scanf_i+0x1e4>)
 80048f0:	69a1      	ldr	r1, [r4, #24]
 80048f2:	4a72      	ldr	r2, [pc, #456]	; (8004abc <_scanf_i+0x1e8>)
 80048f4:	2903      	cmp	r1, #3
 80048f6:	bf18      	it	ne
 80048f8:	461a      	movne	r2, r3
 80048fa:	68a3      	ldr	r3, [r4, #8]
 80048fc:	9201      	str	r2, [sp, #4]
 80048fe:	1e5a      	subs	r2, r3, #1
 8004900:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004904:	bf88      	it	hi
 8004906:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800490a:	4627      	mov	r7, r4
 800490c:	bf82      	ittt	hi
 800490e:	eb03 0905 	addhi.w	r9, r3, r5
 8004912:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004916:	60a3      	strhi	r3, [r4, #8]
 8004918:	f857 3b1c 	ldr.w	r3, [r7], #28
 800491c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004920:	bf98      	it	ls
 8004922:	f04f 0900 	movls.w	r9, #0
 8004926:	6023      	str	r3, [r4, #0]
 8004928:	463d      	mov	r5, r7
 800492a:	f04f 0b00 	mov.w	fp, #0
 800492e:	6831      	ldr	r1, [r6, #0]
 8004930:	ab03      	add	r3, sp, #12
 8004932:	7809      	ldrb	r1, [r1, #0]
 8004934:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004938:	2202      	movs	r2, #2
 800493a:	f7fb fc71 	bl	8000220 <memchr>
 800493e:	b328      	cbz	r0, 800498c <_scanf_i+0xb8>
 8004940:	f1bb 0f01 	cmp.w	fp, #1
 8004944:	d159      	bne.n	80049fa <_scanf_i+0x126>
 8004946:	6862      	ldr	r2, [r4, #4]
 8004948:	b92a      	cbnz	r2, 8004956 <_scanf_i+0x82>
 800494a:	6822      	ldr	r2, [r4, #0]
 800494c:	2308      	movs	r3, #8
 800494e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004952:	6063      	str	r3, [r4, #4]
 8004954:	6022      	str	r2, [r4, #0]
 8004956:	6822      	ldr	r2, [r4, #0]
 8004958:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800495c:	6022      	str	r2, [r4, #0]
 800495e:	68a2      	ldr	r2, [r4, #8]
 8004960:	1e51      	subs	r1, r2, #1
 8004962:	60a1      	str	r1, [r4, #8]
 8004964:	b192      	cbz	r2, 800498c <_scanf_i+0xb8>
 8004966:	6832      	ldr	r2, [r6, #0]
 8004968:	1c51      	adds	r1, r2, #1
 800496a:	6031      	str	r1, [r6, #0]
 800496c:	7812      	ldrb	r2, [r2, #0]
 800496e:	f805 2b01 	strb.w	r2, [r5], #1
 8004972:	6872      	ldr	r2, [r6, #4]
 8004974:	3a01      	subs	r2, #1
 8004976:	2a00      	cmp	r2, #0
 8004978:	6072      	str	r2, [r6, #4]
 800497a:	dc07      	bgt.n	800498c <_scanf_i+0xb8>
 800497c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004980:	4631      	mov	r1, r6
 8004982:	4650      	mov	r0, sl
 8004984:	4790      	blx	r2
 8004986:	2800      	cmp	r0, #0
 8004988:	f040 8085 	bne.w	8004a96 <_scanf_i+0x1c2>
 800498c:	f10b 0b01 	add.w	fp, fp, #1
 8004990:	f1bb 0f03 	cmp.w	fp, #3
 8004994:	d1cb      	bne.n	800492e <_scanf_i+0x5a>
 8004996:	6863      	ldr	r3, [r4, #4]
 8004998:	b90b      	cbnz	r3, 800499e <_scanf_i+0xca>
 800499a:	230a      	movs	r3, #10
 800499c:	6063      	str	r3, [r4, #4]
 800499e:	6863      	ldr	r3, [r4, #4]
 80049a0:	4947      	ldr	r1, [pc, #284]	; (8004ac0 <_scanf_i+0x1ec>)
 80049a2:	6960      	ldr	r0, [r4, #20]
 80049a4:	1ac9      	subs	r1, r1, r3
 80049a6:	f000 f88d 	bl	8004ac4 <__sccl>
 80049aa:	f04f 0b00 	mov.w	fp, #0
 80049ae:	68a3      	ldr	r3, [r4, #8]
 80049b0:	6822      	ldr	r2, [r4, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d03d      	beq.n	8004a32 <_scanf_i+0x15e>
 80049b6:	6831      	ldr	r1, [r6, #0]
 80049b8:	6960      	ldr	r0, [r4, #20]
 80049ba:	f891 c000 	ldrb.w	ip, [r1]
 80049be:	f810 000c 	ldrb.w	r0, [r0, ip]
 80049c2:	2800      	cmp	r0, #0
 80049c4:	d035      	beq.n	8004a32 <_scanf_i+0x15e>
 80049c6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80049ca:	d124      	bne.n	8004a16 <_scanf_i+0x142>
 80049cc:	0510      	lsls	r0, r2, #20
 80049ce:	d522      	bpl.n	8004a16 <_scanf_i+0x142>
 80049d0:	f10b 0b01 	add.w	fp, fp, #1
 80049d4:	f1b9 0f00 	cmp.w	r9, #0
 80049d8:	d003      	beq.n	80049e2 <_scanf_i+0x10e>
 80049da:	3301      	adds	r3, #1
 80049dc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80049e0:	60a3      	str	r3, [r4, #8]
 80049e2:	6873      	ldr	r3, [r6, #4]
 80049e4:	3b01      	subs	r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	6073      	str	r3, [r6, #4]
 80049ea:	dd1b      	ble.n	8004a24 <_scanf_i+0x150>
 80049ec:	6833      	ldr	r3, [r6, #0]
 80049ee:	3301      	adds	r3, #1
 80049f0:	6033      	str	r3, [r6, #0]
 80049f2:	68a3      	ldr	r3, [r4, #8]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	60a3      	str	r3, [r4, #8]
 80049f8:	e7d9      	b.n	80049ae <_scanf_i+0xda>
 80049fa:	f1bb 0f02 	cmp.w	fp, #2
 80049fe:	d1ae      	bne.n	800495e <_scanf_i+0x8a>
 8004a00:	6822      	ldr	r2, [r4, #0]
 8004a02:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004a06:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004a0a:	d1bf      	bne.n	800498c <_scanf_i+0xb8>
 8004a0c:	2310      	movs	r3, #16
 8004a0e:	6063      	str	r3, [r4, #4]
 8004a10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a14:	e7a2      	b.n	800495c <_scanf_i+0x88>
 8004a16:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004a1a:	6022      	str	r2, [r4, #0]
 8004a1c:	780b      	ldrb	r3, [r1, #0]
 8004a1e:	f805 3b01 	strb.w	r3, [r5], #1
 8004a22:	e7de      	b.n	80049e2 <_scanf_i+0x10e>
 8004a24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004a28:	4631      	mov	r1, r6
 8004a2a:	4650      	mov	r0, sl
 8004a2c:	4798      	blx	r3
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	d0df      	beq.n	80049f2 <_scanf_i+0x11e>
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	05db      	lsls	r3, r3, #23
 8004a36:	d50d      	bpl.n	8004a54 <_scanf_i+0x180>
 8004a38:	42bd      	cmp	r5, r7
 8004a3a:	d909      	bls.n	8004a50 <_scanf_i+0x17c>
 8004a3c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004a40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a44:	4632      	mov	r2, r6
 8004a46:	4650      	mov	r0, sl
 8004a48:	4798      	blx	r3
 8004a4a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8004a4e:	464d      	mov	r5, r9
 8004a50:	42bd      	cmp	r5, r7
 8004a52:	d02d      	beq.n	8004ab0 <_scanf_i+0x1dc>
 8004a54:	6822      	ldr	r2, [r4, #0]
 8004a56:	f012 0210 	ands.w	r2, r2, #16
 8004a5a:	d113      	bne.n	8004a84 <_scanf_i+0x1b0>
 8004a5c:	702a      	strb	r2, [r5, #0]
 8004a5e:	6863      	ldr	r3, [r4, #4]
 8004a60:	9e01      	ldr	r6, [sp, #4]
 8004a62:	4639      	mov	r1, r7
 8004a64:	4650      	mov	r0, sl
 8004a66:	47b0      	blx	r6
 8004a68:	6821      	ldr	r1, [r4, #0]
 8004a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a6e:	f011 0f20 	tst.w	r1, #32
 8004a72:	d013      	beq.n	8004a9c <_scanf_i+0x1c8>
 8004a74:	1d1a      	adds	r2, r3, #4
 8004a76:	f8c8 2000 	str.w	r2, [r8]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6018      	str	r0, [r3, #0]
 8004a7e:	68e3      	ldr	r3, [r4, #12]
 8004a80:	3301      	adds	r3, #1
 8004a82:	60e3      	str	r3, [r4, #12]
 8004a84:	1bed      	subs	r5, r5, r7
 8004a86:	44ab      	add	fp, r5
 8004a88:	6925      	ldr	r5, [r4, #16]
 8004a8a:	445d      	add	r5, fp
 8004a8c:	6125      	str	r5, [r4, #16]
 8004a8e:	2000      	movs	r0, #0
 8004a90:	b007      	add	sp, #28
 8004a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a96:	f04f 0b00 	mov.w	fp, #0
 8004a9a:	e7ca      	b.n	8004a32 <_scanf_i+0x15e>
 8004a9c:	1d1a      	adds	r2, r3, #4
 8004a9e:	f8c8 2000 	str.w	r2, [r8]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f011 0f01 	tst.w	r1, #1
 8004aa8:	bf14      	ite	ne
 8004aaa:	8018      	strhne	r0, [r3, #0]
 8004aac:	6018      	streq	r0, [r3, #0]
 8004aae:	e7e6      	b.n	8004a7e <_scanf_i+0x1aa>
 8004ab0:	2001      	movs	r0, #1
 8004ab2:	e7ed      	b.n	8004a90 <_scanf_i+0x1bc>
 8004ab4:	08005128 	.word	0x08005128
 8004ab8:	08004c19 	.word	0x08004c19
 8004abc:	08003e85 	.word	0x08003e85
 8004ac0:	08005299 	.word	0x08005299

08004ac4 <__sccl>:
 8004ac4:	b570      	push	{r4, r5, r6, lr}
 8004ac6:	780b      	ldrb	r3, [r1, #0]
 8004ac8:	4604      	mov	r4, r0
 8004aca:	2b5e      	cmp	r3, #94	; 0x5e
 8004acc:	bf0b      	itete	eq
 8004ace:	784b      	ldrbeq	r3, [r1, #1]
 8004ad0:	1c48      	addne	r0, r1, #1
 8004ad2:	1c88      	addeq	r0, r1, #2
 8004ad4:	2200      	movne	r2, #0
 8004ad6:	bf08      	it	eq
 8004ad8:	2201      	moveq	r2, #1
 8004ada:	1e61      	subs	r1, r4, #1
 8004adc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004ae0:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004ae4:	42a9      	cmp	r1, r5
 8004ae6:	d1fb      	bne.n	8004ae0 <__sccl+0x1c>
 8004ae8:	b90b      	cbnz	r3, 8004aee <__sccl+0x2a>
 8004aea:	3801      	subs	r0, #1
 8004aec:	bd70      	pop	{r4, r5, r6, pc}
 8004aee:	f082 0201 	eor.w	r2, r2, #1
 8004af2:	54e2      	strb	r2, [r4, r3]
 8004af4:	4605      	mov	r5, r0
 8004af6:	4628      	mov	r0, r5
 8004af8:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004afc:	292d      	cmp	r1, #45	; 0x2d
 8004afe:	d006      	beq.n	8004b0e <__sccl+0x4a>
 8004b00:	295d      	cmp	r1, #93	; 0x5d
 8004b02:	d0f3      	beq.n	8004aec <__sccl+0x28>
 8004b04:	b909      	cbnz	r1, 8004b0a <__sccl+0x46>
 8004b06:	4628      	mov	r0, r5
 8004b08:	e7f0      	b.n	8004aec <__sccl+0x28>
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	e7f1      	b.n	8004af2 <__sccl+0x2e>
 8004b0e:	786e      	ldrb	r6, [r5, #1]
 8004b10:	2e5d      	cmp	r6, #93	; 0x5d
 8004b12:	d0fa      	beq.n	8004b0a <__sccl+0x46>
 8004b14:	42b3      	cmp	r3, r6
 8004b16:	dcf8      	bgt.n	8004b0a <__sccl+0x46>
 8004b18:	3502      	adds	r5, #2
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	3101      	adds	r1, #1
 8004b1e:	428e      	cmp	r6, r1
 8004b20:	5462      	strb	r2, [r4, r1]
 8004b22:	dcfb      	bgt.n	8004b1c <__sccl+0x58>
 8004b24:	1af1      	subs	r1, r6, r3
 8004b26:	3901      	subs	r1, #1
 8004b28:	1c58      	adds	r0, r3, #1
 8004b2a:	42b3      	cmp	r3, r6
 8004b2c:	bfa8      	it	ge
 8004b2e:	2100      	movge	r1, #0
 8004b30:	1843      	adds	r3, r0, r1
 8004b32:	e7e0      	b.n	8004af6 <__sccl+0x32>

08004b34 <_strtoul_l.constprop.0>:
 8004b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b38:	4f36      	ldr	r7, [pc, #216]	; (8004c14 <_strtoul_l.constprop.0+0xe0>)
 8004b3a:	4686      	mov	lr, r0
 8004b3c:	460d      	mov	r5, r1
 8004b3e:	4628      	mov	r0, r5
 8004b40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b44:	5de6      	ldrb	r6, [r4, r7]
 8004b46:	f016 0608 	ands.w	r6, r6, #8
 8004b4a:	d1f8      	bne.n	8004b3e <_strtoul_l.constprop.0+0xa>
 8004b4c:	2c2d      	cmp	r4, #45	; 0x2d
 8004b4e:	d12f      	bne.n	8004bb0 <_strtoul_l.constprop.0+0x7c>
 8004b50:	782c      	ldrb	r4, [r5, #0]
 8004b52:	2601      	movs	r6, #1
 8004b54:	1c85      	adds	r5, r0, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d057      	beq.n	8004c0a <_strtoul_l.constprop.0+0xd6>
 8004b5a:	2b10      	cmp	r3, #16
 8004b5c:	d109      	bne.n	8004b72 <_strtoul_l.constprop.0+0x3e>
 8004b5e:	2c30      	cmp	r4, #48	; 0x30
 8004b60:	d107      	bne.n	8004b72 <_strtoul_l.constprop.0+0x3e>
 8004b62:	7828      	ldrb	r0, [r5, #0]
 8004b64:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004b68:	2858      	cmp	r0, #88	; 0x58
 8004b6a:	d149      	bne.n	8004c00 <_strtoul_l.constprop.0+0xcc>
 8004b6c:	786c      	ldrb	r4, [r5, #1]
 8004b6e:	2310      	movs	r3, #16
 8004b70:	3502      	adds	r5, #2
 8004b72:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004b76:	2700      	movs	r7, #0
 8004b78:	fbb8 f8f3 	udiv	r8, r8, r3
 8004b7c:	fb03 f908 	mul.w	r9, r3, r8
 8004b80:	ea6f 0909 	mvn.w	r9, r9
 8004b84:	4638      	mov	r0, r7
 8004b86:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004b8a:	f1bc 0f09 	cmp.w	ip, #9
 8004b8e:	d814      	bhi.n	8004bba <_strtoul_l.constprop.0+0x86>
 8004b90:	4664      	mov	r4, ip
 8004b92:	42a3      	cmp	r3, r4
 8004b94:	dd22      	ble.n	8004bdc <_strtoul_l.constprop.0+0xa8>
 8004b96:	2f00      	cmp	r7, #0
 8004b98:	db1d      	blt.n	8004bd6 <_strtoul_l.constprop.0+0xa2>
 8004b9a:	4580      	cmp	r8, r0
 8004b9c:	d31b      	bcc.n	8004bd6 <_strtoul_l.constprop.0+0xa2>
 8004b9e:	d101      	bne.n	8004ba4 <_strtoul_l.constprop.0+0x70>
 8004ba0:	45a1      	cmp	r9, r4
 8004ba2:	db18      	blt.n	8004bd6 <_strtoul_l.constprop.0+0xa2>
 8004ba4:	fb00 4003 	mla	r0, r0, r3, r4
 8004ba8:	2701      	movs	r7, #1
 8004baa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004bae:	e7ea      	b.n	8004b86 <_strtoul_l.constprop.0+0x52>
 8004bb0:	2c2b      	cmp	r4, #43	; 0x2b
 8004bb2:	bf04      	itt	eq
 8004bb4:	782c      	ldrbeq	r4, [r5, #0]
 8004bb6:	1c85      	addeq	r5, r0, #2
 8004bb8:	e7cd      	b.n	8004b56 <_strtoul_l.constprop.0+0x22>
 8004bba:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004bbe:	f1bc 0f19 	cmp.w	ip, #25
 8004bc2:	d801      	bhi.n	8004bc8 <_strtoul_l.constprop.0+0x94>
 8004bc4:	3c37      	subs	r4, #55	; 0x37
 8004bc6:	e7e4      	b.n	8004b92 <_strtoul_l.constprop.0+0x5e>
 8004bc8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004bcc:	f1bc 0f19 	cmp.w	ip, #25
 8004bd0:	d804      	bhi.n	8004bdc <_strtoul_l.constprop.0+0xa8>
 8004bd2:	3c57      	subs	r4, #87	; 0x57
 8004bd4:	e7dd      	b.n	8004b92 <_strtoul_l.constprop.0+0x5e>
 8004bd6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004bda:	e7e6      	b.n	8004baa <_strtoul_l.constprop.0+0x76>
 8004bdc:	2f00      	cmp	r7, #0
 8004bde:	da07      	bge.n	8004bf0 <_strtoul_l.constprop.0+0xbc>
 8004be0:	2322      	movs	r3, #34	; 0x22
 8004be2:	f8ce 3000 	str.w	r3, [lr]
 8004be6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bea:	b932      	cbnz	r2, 8004bfa <_strtoul_l.constprop.0+0xc6>
 8004bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bf0:	b106      	cbz	r6, 8004bf4 <_strtoul_l.constprop.0+0xc0>
 8004bf2:	4240      	negs	r0, r0
 8004bf4:	2a00      	cmp	r2, #0
 8004bf6:	d0f9      	beq.n	8004bec <_strtoul_l.constprop.0+0xb8>
 8004bf8:	b107      	cbz	r7, 8004bfc <_strtoul_l.constprop.0+0xc8>
 8004bfa:	1e69      	subs	r1, r5, #1
 8004bfc:	6011      	str	r1, [r2, #0]
 8004bfe:	e7f5      	b.n	8004bec <_strtoul_l.constprop.0+0xb8>
 8004c00:	2430      	movs	r4, #48	; 0x30
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1b5      	bne.n	8004b72 <_strtoul_l.constprop.0+0x3e>
 8004c06:	2308      	movs	r3, #8
 8004c08:	e7b3      	b.n	8004b72 <_strtoul_l.constprop.0+0x3e>
 8004c0a:	2c30      	cmp	r4, #48	; 0x30
 8004c0c:	d0a9      	beq.n	8004b62 <_strtoul_l.constprop.0+0x2e>
 8004c0e:	230a      	movs	r3, #10
 8004c10:	e7af      	b.n	8004b72 <_strtoul_l.constprop.0+0x3e>
 8004c12:	bf00      	nop
 8004c14:	0800514d 	.word	0x0800514d

08004c18 <_strtoul_r>:
 8004c18:	f7ff bf8c 	b.w	8004b34 <_strtoul_l.constprop.0>

08004c1c <__submore>:
 8004c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c20:	460c      	mov	r4, r1
 8004c22:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004c24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c28:	4299      	cmp	r1, r3
 8004c2a:	d11d      	bne.n	8004c68 <__submore+0x4c>
 8004c2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c30:	f000 f8c4 	bl	8004dbc <_malloc_r>
 8004c34:	b918      	cbnz	r0, 8004c3e <__submore+0x22>
 8004c36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c42:	63a3      	str	r3, [r4, #56]	; 0x38
 8004c44:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004c48:	6360      	str	r0, [r4, #52]	; 0x34
 8004c4a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004c4e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004c52:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004c56:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004c5a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004c5e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004c62:	6020      	str	r0, [r4, #0]
 8004c64:	2000      	movs	r0, #0
 8004c66:	e7e8      	b.n	8004c3a <__submore+0x1e>
 8004c68:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004c6a:	0077      	lsls	r7, r6, #1
 8004c6c:	463a      	mov	r2, r7
 8004c6e:	f000 f919 	bl	8004ea4 <_realloc_r>
 8004c72:	4605      	mov	r5, r0
 8004c74:	2800      	cmp	r0, #0
 8004c76:	d0de      	beq.n	8004c36 <__submore+0x1a>
 8004c78:	eb00 0806 	add.w	r8, r0, r6
 8004c7c:	4601      	mov	r1, r0
 8004c7e:	4632      	mov	r2, r6
 8004c80:	4640      	mov	r0, r8
 8004c82:	f000 f807 	bl	8004c94 <memcpy>
 8004c86:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004c8a:	f8c4 8000 	str.w	r8, [r4]
 8004c8e:	e7e9      	b.n	8004c64 <__submore+0x48>

08004c90 <__retarget_lock_acquire_recursive>:
 8004c90:	4770      	bx	lr

08004c92 <__retarget_lock_release_recursive>:
 8004c92:	4770      	bx	lr

08004c94 <memcpy>:
 8004c94:	440a      	add	r2, r1
 8004c96:	4291      	cmp	r1, r2
 8004c98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004c9c:	d100      	bne.n	8004ca0 <memcpy+0xc>
 8004c9e:	4770      	bx	lr
 8004ca0:	b510      	push	{r4, lr}
 8004ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ca6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004caa:	4291      	cmp	r1, r2
 8004cac:	d1f9      	bne.n	8004ca2 <memcpy+0xe>
 8004cae:	bd10      	pop	{r4, pc}

08004cb0 <memmove>:
 8004cb0:	4288      	cmp	r0, r1
 8004cb2:	b510      	push	{r4, lr}
 8004cb4:	eb01 0402 	add.w	r4, r1, r2
 8004cb8:	d902      	bls.n	8004cc0 <memmove+0x10>
 8004cba:	4284      	cmp	r4, r0
 8004cbc:	4623      	mov	r3, r4
 8004cbe:	d807      	bhi.n	8004cd0 <memmove+0x20>
 8004cc0:	1e43      	subs	r3, r0, #1
 8004cc2:	42a1      	cmp	r1, r4
 8004cc4:	d008      	beq.n	8004cd8 <memmove+0x28>
 8004cc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cce:	e7f8      	b.n	8004cc2 <memmove+0x12>
 8004cd0:	4402      	add	r2, r0
 8004cd2:	4601      	mov	r1, r0
 8004cd4:	428a      	cmp	r2, r1
 8004cd6:	d100      	bne.n	8004cda <memmove+0x2a>
 8004cd8:	bd10      	pop	{r4, pc}
 8004cda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ce2:	e7f7      	b.n	8004cd4 <memmove+0x24>

08004ce4 <_free_r>:
 8004ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ce6:	2900      	cmp	r1, #0
 8004ce8:	d044      	beq.n	8004d74 <_free_r+0x90>
 8004cea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cee:	9001      	str	r0, [sp, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f1a1 0404 	sub.w	r4, r1, #4
 8004cf6:	bfb8      	it	lt
 8004cf8:	18e4      	addlt	r4, r4, r3
 8004cfa:	f000 f913 	bl	8004f24 <__malloc_lock>
 8004cfe:	4a1e      	ldr	r2, [pc, #120]	; (8004d78 <_free_r+0x94>)
 8004d00:	9801      	ldr	r0, [sp, #4]
 8004d02:	6813      	ldr	r3, [r2, #0]
 8004d04:	b933      	cbnz	r3, 8004d14 <_free_r+0x30>
 8004d06:	6063      	str	r3, [r4, #4]
 8004d08:	6014      	str	r4, [r2, #0]
 8004d0a:	b003      	add	sp, #12
 8004d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d10:	f000 b90e 	b.w	8004f30 <__malloc_unlock>
 8004d14:	42a3      	cmp	r3, r4
 8004d16:	d908      	bls.n	8004d2a <_free_r+0x46>
 8004d18:	6825      	ldr	r5, [r4, #0]
 8004d1a:	1961      	adds	r1, r4, r5
 8004d1c:	428b      	cmp	r3, r1
 8004d1e:	bf01      	itttt	eq
 8004d20:	6819      	ldreq	r1, [r3, #0]
 8004d22:	685b      	ldreq	r3, [r3, #4]
 8004d24:	1949      	addeq	r1, r1, r5
 8004d26:	6021      	streq	r1, [r4, #0]
 8004d28:	e7ed      	b.n	8004d06 <_free_r+0x22>
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	b10b      	cbz	r3, 8004d34 <_free_r+0x50>
 8004d30:	42a3      	cmp	r3, r4
 8004d32:	d9fa      	bls.n	8004d2a <_free_r+0x46>
 8004d34:	6811      	ldr	r1, [r2, #0]
 8004d36:	1855      	adds	r5, r2, r1
 8004d38:	42a5      	cmp	r5, r4
 8004d3a:	d10b      	bne.n	8004d54 <_free_r+0x70>
 8004d3c:	6824      	ldr	r4, [r4, #0]
 8004d3e:	4421      	add	r1, r4
 8004d40:	1854      	adds	r4, r2, r1
 8004d42:	42a3      	cmp	r3, r4
 8004d44:	6011      	str	r1, [r2, #0]
 8004d46:	d1e0      	bne.n	8004d0a <_free_r+0x26>
 8004d48:	681c      	ldr	r4, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	6053      	str	r3, [r2, #4]
 8004d4e:	4421      	add	r1, r4
 8004d50:	6011      	str	r1, [r2, #0]
 8004d52:	e7da      	b.n	8004d0a <_free_r+0x26>
 8004d54:	d902      	bls.n	8004d5c <_free_r+0x78>
 8004d56:	230c      	movs	r3, #12
 8004d58:	6003      	str	r3, [r0, #0]
 8004d5a:	e7d6      	b.n	8004d0a <_free_r+0x26>
 8004d5c:	6825      	ldr	r5, [r4, #0]
 8004d5e:	1961      	adds	r1, r4, r5
 8004d60:	428b      	cmp	r3, r1
 8004d62:	bf04      	itt	eq
 8004d64:	6819      	ldreq	r1, [r3, #0]
 8004d66:	685b      	ldreq	r3, [r3, #4]
 8004d68:	6063      	str	r3, [r4, #4]
 8004d6a:	bf04      	itt	eq
 8004d6c:	1949      	addeq	r1, r1, r5
 8004d6e:	6021      	streq	r1, [r4, #0]
 8004d70:	6054      	str	r4, [r2, #4]
 8004d72:	e7ca      	b.n	8004d0a <_free_r+0x26>
 8004d74:	b003      	add	sp, #12
 8004d76:	bd30      	pop	{r4, r5, pc}
 8004d78:	200002b8 	.word	0x200002b8

08004d7c <sbrk_aligned>:
 8004d7c:	b570      	push	{r4, r5, r6, lr}
 8004d7e:	4e0e      	ldr	r6, [pc, #56]	; (8004db8 <sbrk_aligned+0x3c>)
 8004d80:	460c      	mov	r4, r1
 8004d82:	6831      	ldr	r1, [r6, #0]
 8004d84:	4605      	mov	r5, r0
 8004d86:	b911      	cbnz	r1, 8004d8e <sbrk_aligned+0x12>
 8004d88:	f000 f8bc 	bl	8004f04 <_sbrk_r>
 8004d8c:	6030      	str	r0, [r6, #0]
 8004d8e:	4621      	mov	r1, r4
 8004d90:	4628      	mov	r0, r5
 8004d92:	f000 f8b7 	bl	8004f04 <_sbrk_r>
 8004d96:	1c43      	adds	r3, r0, #1
 8004d98:	d00a      	beq.n	8004db0 <sbrk_aligned+0x34>
 8004d9a:	1cc4      	adds	r4, r0, #3
 8004d9c:	f024 0403 	bic.w	r4, r4, #3
 8004da0:	42a0      	cmp	r0, r4
 8004da2:	d007      	beq.n	8004db4 <sbrk_aligned+0x38>
 8004da4:	1a21      	subs	r1, r4, r0
 8004da6:	4628      	mov	r0, r5
 8004da8:	f000 f8ac 	bl	8004f04 <_sbrk_r>
 8004dac:	3001      	adds	r0, #1
 8004dae:	d101      	bne.n	8004db4 <sbrk_aligned+0x38>
 8004db0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004db4:	4620      	mov	r0, r4
 8004db6:	bd70      	pop	{r4, r5, r6, pc}
 8004db8:	200002bc 	.word	0x200002bc

08004dbc <_malloc_r>:
 8004dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc0:	1ccd      	adds	r5, r1, #3
 8004dc2:	f025 0503 	bic.w	r5, r5, #3
 8004dc6:	3508      	adds	r5, #8
 8004dc8:	2d0c      	cmp	r5, #12
 8004dca:	bf38      	it	cc
 8004dcc:	250c      	movcc	r5, #12
 8004dce:	2d00      	cmp	r5, #0
 8004dd0:	4607      	mov	r7, r0
 8004dd2:	db01      	blt.n	8004dd8 <_malloc_r+0x1c>
 8004dd4:	42a9      	cmp	r1, r5
 8004dd6:	d905      	bls.n	8004de4 <_malloc_r+0x28>
 8004dd8:	230c      	movs	r3, #12
 8004dda:	603b      	str	r3, [r7, #0]
 8004ddc:	2600      	movs	r6, #0
 8004dde:	4630      	mov	r0, r6
 8004de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004de4:	4e2e      	ldr	r6, [pc, #184]	; (8004ea0 <_malloc_r+0xe4>)
 8004de6:	f000 f89d 	bl	8004f24 <__malloc_lock>
 8004dea:	6833      	ldr	r3, [r6, #0]
 8004dec:	461c      	mov	r4, r3
 8004dee:	bb34      	cbnz	r4, 8004e3e <_malloc_r+0x82>
 8004df0:	4629      	mov	r1, r5
 8004df2:	4638      	mov	r0, r7
 8004df4:	f7ff ffc2 	bl	8004d7c <sbrk_aligned>
 8004df8:	1c43      	adds	r3, r0, #1
 8004dfa:	4604      	mov	r4, r0
 8004dfc:	d14d      	bne.n	8004e9a <_malloc_r+0xde>
 8004dfe:	6834      	ldr	r4, [r6, #0]
 8004e00:	4626      	mov	r6, r4
 8004e02:	2e00      	cmp	r6, #0
 8004e04:	d140      	bne.n	8004e88 <_malloc_r+0xcc>
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	4631      	mov	r1, r6
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	eb04 0803 	add.w	r8, r4, r3
 8004e10:	f000 f878 	bl	8004f04 <_sbrk_r>
 8004e14:	4580      	cmp	r8, r0
 8004e16:	d13a      	bne.n	8004e8e <_malloc_r+0xd2>
 8004e18:	6821      	ldr	r1, [r4, #0]
 8004e1a:	3503      	adds	r5, #3
 8004e1c:	1a6d      	subs	r5, r5, r1
 8004e1e:	f025 0503 	bic.w	r5, r5, #3
 8004e22:	3508      	adds	r5, #8
 8004e24:	2d0c      	cmp	r5, #12
 8004e26:	bf38      	it	cc
 8004e28:	250c      	movcc	r5, #12
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	4638      	mov	r0, r7
 8004e2e:	f7ff ffa5 	bl	8004d7c <sbrk_aligned>
 8004e32:	3001      	adds	r0, #1
 8004e34:	d02b      	beq.n	8004e8e <_malloc_r+0xd2>
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	442b      	add	r3, r5
 8004e3a:	6023      	str	r3, [r4, #0]
 8004e3c:	e00e      	b.n	8004e5c <_malloc_r+0xa0>
 8004e3e:	6822      	ldr	r2, [r4, #0]
 8004e40:	1b52      	subs	r2, r2, r5
 8004e42:	d41e      	bmi.n	8004e82 <_malloc_r+0xc6>
 8004e44:	2a0b      	cmp	r2, #11
 8004e46:	d916      	bls.n	8004e76 <_malloc_r+0xba>
 8004e48:	1961      	adds	r1, r4, r5
 8004e4a:	42a3      	cmp	r3, r4
 8004e4c:	6025      	str	r5, [r4, #0]
 8004e4e:	bf18      	it	ne
 8004e50:	6059      	strne	r1, [r3, #4]
 8004e52:	6863      	ldr	r3, [r4, #4]
 8004e54:	bf08      	it	eq
 8004e56:	6031      	streq	r1, [r6, #0]
 8004e58:	5162      	str	r2, [r4, r5]
 8004e5a:	604b      	str	r3, [r1, #4]
 8004e5c:	4638      	mov	r0, r7
 8004e5e:	f104 060b 	add.w	r6, r4, #11
 8004e62:	f000 f865 	bl	8004f30 <__malloc_unlock>
 8004e66:	f026 0607 	bic.w	r6, r6, #7
 8004e6a:	1d23      	adds	r3, r4, #4
 8004e6c:	1af2      	subs	r2, r6, r3
 8004e6e:	d0b6      	beq.n	8004dde <_malloc_r+0x22>
 8004e70:	1b9b      	subs	r3, r3, r6
 8004e72:	50a3      	str	r3, [r4, r2]
 8004e74:	e7b3      	b.n	8004dde <_malloc_r+0x22>
 8004e76:	6862      	ldr	r2, [r4, #4]
 8004e78:	42a3      	cmp	r3, r4
 8004e7a:	bf0c      	ite	eq
 8004e7c:	6032      	streq	r2, [r6, #0]
 8004e7e:	605a      	strne	r2, [r3, #4]
 8004e80:	e7ec      	b.n	8004e5c <_malloc_r+0xa0>
 8004e82:	4623      	mov	r3, r4
 8004e84:	6864      	ldr	r4, [r4, #4]
 8004e86:	e7b2      	b.n	8004dee <_malloc_r+0x32>
 8004e88:	4634      	mov	r4, r6
 8004e8a:	6876      	ldr	r6, [r6, #4]
 8004e8c:	e7b9      	b.n	8004e02 <_malloc_r+0x46>
 8004e8e:	230c      	movs	r3, #12
 8004e90:	603b      	str	r3, [r7, #0]
 8004e92:	4638      	mov	r0, r7
 8004e94:	f000 f84c 	bl	8004f30 <__malloc_unlock>
 8004e98:	e7a1      	b.n	8004dde <_malloc_r+0x22>
 8004e9a:	6025      	str	r5, [r4, #0]
 8004e9c:	e7de      	b.n	8004e5c <_malloc_r+0xa0>
 8004e9e:	bf00      	nop
 8004ea0:	200002b8 	.word	0x200002b8

08004ea4 <_realloc_r>:
 8004ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea8:	4680      	mov	r8, r0
 8004eaa:	4614      	mov	r4, r2
 8004eac:	460e      	mov	r6, r1
 8004eae:	b921      	cbnz	r1, 8004eba <_realloc_r+0x16>
 8004eb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	f7ff bf81 	b.w	8004dbc <_malloc_r>
 8004eba:	b92a      	cbnz	r2, 8004ec8 <_realloc_r+0x24>
 8004ebc:	f7ff ff12 	bl	8004ce4 <_free_r>
 8004ec0:	4625      	mov	r5, r4
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ec8:	f000 f838 	bl	8004f3c <_malloc_usable_size_r>
 8004ecc:	4284      	cmp	r4, r0
 8004ece:	4607      	mov	r7, r0
 8004ed0:	d802      	bhi.n	8004ed8 <_realloc_r+0x34>
 8004ed2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ed6:	d812      	bhi.n	8004efe <_realloc_r+0x5a>
 8004ed8:	4621      	mov	r1, r4
 8004eda:	4640      	mov	r0, r8
 8004edc:	f7ff ff6e 	bl	8004dbc <_malloc_r>
 8004ee0:	4605      	mov	r5, r0
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d0ed      	beq.n	8004ec2 <_realloc_r+0x1e>
 8004ee6:	42bc      	cmp	r4, r7
 8004ee8:	4622      	mov	r2, r4
 8004eea:	4631      	mov	r1, r6
 8004eec:	bf28      	it	cs
 8004eee:	463a      	movcs	r2, r7
 8004ef0:	f7ff fed0 	bl	8004c94 <memcpy>
 8004ef4:	4631      	mov	r1, r6
 8004ef6:	4640      	mov	r0, r8
 8004ef8:	f7ff fef4 	bl	8004ce4 <_free_r>
 8004efc:	e7e1      	b.n	8004ec2 <_realloc_r+0x1e>
 8004efe:	4635      	mov	r5, r6
 8004f00:	e7df      	b.n	8004ec2 <_realloc_r+0x1e>
	...

08004f04 <_sbrk_r>:
 8004f04:	b538      	push	{r3, r4, r5, lr}
 8004f06:	4d06      	ldr	r5, [pc, #24]	; (8004f20 <_sbrk_r+0x1c>)
 8004f08:	2300      	movs	r3, #0
 8004f0a:	4604      	mov	r4, r0
 8004f0c:	4608      	mov	r0, r1
 8004f0e:	602b      	str	r3, [r5, #0]
 8004f10:	f7fb ff8e 	bl	8000e30 <_sbrk>
 8004f14:	1c43      	adds	r3, r0, #1
 8004f16:	d102      	bne.n	8004f1e <_sbrk_r+0x1a>
 8004f18:	682b      	ldr	r3, [r5, #0]
 8004f1a:	b103      	cbz	r3, 8004f1e <_sbrk_r+0x1a>
 8004f1c:	6023      	str	r3, [r4, #0]
 8004f1e:	bd38      	pop	{r3, r4, r5, pc}
 8004f20:	200002b0 	.word	0x200002b0

08004f24 <__malloc_lock>:
 8004f24:	4801      	ldr	r0, [pc, #4]	; (8004f2c <__malloc_lock+0x8>)
 8004f26:	f7ff beb3 	b.w	8004c90 <__retarget_lock_acquire_recursive>
 8004f2a:	bf00      	nop
 8004f2c:	200002b4 	.word	0x200002b4

08004f30 <__malloc_unlock>:
 8004f30:	4801      	ldr	r0, [pc, #4]	; (8004f38 <__malloc_unlock+0x8>)
 8004f32:	f7ff beae 	b.w	8004c92 <__retarget_lock_release_recursive>
 8004f36:	bf00      	nop
 8004f38:	200002b4 	.word	0x200002b4

08004f3c <_malloc_usable_size_r>:
 8004f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f40:	1f18      	subs	r0, r3, #4
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	bfbc      	itt	lt
 8004f46:	580b      	ldrlt	r3, [r1, r0]
 8004f48:	18c0      	addlt	r0, r0, r3
 8004f4a:	4770      	bx	lr

08004f4c <_init>:
 8004f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4e:	bf00      	nop
 8004f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f52:	bc08      	pop	{r3}
 8004f54:	469e      	mov	lr, r3
 8004f56:	4770      	bx	lr

08004f58 <_fini>:
 8004f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5a:	bf00      	nop
 8004f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f5e:	bc08      	pop	{r3}
 8004f60:	469e      	mov	lr, r3
 8004f62:	4770      	bx	lr


hello_world.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000177c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001928  08001928  00011928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001938  08001938  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001938  08001938  00011938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001940  08001940  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001940  08001940  00011940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001944  08001944  00011944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000005c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000068  20000068  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000426a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012b0  00000000  00000000  000242a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000498  00000000  00000000  00025558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000003f8  00000000  00000000  000259f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021410  00000000  00000000  00025de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005f24  00000000  00000000  000471f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8ca3  00000000  00000000  0004d11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00115dbf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000fe4  00000000  00000000  00115e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001910 	.word	0x08001910

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08001910 	.word	0x08001910

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <button_init>:
#include "button_driver.h"

void button_init(button_t* btn, GPIO_TypeDef* port, uint16_t pin) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	4613      	mov	r3, r2
 80004fc:	80fb      	strh	r3, [r7, #6]
    btn->port = port;
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	68ba      	ldr	r2, [r7, #8]
 8000502:	601a      	str	r2, [r3, #0]
    btn->pin = pin;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	88fa      	ldrh	r2, [r7, #6]
 8000508:	809a      	strh	r2, [r3, #4]
//    btn->last_raw_state = HAL_GPIO_ReadPin(port, pin);
    btn->last_raw_state = GPIO_ReadPin(port, pin);
 800050a:	88fb      	ldrh	r3, [r7, #6]
 800050c:	4619      	mov	r1, r3
 800050e:	68b8      	ldr	r0, [r7, #8]
 8000510:	f000 fa49 	bl	80009a6 <GPIO_ReadPin>
 8000514:	4603      	mov	r3, r0
 8000516:	461a      	mov	r2, r3
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	71da      	strb	r2, [r3, #7]
    btn->last_stable_state = btn->last_raw_state;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	79da      	ldrb	r2, [r3, #7]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	719a      	strb	r2, [r3, #6]
    btn->last_change_time = HAL_GetTick();
 8000524:	f000 fcb2 	bl	8000e8c <HAL_GetTick>
 8000528:	4602      	mov	r2, r0
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	609a      	str	r2, [r3, #8]
    btn->pressed_event_flag = 0;
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	2200      	movs	r2, #0
 8000532:	731a      	strb	r2, [r3, #12]
}
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <button_process>:

void button_process(button_t* btn) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	static uint32_t last_time = 0;
//    GPIO_PinState raw = HAL_GPIO_ReadPin(btn->port, btn->pin);
    GPIO_PinState raw = GPIO_ReadPin(btn->port, btn->pin);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	889b      	ldrh	r3, [r3, #4]
 800054c:	4619      	mov	r1, r3
 800054e:	4610      	mov	r0, r2
 8000550:	f000 fa29 	bl	80009a6 <GPIO_ReadPin>
 8000554:	4603      	mov	r3, r0
 8000556:	73fb      	strb	r3, [r7, #15]

    uint32_t now = HAL_GetTick();
 8000558:	f000 fc98 	bl	8000e8c <HAL_GetTick>
 800055c:	60b8      	str	r0, [r7, #8]

    if (now - last_time < 10) return;
 800055e:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <button_process+0x88>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	68ba      	ldr	r2, [r7, #8]
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	2b09      	cmp	r3, #9
 8000568:	d927      	bls.n	80005ba <button_process+0x7e>
        last_time = now;
 800056a:	4a16      	ldr	r2, [pc, #88]	; (80005c4 <button_process+0x88>)
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	6013      	str	r3, [r2, #0]

    if (raw != btn->last_raw_state) {
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	79db      	ldrb	r3, [r3, #7]
 8000574:	7bfa      	ldrb	r2, [r7, #15]
 8000576:	429a      	cmp	r2, r3
 8000578:	d006      	beq.n	8000588 <button_process+0x4c>
        btn->last_raw_state = raw;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	7bfa      	ldrb	r2, [r7, #15]
 800057e:	71da      	strb	r2, [r3, #7]
        btn->last_change_time = now;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	e019      	b.n	80005bc <button_process+0x80>
    } else {
        if (raw != btn->last_stable_state) {
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	799b      	ldrb	r3, [r3, #6]
 800058c:	7bfa      	ldrb	r2, [r7, #15]
 800058e:	429a      	cmp	r2, r3
 8000590:	d014      	beq.n	80005bc <button_process+0x80>
            if ((now - btn->last_change_time) >= BUTTON_DEBOUNCE_MS) {
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	689b      	ldr	r3, [r3, #8]
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	2b27      	cmp	r3, #39	; 0x27
 800059c:	d90e      	bls.n	80005bc <button_process+0x80>
                if (btn->last_stable_state == GPIO_PIN_SET && raw == GPIO_PIN_RESET) {
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	799b      	ldrb	r3, [r3, #6]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d105      	bne.n	80005b2 <button_process+0x76>
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d102      	bne.n	80005b2 <button_process+0x76>
                    btn->pressed_event_flag = 1;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	731a      	strb	r2, [r3, #12]
                }
                btn->last_stable_state = raw;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	7bfa      	ldrb	r2, [r7, #15]
 80005b6:	719a      	strb	r2, [r3, #6]
 80005b8:	e000      	b.n	80005bc <button_process+0x80>
    if (now - last_time < 10) return;
 80005ba:	bf00      	nop
            }
        }
    }
}
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000028 	.word	0x20000028

080005c8 <button_is_pressed>:

uint8_t button_is_pressed(button_t* btn) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
    button_process(btn);
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f7ff ffb3 	bl	800053c <button_process>

    if (btn->pressed_event_flag) {
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	7b1b      	ldrb	r3, [r3, #12]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d004      	beq.n	80005e8 <button_is_pressed+0x20>
        btn->pressed_event_flag = 0;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2200      	movs	r2, #0
 80005e2:	731a      	strb	r2, [r3, #12]
        return 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	e000      	b.n	80005ea <button_is_pressed+0x22>
    }
    return 0;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <led_init>:
#include "led_driver.h"

void led_init(led_t* led, GPIO_TypeDef* port, uint16_t pin) {
 80005f2:	b480      	push	{r7}
 80005f4:	b085      	sub	sp, #20
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	60f8      	str	r0, [r7, #12]
 80005fa:	60b9      	str	r1, [r7, #8]
 80005fc:	4613      	mov	r3, r2
 80005fe:	80fb      	strh	r3, [r7, #6]
    led->port = port;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	68ba      	ldr	r2, [r7, #8]
 8000604:	601a      	str	r2, [r3, #0]
    led->pin = pin;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	88fa      	ldrh	r2, [r7, #6]
 800060a:	809a      	strh	r2, [r3, #4]
}
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <led_on>:

void led_on(led_t* led) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
//    HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
    GPIO_WritePin(led->port, led->pin, GPIO_PIN_SET);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	6818      	ldr	r0, [r3, #0]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	889b      	ldrh	r3, [r3, #4]
 8000628:	2201      	movs	r2, #1
 800062a:	4619      	mov	r1, r3
 800062c:	f000 f98f 	bl	800094e <GPIO_WritePin>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <led_off>:

void led_off(led_t* led) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
//    HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
	GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6818      	ldr	r0, [r3, #0]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	889b      	ldrh	r3, [r3, #4]
 8000648:	2200      	movs	r2, #0
 800064a:	4619      	mov	r1, r3
 800064c:	f000 f97f 	bl	800094e <GPIO_WritePin>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f000 fbb0 	bl	8000dc0 <HAL_Init>

  /* USER CODE BEGIN Init */
  My_GPIO_Init();
 8000660:	f000 f9b6 	bl	80009d0 <My_GPIO_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000664:	f000 f812 	bl	800068c <SystemClock_Config>

  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */

  traffic_light_init();
 8000668:	f000 fa4a 	bl	8000b00 <traffic_light_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  traffic_light_handler();
 800066c:	f000 fab4 	bl	8000bd8 <traffic_light_handler>
	  button_process(&pedestrian_button);
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <main+0x30>)
 8000672:	f7ff ff63 	bl	800053c <button_process>

	  if (button_is_pressed(&pedestrian_button)) {
 8000676:	4804      	ldr	r0, [pc, #16]	; (8000688 <main+0x30>)
 8000678:	f7ff ffa6 	bl	80005c8 <button_is_pressed>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0f4      	beq.n	800066c <main+0x14>
		  handle_button_press();
 8000682:	f000 fb3b 	bl	8000cfc <handle_button_press>
	  traffic_light_handler();
 8000686:	e7f1      	b.n	800066c <main+0x14>
 8000688:	20000044 	.word	0x20000044

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	; 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2230      	movs	r2, #48	; 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f930 	bl	8001900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	4b23      	ldr	r3, [pc, #140]	; (8000744 <SystemClock_Config+0xb8>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	4a22      	ldr	r2, [pc, #136]	; (8000744 <SystemClock_Config+0xb8>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	; 0x40
 80006c0:	4b20      	ldr	r3, [pc, #128]	; (8000744 <SystemClock_Config+0xb8>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <SystemClock_Config+0xbc>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006d8:	4a1b      	ldr	r2, [pc, #108]	; (8000748 <SystemClock_Config+0xbc>)
 80006da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <SystemClock_Config+0xbc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2310      	movs	r3, #16
 80006f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	4618      	mov	r0, r3
 8000702:	f000 fcb5 	bl	8001070 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800070c:	f000 f81e 	bl	800074c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f000 ff18 	bl	8001560 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000736:	f000 f809 	bl	800074c <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	; 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
}
 8000752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000754:	e7fe      	b.n	8000754 <Error_Handler+0x8>
	...

08000758 <GPIO_EnableClock_>:
#include "my_hal.h"

void GPIO_EnableClock_(GPIO_TypeDef* port) {
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
    if (port == GPIOA) { RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; }
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a2e      	ldr	r2, [pc, #184]	; (800081c <GPIO_EnableClock_+0xc4>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d106      	bne.n	8000776 <GPIO_EnableClock_+0x1e>
 8000768:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <GPIO_EnableClock_+0xc8>)
 800076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076c:	4a2c      	ldr	r2, [pc, #176]	; (8000820 <GPIO_EnableClock_+0xc8>)
 800076e:	f043 0301 	orr.w	r3, r3, #1
 8000772:	6313      	str	r3, [r2, #48]	; 0x30
    else if (port == GPIOG){ RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN; }
#endif
#ifdef RCC_AHB1ENR_GPIOHEN
    else if (port == GPIOH){ RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; }
#endif
}
 8000774:	e04b      	b.n	800080e <GPIO_EnableClock_+0xb6>
    else if (port == GPIOB){ RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; }
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a2a      	ldr	r2, [pc, #168]	; (8000824 <GPIO_EnableClock_+0xcc>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d106      	bne.n	800078c <GPIO_EnableClock_+0x34>
 800077e:	4b28      	ldr	r3, [pc, #160]	; (8000820 <GPIO_EnableClock_+0xc8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a27      	ldr	r2, [pc, #156]	; (8000820 <GPIO_EnableClock_+0xc8>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
}
 800078a:	e040      	b.n	800080e <GPIO_EnableClock_+0xb6>
    else if (port == GPIOC){ RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; }
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a26      	ldr	r2, [pc, #152]	; (8000828 <GPIO_EnableClock_+0xd0>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d106      	bne.n	80007a2 <GPIO_EnableClock_+0x4a>
 8000794:	4b22      	ldr	r3, [pc, #136]	; (8000820 <GPIO_EnableClock_+0xc8>)
 8000796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000798:	4a21      	ldr	r2, [pc, #132]	; (8000820 <GPIO_EnableClock_+0xc8>)
 800079a:	f043 0304 	orr.w	r3, r3, #4
 800079e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007a0:	e035      	b.n	800080e <GPIO_EnableClock_+0xb6>
    else if (port == GPIOD){ RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; }
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4a21      	ldr	r2, [pc, #132]	; (800082c <GPIO_EnableClock_+0xd4>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d106      	bne.n	80007b8 <GPIO_EnableClock_+0x60>
 80007aa:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <GPIO_EnableClock_+0xc8>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a1c      	ldr	r2, [pc, #112]	; (8000820 <GPIO_EnableClock_+0xc8>)
 80007b0:	f043 0308 	orr.w	r3, r3, #8
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007b6:	e02a      	b.n	800080e <GPIO_EnableClock_+0xb6>
    else if (port == GPIOE){ RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; }
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a1d      	ldr	r2, [pc, #116]	; (8000830 <GPIO_EnableClock_+0xd8>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d106      	bne.n	80007ce <GPIO_EnableClock_+0x76>
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <GPIO_EnableClock_+0xc8>)
 80007c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c4:	4a16      	ldr	r2, [pc, #88]	; (8000820 <GPIO_EnableClock_+0xc8>)
 80007c6:	f043 0310 	orr.w	r3, r3, #16
 80007ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007cc:	e01f      	b.n	800080e <GPIO_EnableClock_+0xb6>
    else if (port == GPIOF){ RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; }
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a18      	ldr	r2, [pc, #96]	; (8000834 <GPIO_EnableClock_+0xdc>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d106      	bne.n	80007e4 <GPIO_EnableClock_+0x8c>
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <GPIO_EnableClock_+0xc8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a11      	ldr	r2, [pc, #68]	; (8000820 <GPIO_EnableClock_+0xc8>)
 80007dc:	f043 0320 	orr.w	r3, r3, #32
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007e2:	e014      	b.n	800080e <GPIO_EnableClock_+0xb6>
    else if (port == GPIOG){ RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN; }
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a14      	ldr	r2, [pc, #80]	; (8000838 <GPIO_EnableClock_+0xe0>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d106      	bne.n	80007fa <GPIO_EnableClock_+0xa2>
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <GPIO_EnableClock_+0xc8>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f0:	4a0b      	ldr	r2, [pc, #44]	; (8000820 <GPIO_EnableClock_+0xc8>)
 80007f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007f8:	e009      	b.n	800080e <GPIO_EnableClock_+0xb6>
    else if (port == GPIOH){ RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; }
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a0f      	ldr	r2, [pc, #60]	; (800083c <GPIO_EnableClock_+0xe4>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d105      	bne.n	800080e <GPIO_EnableClock_+0xb6>
 8000802:	4b07      	ldr	r3, [pc, #28]	; (8000820 <GPIO_EnableClock_+0xc8>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a06      	ldr	r2, [pc, #24]	; (8000820 <GPIO_EnableClock_+0xc8>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40020000 	.word	0x40020000
 8000820:	40023800 	.word	0x40023800
 8000824:	40020400 	.word	0x40020400
 8000828:	40020800 	.word	0x40020800
 800082c:	40020c00 	.word	0x40020c00
 8000830:	40021000 	.word	0x40021000
 8000834:	40021400 	.word	0x40021400
 8000838:	40021800 	.word	0x40021800
 800083c:	40021c00 	.word	0x40021c00

08000840 <GPIO_PinIndex_>:

static uint32_t GPIO_PinIndex_(uint16_t pin){
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	80fb      	strh	r3, [r7, #6]
    for (uint32_t i = 0; i < 16; ++i) {
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	e00c      	b.n	800086a <GPIO_PinIndex_+0x2a>
        if (pin & (1u << i)) return i;
 8000850:	88fa      	ldrh	r2, [r7, #6]
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	fa22 f303 	lsr.w	r3, r2, r3
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <GPIO_PinIndex_+0x24>
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	e006      	b.n	8000872 <GPIO_PinIndex_+0x32>
    for (uint32_t i = 0; i < 16; ++i) {
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	3301      	adds	r3, #1
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	2b0f      	cmp	r3, #15
 800086e:	d9ef      	bls.n	8000850 <GPIO_PinIndex_+0x10>
    }
    return 0;
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <GPIO_ConfigPin>:


void GPIO_ConfigPin(GPIO_TypeDef* port, uint16_t pin, GpioSimpleMode mode,
                           GpioPull pull, GpioSpeed speed)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b084      	sub	sp, #16
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	4608      	mov	r0, r1
 8000888:	4611      	mov	r1, r2
 800088a:	461a      	mov	r2, r3
 800088c:	4603      	mov	r3, r0
 800088e:	807b      	strh	r3, [r7, #2]
 8000890:	460b      	mov	r3, r1
 8000892:	707b      	strb	r3, [r7, #1]
 8000894:	4613      	mov	r3, r2
 8000896:	703b      	strb	r3, [r7, #0]
    GPIO_EnableClock_(port);
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff ff5d 	bl	8000758 <GPIO_EnableClock_>
    uint32_t pos = GPIO_PinIndex_(pin);
 800089e:	887b      	ldrh	r3, [r7, #2]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ffcd 	bl	8000840 <GPIO_PinIndex_>
 80008a6:	60f8      	str	r0, [r7, #12]

    /* MODER */
    port->MODER &= ~(0x3u << (pos*2));
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	2103      	movs	r1, #3
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	43db      	mvns	r3, r3
 80008b8:	401a      	ands	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	601a      	str	r2, [r3, #0]
    if (mode == GPIO_MODE_OUT_PP) {
 80008be:	787b      	ldrb	r3, [r7, #1]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d109      	bne.n	80008d8 <GPIO_ConfigPin+0x5a>
        port->MODER |=  (0x1u << (pos*2));     // General purpose output
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	2101      	movs	r1, #1
 80008ce:	fa01 f303 	lsl.w	r3, r1, r3
 80008d2:	431a      	orrs	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	601a      	str	r2, [r3, #0]
    } // для входа оставляем 00

    /* OTYPER (0 = push-pull) */
    if (mode == GPIO_MODE_OUT_PP) {
 80008d8:	787b      	ldrb	r3, [r7, #1]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d109      	bne.n	80008f2 <GPIO_ConfigPin+0x74>
        port->OTYPER &= ~(1u << pos);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	685a      	ldr	r2, [r3, #4]
 80008e2:	2101      	movs	r1, #1
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ea:	43db      	mvns	r3, r3
 80008ec:	401a      	ands	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	605a      	str	r2, [r3, #4]
    }

    /* OSPEEDR */
    port->OSPEEDR &= ~(0x3u << (pos*2));
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	689a      	ldr	r2, [r3, #8]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	2103      	movs	r1, #3
 80008fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	401a      	ands	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	609a      	str	r2, [r3, #8]
    port->OSPEEDR |=  ((uint32_t)speed << (pos*2));
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	689a      	ldr	r2, [r3, #8]
 800090c:	7e39      	ldrb	r1, [r7, #24]
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	fa01 f303 	lsl.w	r3, r1, r3
 8000916:	431a      	orrs	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	609a      	str	r2, [r3, #8]

    /* PUPDR */
    port->PUPDR &= ~(0x3u << (pos*2));
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	68da      	ldr	r2, [r3, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	2103      	movs	r1, #3
 8000926:	fa01 f303 	lsl.w	r3, r1, r3
 800092a:	43db      	mvns	r3, r3
 800092c:	401a      	ands	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	60da      	str	r2, [r3, #12]
    port->PUPDR |=  ((uint32_t)pull << (pos*2));
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	68da      	ldr	r2, [r3, #12]
 8000936:	7839      	ldrb	r1, [r7, #0]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	fa01 f303 	lsl.w	r3, r1, r3
 8000940:	431a      	orrs	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	60da      	str	r2, [r3, #12]
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <GPIO_WritePin>:

void GPIO_WritePin(GPIO_TypeDef* port, uint16_t pin, GPIO_PinState state)
{
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	460b      	mov	r3, r1
 8000958:	807b      	strh	r3, [r7, #2]
 800095a:	4613      	mov	r3, r2
 800095c:	707b      	strb	r3, [r7, #1]
    if (state == GPIO_PIN_SET) {
 800095e:	787b      	ldrb	r3, [r7, #1]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d103      	bne.n	800096c <GPIO_WritePin+0x1e>
        port->BSRR = pin;           // set
 8000964:	887a      	ldrh	r2, [r7, #2]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	619a      	str	r2, [r3, #24]
    } else {
        port->BSRR = (uint32_t)pin << 16; // reset
    }
}
 800096a:	e003      	b.n	8000974 <GPIO_WritePin+0x26>
        port->BSRR = (uint32_t)pin << 16; // reset
 800096c:	887b      	ldrh	r3, [r7, #2]
 800096e:	041a      	lsls	r2, r3, #16
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	619a      	str	r2, [r3, #24]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <GPIO_WritePinsResetMask>:

void GPIO_WritePinsResetMask(GPIO_TypeDef* port, uint16_t reset_mask)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	807b      	strh	r3, [r7, #2]
    if (reset_mask) {
 800098c:	887b      	ldrh	r3, [r7, #2]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d003      	beq.n	800099a <GPIO_WritePinsResetMask+0x1a>
        port->BSRR = (uint32_t)reset_mask << 16;
 8000992:	887b      	ldrh	r3, [r7, #2]
 8000994:	041a      	lsls	r2, r3, #16
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	619a      	str	r2, [r3, #24]
    }
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <GPIO_ReadPin>:

GPIO_PinState GPIO_ReadPin(GPIO_TypeDef* port, uint16_t pin)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
 80009ae:	460b      	mov	r3, r1
 80009b0:	807b      	strh	r3, [r7, #2]
    return (port->IDR & pin) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	691a      	ldr	r2, [r3, #16]
 80009b6:	887b      	ldrh	r3, [r7, #2]
 80009b8:	4013      	ands	r3, r2
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	bf14      	ite	ne
 80009be:	2301      	movne	r3, #1
 80009c0:	2300      	moveq	r3, #0
 80009c2:	b2db      	uxtb	r3, r3
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <My_GPIO_Init>:

/* Инициализация всего нужного под задачу */
void My_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af02      	add	r7, sp, #8
    /* Кнопка PC15: вход, без подтяжек (или выставьте нужную) */
    GPIO_ConfigPin(USER_BUTTON_PORT, USER_BUTTON_PIN, GPIO_MODE_IN, GPIO_NOPULL_, GPIO_SPEED_LOW_);
 80009d6:	2300      	movs	r3, #0
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	2300      	movs	r3, #0
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009e2:	4813      	ldr	r0, [pc, #76]	; (8000a30 <My_GPIO_Init+0x60>)
 80009e4:	f7ff ff4b 	bl	800087e <GPIO_ConfigPin>

    /* Светодиоды PD13/14/15: выходы push-pull, без подтяжек, низкая/средняя скорость */
    GPIO_ConfigPin(LED_PORT, GREEN_LED_PIN,  GPIO_MODE_OUT_PP, GPIO_NOPULL_, GPIO_SPEED_LOW_);
 80009e8:	2300      	movs	r3, #0
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2300      	movs	r3, #0
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f4:	480f      	ldr	r0, [pc, #60]	; (8000a34 <My_GPIO_Init+0x64>)
 80009f6:	f7ff ff42 	bl	800087e <GPIO_ConfigPin>
    GPIO_ConfigPin(LED_PORT, YELLOW_LED_PIN, GPIO_MODE_OUT_PP, GPIO_NOPULL_, GPIO_SPEED_LOW_);
 80009fa:	2300      	movs	r3, #0
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	2300      	movs	r3, #0
 8000a00:	2201      	movs	r2, #1
 8000a02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a06:	480b      	ldr	r0, [pc, #44]	; (8000a34 <My_GPIO_Init+0x64>)
 8000a08:	f7ff ff39 	bl	800087e <GPIO_ConfigPin>
    GPIO_ConfigPin(LED_PORT, RED_LED_PIN,    GPIO_MODE_OUT_PP, GPIO_NOPULL_, GPIO_SPEED_LOW_);
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2300      	movs	r3, #0
 8000a12:	2201      	movs	r2, #1
 8000a14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a18:	4806      	ldr	r0, [pc, #24]	; (8000a34 <My_GPIO_Init+0x64>)
 8000a1a:	f7ff ff30 	bl	800087e <GPIO_ConfigPin>

    /* Погасим все светодиоды */
    GPIO_WritePinsResetMask(LED_PORT, GREEN_LED_PIN | YELLOW_LED_PIN | RED_LED_PIN);
 8000a1e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000a22:	4804      	ldr	r0, [pc, #16]	; (8000a34 <My_GPIO_Init+0x64>)
 8000a24:	f7ff ffac 	bl	8000980 <GPIO_WritePinsResetMask>
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40020800 	.word	0x40020800
 8000a34:	40020c00 	.word	0x40020c00

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	4a0f      	ldr	r2, [pc, #60]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <NMI_Handler+0x4>

08000a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <HardFault_Handler+0x4>

08000a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <MemManage_Handler+0x4>

08000a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <BusFault_Handler+0x4>

08000aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <UsageFault_Handler+0x4>

08000aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad4:	f000 f9c6 	bl	8000e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <SystemInit+0x20>)
 8000ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <SystemInit+0x20>)
 8000ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <traffic_light_init>:
traffic_light_state_t current_state = STATE_RED;
uint32_t state_start_time = 0;
uint8_t next_red_short = 0;


void traffic_light_init(void) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
    led_init(&green_led, LED_PORT, GREEN_LED);
 8000b04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b08:	4911      	ldr	r1, [pc, #68]	; (8000b50 <traffic_light_init+0x50>)
 8000b0a:	4812      	ldr	r0, [pc, #72]	; (8000b54 <traffic_light_init+0x54>)
 8000b0c:	f7ff fd71 	bl	80005f2 <led_init>
    led_init(&yellow_led, LED_PORT, YELLOW_LED);
 8000b10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b14:	490e      	ldr	r1, [pc, #56]	; (8000b50 <traffic_light_init+0x50>)
 8000b16:	4810      	ldr	r0, [pc, #64]	; (8000b58 <traffic_light_init+0x58>)
 8000b18:	f7ff fd6b 	bl	80005f2 <led_init>
    led_init(&red_led, LED_PORT, RED_LED);
 8000b1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b20:	490b      	ldr	r1, [pc, #44]	; (8000b50 <traffic_light_init+0x50>)
 8000b22:	480e      	ldr	r0, [pc, #56]	; (8000b5c <traffic_light_init+0x5c>)
 8000b24:	f7ff fd65 	bl	80005f2 <led_init>
    button_init(&pedestrian_button, BUTTON_PORT, GPIO_PIN_15);
 8000b28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b2c:	490c      	ldr	r1, [pc, #48]	; (8000b60 <traffic_light_init+0x60>)
 8000b2e:	480d      	ldr	r0, [pc, #52]	; (8000b64 <traffic_light_init+0x64>)
 8000b30:	f7ff fcde 	bl	80004f0 <button_init>

    current_state = STATE_RED;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <traffic_light_init+0x68>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
    state_start_time = HAL_GetTick();
 8000b3a:	f000 f9a7 	bl	8000e8c <HAL_GetTick>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <traffic_light_init+0x6c>)
 8000b42:	6013      	str	r3, [r2, #0]
    set_traffic_light(COLOR_RED);
 8000b44:	2000      	movs	r0, #0
 8000b46:	f000 f813 	bl	8000b70 <set_traffic_light>
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40020c00 	.word	0x40020c00
 8000b54:	2000002c 	.word	0x2000002c
 8000b58:	20000034 	.word	0x20000034
 8000b5c:	2000003c 	.word	0x2000003c
 8000b60:	40020800 	.word	0x40020800
 8000b64:	20000044 	.word	0x20000044
 8000b68:	20000054 	.word	0x20000054
 8000b6c:	20000058 	.word	0x20000058

08000b70 <set_traffic_light>:

void set_traffic_light(led_color_t color) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
    led_off(&red_led);
 8000b7a:	4814      	ldr	r0, [pc, #80]	; (8000bcc <set_traffic_light+0x5c>)
 8000b7c:	f7ff fd5c 	bl	8000638 <led_off>
    led_off(&yellow_led);
 8000b80:	4813      	ldr	r0, [pc, #76]	; (8000bd0 <set_traffic_light+0x60>)
 8000b82:	f7ff fd59 	bl	8000638 <led_off>
    led_off(&green_led);
 8000b86:	4813      	ldr	r0, [pc, #76]	; (8000bd4 <set_traffic_light+0x64>)
 8000b88:	f7ff fd56 	bl	8000638 <led_off>

    switch(color) {
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d817      	bhi.n	8000bc2 <set_traffic_light+0x52>
 8000b92:	a201      	add	r2, pc, #4	; (adr r2, 8000b98 <set_traffic_light+0x28>)
 8000b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b98:	08000ba9 	.word	0x08000ba9
 8000b9c:	08000bb1 	.word	0x08000bb1
 8000ba0:	08000bb9 	.word	0x08000bb9
 8000ba4:	08000bc1 	.word	0x08000bc1
        case COLOR_RED:
            led_on(&red_led);
 8000ba8:	4808      	ldr	r0, [pc, #32]	; (8000bcc <set_traffic_light+0x5c>)
 8000baa:	f7ff fd35 	bl	8000618 <led_on>
            break;
 8000bae:	e008      	b.n	8000bc2 <set_traffic_light+0x52>
        case COLOR_YELLOW:
            led_on(&yellow_led);
 8000bb0:	4807      	ldr	r0, [pc, #28]	; (8000bd0 <set_traffic_light+0x60>)
 8000bb2:	f7ff fd31 	bl	8000618 <led_on>
            break;
 8000bb6:	e004      	b.n	8000bc2 <set_traffic_light+0x52>
        case COLOR_GREEN:
            led_on(&green_led);
 8000bb8:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <set_traffic_light+0x64>)
 8000bba:	f7ff fd2d 	bl	8000618 <led_on>
            break;
 8000bbe:	e000      	b.n	8000bc2 <set_traffic_light+0x52>
        case COLOR_NONE:
            break;
 8000bc0:	bf00      	nop
    }
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	2000003c 	.word	0x2000003c
 8000bd0:	20000034 	.word	0x20000034
 8000bd4:	2000002c 	.word	0x2000002c

08000bd8 <traffic_light_handler>:

void traffic_light_handler(void) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;
	uint32_t current_time = HAL_GetTick();
 8000bde:	f000 f955 	bl	8000e8c <HAL_GetTick>
 8000be2:	60f8      	str	r0, [r7, #12]
	uint32_t state_elapsed = current_time - state_start_time;
 8000be4:	4b40      	ldr	r3, [pc, #256]	; (8000ce8 <traffic_light_handler+0x110>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	68fa      	ldr	r2, [r7, #12]
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	60bb      	str	r3, [r7, #8]
	uint32_t red_time = next_red_short ? RED_TIME_SHORT_MS : RED_TIME_FULL_MS;
 8000bee:	4b3f      	ldr	r3, [pc, #252]	; (8000cec <traffic_light_handler+0x114>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d002      	beq.n	8000bfc <traffic_light_handler+0x24>
 8000bf6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000bfa:	e001      	b.n	8000c00 <traffic_light_handler+0x28>
 8000bfc:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000c00:	607b      	str	r3, [r7, #4]

	if (current_time - last_time < 10) return;
 8000c02:	4b3b      	ldr	r3, [pc, #236]	; (8000cf0 <traffic_light_handler+0x118>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	2b09      	cmp	r3, #9
 8000c0c:	d960      	bls.n	8000cd0 <traffic_light_handler+0xf8>
		last_time = current_time;
 8000c0e:	4a38      	ldr	r2, [pc, #224]	; (8000cf0 <traffic_light_handler+0x118>)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	6013      	str	r3, [r2, #0]

	switch (current_state) {
 8000c14:	4b37      	ldr	r3, [pc, #220]	; (8000cf4 <traffic_light_handler+0x11c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b03      	cmp	r3, #3
 8000c1a:	d862      	bhi.n	8000ce2 <traffic_light_handler+0x10a>
 8000c1c:	a201      	add	r2, pc, #4	; (adr r2, 8000c24 <traffic_light_handler+0x4c>)
 8000c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c22:	bf00      	nop
 8000c24:	08000c35 	.word	0x08000c35
 8000c28:	08000c57 	.word	0x08000c57
 8000c2c:	08000c75 	.word	0x08000c75
 8000c30:	08000cb5 	.word	0x08000cb5

		case STATE_RED:
			set_traffic_light(COLOR_RED);
 8000c34:	2000      	movs	r0, #0
 8000c36:	f7ff ff9b 	bl	8000b70 <set_traffic_light>

			if (state_elapsed >= red_time) {
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d348      	bcc.n	8000cd4 <traffic_light_handler+0xfc>
				current_state = STATE_GREEN;
 8000c42:	4b2c      	ldr	r3, [pc, #176]	; (8000cf4 <traffic_light_handler+0x11c>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
				state_start_time = current_time;
 8000c48:	4a27      	ldr	r2, [pc, #156]	; (8000ce8 <traffic_light_handler+0x110>)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	6013      	str	r3, [r2, #0]
				next_red_short = 0;
 8000c4e:	4b27      	ldr	r3, [pc, #156]	; (8000cec <traffic_light_handler+0x114>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c54:	e03e      	b.n	8000cd4 <traffic_light_handler+0xfc>

		case STATE_GREEN:
			set_traffic_light(COLOR_GREEN);
 8000c56:	2002      	movs	r0, #2
 8000c58:	f7ff ff8a 	bl	8000b70 <set_traffic_light>

			if (state_elapsed >= GREEN_TIME_MS) {
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d938      	bls.n	8000cd8 <traffic_light_handler+0x100>
				current_state = STATE_GREEN_BLINKING;
 8000c66:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <traffic_light_handler+0x11c>)
 8000c68:	2202      	movs	r2, #2
 8000c6a:	701a      	strb	r2, [r3, #0]
				state_start_time = current_time;
 8000c6c:	4a1e      	ldr	r2, [pc, #120]	; (8000ce8 <traffic_light_handler+0x110>)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6013      	str	r3, [r2, #0]
			}
			break;
 8000c72:	e031      	b.n	8000cd8 <traffic_light_handler+0x100>

		case STATE_GREEN_BLINKING:
			if (state_elapsed % 1000 < 500) {
 8000c74:	68ba      	ldr	r2, [r7, #8]
 8000c76:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <traffic_light_handler+0x120>)
 8000c78:	fba3 1302 	umull	r1, r3, r3, r2
 8000c7c:	099b      	lsrs	r3, r3, #6
 8000c7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c82:	fb01 f303 	mul.w	r3, r1, r3
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c8c:	d203      	bcs.n	8000c96 <traffic_light_handler+0xbe>
				set_traffic_light(COLOR_NONE);
 8000c8e:	2003      	movs	r0, #3
 8000c90:	f7ff ff6e 	bl	8000b70 <set_traffic_light>
 8000c94:	e002      	b.n	8000c9c <traffic_light_handler+0xc4>
			} else {
				set_traffic_light(COLOR_GREEN);
 8000c96:	2002      	movs	r0, #2
 8000c98:	f7ff ff6a 	bl	8000b70 <set_traffic_light>
			}

			if (state_elapsed >= GREEN_BLINK_TIME_MS) {
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d91a      	bls.n	8000cdc <traffic_light_handler+0x104>
				current_state = STATE_YELLOW;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <traffic_light_handler+0x11c>)
 8000ca8:	2203      	movs	r2, #3
 8000caa:	701a      	strb	r2, [r3, #0]
				state_start_time = current_time;
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <traffic_light_handler+0x110>)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	6013      	str	r3, [r2, #0]
			}
			break;
 8000cb2:	e013      	b.n	8000cdc <traffic_light_handler+0x104>

		case STATE_YELLOW:
			set_traffic_light(COLOR_YELLOW);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f7ff ff5b 	bl	8000b70 <set_traffic_light>

			if (state_elapsed >= YELLOW_TIME_MS) {
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cc0:	d30e      	bcc.n	8000ce0 <traffic_light_handler+0x108>
				current_state = STATE_RED;
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <traffic_light_handler+0x11c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
				state_start_time = current_time;
 8000cc8:	4a07      	ldr	r2, [pc, #28]	; (8000ce8 <traffic_light_handler+0x110>)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	6013      	str	r3, [r2, #0]
			}
			break;
 8000cce:	e007      	b.n	8000ce0 <traffic_light_handler+0x108>
	if (current_time - last_time < 10) return;
 8000cd0:	bf00      	nop
 8000cd2:	e006      	b.n	8000ce2 <traffic_light_handler+0x10a>
			break;
 8000cd4:	bf00      	nop
 8000cd6:	e004      	b.n	8000ce2 <traffic_light_handler+0x10a>
			break;
 8000cd8:	bf00      	nop
 8000cda:	e002      	b.n	8000ce2 <traffic_light_handler+0x10a>
			break;
 8000cdc:	bf00      	nop
 8000cde:	e000      	b.n	8000ce2 <traffic_light_handler+0x10a>
			break;
 8000ce0:	bf00      	nop
	}
}
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000058 	.word	0x20000058
 8000cec:	2000005c 	.word	0x2000005c
 8000cf0:	20000060 	.word	0x20000060
 8000cf4:	20000054 	.word	0x20000054
 8000cf8:	10624dd3 	.word	0x10624dd3

08000cfc <handle_button_press>:


void handle_button_press(void) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
    if (current_state == STATE_RED) {
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <handle_button_press+0x64>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d11b      	bne.n	8000d42 <handle_button_press+0x46>
        uint32_t red_elapsed = HAL_GetTick() - state_start_time;
 8000d0a:	f000 f8bf 	bl	8000e8c <HAL_GetTick>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <handle_button_press+0x68>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	607b      	str	r3, [r7, #4]

        if (red_elapsed >= RED_TIME_SHORT_MS) {
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f241 3287 	movw	r2, #4999	; 0x1387
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d90b      	bls.n	8000d3a <handle_button_press+0x3e>
            current_state = STATE_GREEN;
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <handle_button_press+0x64>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]
            state_start_time = HAL_GetTick();
 8000d28:	f000 f8b0 	bl	8000e8c <HAL_GetTick>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <handle_button_press+0x68>)
 8000d30:	6013      	str	r3, [r2, #0]
            next_red_short = 0;
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <handle_button_press+0x6c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
            next_red_short = 1;
        }
    } else if (current_state == STATE_YELLOW || current_state == STATE_GREEN_BLINKING) {
        next_red_short = 1;
    }
}
 8000d38:	e00e      	b.n	8000d58 <handle_button_press+0x5c>
            next_red_short = 1;
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <handle_button_press+0x6c>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
}
 8000d40:	e00a      	b.n	8000d58 <handle_button_press+0x5c>
    } else if (current_state == STATE_YELLOW || current_state == STATE_GREEN_BLINKING) {
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <handle_button_press+0x64>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d003      	beq.n	8000d52 <handle_button_press+0x56>
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <handle_button_press+0x64>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d102      	bne.n	8000d58 <handle_button_press+0x5c>
        next_red_short = 1;
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <handle_button_press+0x6c>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	701a      	strb	r2, [r3, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000054 	.word	0x20000054
 8000d64:	20000058 	.word	0x20000058
 8000d68:	2000005c 	.word	0x2000005c

08000d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d70:	480d      	ldr	r0, [pc, #52]	; (8000da8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d72:	490e      	ldr	r1, [pc, #56]	; (8000dac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d74:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d88:	4c0b      	ldr	r4, [pc, #44]	; (8000db8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d96:	f7ff fea1 	bl	8000adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f000 fd8d 	bl	80018b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9e:	f7ff fc5b 	bl	8000658 <main>
  bx  lr    
 8000da2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000da4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000db0:	08001948 	.word	0x08001948
  ldr r2, =_sbss
 8000db4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000db8:	20000068 	.word	0x20000068

08000dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC_IRQHandler>
	...

08000dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <HAL_Init+0x40>)
 8000dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_Init+0x40>)
 8000dd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_Init+0x40>)
 8000de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f90d 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dee:	200f      	movs	r0, #15
 8000df0:	f000 f808 	bl	8000e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df4:	f7ff fe20 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023c00 	.word	0x40023c00

08000e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x54>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_InitTick+0x58>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f917 	bl	8001056 <HAL_SYSTICK_Config>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00e      	b.n	8000e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b0f      	cmp	r3, #15
 8000e36:	d80a      	bhi.n	8000e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e40:	f000 f8ed 	bl	800101e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e44:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <HAL_InitTick+0x5c>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e000      	b.n	8000e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000004 	.word	0x20000004

08000e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x20>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x24>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <HAL_IncTick+0x24>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000064 	.word	0x20000064

08000e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <HAL_GetTick+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000064 	.word	0x20000064

08000ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed6:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	60d3      	str	r3, [r2, #12]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	f003 0307 	and.w	r3, r3, #7
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd4:	d301      	bcc.n	8000fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00f      	b.n	8000ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <SysTick_Config+0x40>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fe8:	f7ff ff8e 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <SysTick_Config+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <SysTick_Config+0x40>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff47 	bl	8000ea4 <__NVIC_SetPriorityGrouping>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001030:	f7ff ff5c 	bl	8000eec <__NVIC_GetPriorityGrouping>
 8001034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff ff8e 	bl	8000f5c <NVIC_EncodePriority>
 8001040:	4602      	mov	r2, r0
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff5d 	bl	8000f08 <__NVIC_SetPriority>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffb0 	bl	8000fc4 <SysTick_Config>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e267      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	d075      	beq.n	800117a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800108e:	4b88      	ldr	r3, [pc, #544]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	2b04      	cmp	r3, #4
 8001098:	d00c      	beq.n	80010b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800109a:	4b85      	ldr	r3, [pc, #532]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010a2:	2b08      	cmp	r3, #8
 80010a4:	d112      	bne.n	80010cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010a6:	4b82      	ldr	r3, [pc, #520]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010b2:	d10b      	bne.n	80010cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b4:	4b7e      	ldr	r3, [pc, #504]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d05b      	beq.n	8001178 <HAL_RCC_OscConfig+0x108>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d157      	bne.n	8001178 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e242      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d4:	d106      	bne.n	80010e4 <HAL_RCC_OscConfig+0x74>
 80010d6:	4b76      	ldr	r3, [pc, #472]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a75      	ldr	r2, [pc, #468]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e01d      	b.n	8001120 <HAL_RCC_OscConfig+0xb0>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ec:	d10c      	bne.n	8001108 <HAL_RCC_OscConfig+0x98>
 80010ee:	4b70      	ldr	r3, [pc, #448]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a6f      	ldr	r2, [pc, #444]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	4b6d      	ldr	r3, [pc, #436]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a6c      	ldr	r2, [pc, #432]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e00b      	b.n	8001120 <HAL_RCC_OscConfig+0xb0>
 8001108:	4b69      	ldr	r3, [pc, #420]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a68      	ldr	r2, [pc, #416]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800110e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b66      	ldr	r3, [pc, #408]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a65      	ldr	r2, [pc, #404]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800111a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800111e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d013      	beq.n	8001150 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001128:	f7ff feb0 	bl	8000e8c <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001130:	f7ff feac 	bl	8000e8c <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b64      	cmp	r3, #100	; 0x64
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e207      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001142:	4b5b      	ldr	r3, [pc, #364]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0xc0>
 800114e:	e014      	b.n	800117a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fe9c 	bl	8000e8c <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff fe98 	bl	8000e8c <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	; 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e1f3      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116a:	4b51      	ldr	r3, [pc, #324]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0xe8>
 8001176:	e000      	b.n	800117a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d063      	beq.n	800124e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001186:	4b4a      	ldr	r3, [pc, #296]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00b      	beq.n	80011aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001192:	4b47      	ldr	r3, [pc, #284]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800119a:	2b08      	cmp	r3, #8
 800119c:	d11c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800119e:	4b44      	ldr	r3, [pc, #272]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d116      	bne.n	80011d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011aa:	4b41      	ldr	r3, [pc, #260]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d005      	beq.n	80011c2 <HAL_RCC_OscConfig+0x152>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d001      	beq.n	80011c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e1c7      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c2:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4937      	ldr	r1, [pc, #220]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d6:	e03a      	b.n	800124e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d020      	beq.n	8001222 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e0:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <HAL_RCC_OscConfig+0x244>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e6:	f7ff fe51 	bl	8000e8c <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ee:	f7ff fe4d 	bl	8000e8c <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e1a8      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001200:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f0      	beq.n	80011ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120c:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4925      	ldr	r1, [pc, #148]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800121c:	4313      	orrs	r3, r2
 800121e:	600b      	str	r3, [r1, #0]
 8001220:	e015      	b.n	800124e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001222:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <HAL_RCC_OscConfig+0x244>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001228:	f7ff fe30 	bl	8000e8c <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001230:	f7ff fe2c 	bl	8000e8c <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e187      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001242:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b00      	cmp	r3, #0
 8001258:	d036      	beq.n	80012c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d016      	beq.n	8001290 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_RCC_OscConfig+0x248>)
 8001264:	2201      	movs	r2, #1
 8001266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001268:	f7ff fe10 	bl	8000e8c <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001270:	f7ff fe0c 	bl	8000e8c <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e167      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0x200>
 800128e:	e01b      	b.n	80012c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_RCC_OscConfig+0x248>)
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001296:	f7ff fdf9 	bl	8000e8c <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800129c:	e00e      	b.n	80012bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800129e:	f7ff fdf5 	bl	8000e8c <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d907      	bls.n	80012bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e150      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
 80012b0:	40023800 	.word	0x40023800
 80012b4:	42470000 	.word	0x42470000
 80012b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012bc:	4b88      	ldr	r3, [pc, #544]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1ea      	bne.n	800129e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 8097 	beq.w	8001404 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012da:	4b81      	ldr	r3, [pc, #516]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10f      	bne.n	8001306 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b7d      	ldr	r3, [pc, #500]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	4a7c      	ldr	r2, [pc, #496]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
 80012f6:	4b7a      	ldr	r3, [pc, #488]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001302:	2301      	movs	r3, #1
 8001304:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001306:	4b77      	ldr	r3, [pc, #476]	; (80014e4 <HAL_RCC_OscConfig+0x474>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130e:	2b00      	cmp	r3, #0
 8001310:	d118      	bne.n	8001344 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001312:	4b74      	ldr	r3, [pc, #464]	; (80014e4 <HAL_RCC_OscConfig+0x474>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a73      	ldr	r2, [pc, #460]	; (80014e4 <HAL_RCC_OscConfig+0x474>)
 8001318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131e:	f7ff fdb5 	bl	8000e8c <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001326:	f7ff fdb1 	bl	8000e8c <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e10c      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001338:	4b6a      	ldr	r3, [pc, #424]	; (80014e4 <HAL_RCC_OscConfig+0x474>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0f0      	beq.n	8001326 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d106      	bne.n	800135a <HAL_RCC_OscConfig+0x2ea>
 800134c:	4b64      	ldr	r3, [pc, #400]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800134e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001350:	4a63      	ldr	r2, [pc, #396]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6713      	str	r3, [r2, #112]	; 0x70
 8001358:	e01c      	b.n	8001394 <HAL_RCC_OscConfig+0x324>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2b05      	cmp	r3, #5
 8001360:	d10c      	bne.n	800137c <HAL_RCC_OscConfig+0x30c>
 8001362:	4b5f      	ldr	r3, [pc, #380]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001366:	4a5e      	ldr	r2, [pc, #376]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	6713      	str	r3, [r2, #112]	; 0x70
 800136e:	4b5c      	ldr	r3, [pc, #368]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001372:	4a5b      	ldr	r2, [pc, #364]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6713      	str	r3, [r2, #112]	; 0x70
 800137a:	e00b      	b.n	8001394 <HAL_RCC_OscConfig+0x324>
 800137c:	4b58      	ldr	r3, [pc, #352]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800137e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001380:	4a57      	ldr	r2, [pc, #348]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001382:	f023 0301 	bic.w	r3, r3, #1
 8001386:	6713      	str	r3, [r2, #112]	; 0x70
 8001388:	4b55      	ldr	r3, [pc, #340]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800138a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138c:	4a54      	ldr	r2, [pc, #336]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800138e:	f023 0304 	bic.w	r3, r3, #4
 8001392:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d015      	beq.n	80013c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800139c:	f7ff fd76 	bl	8000e8c <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a2:	e00a      	b.n	80013ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a4:	f7ff fd72 	bl	8000e8c <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e0cb      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ba:	4b49      	ldr	r3, [pc, #292]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80013bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0ee      	beq.n	80013a4 <HAL_RCC_OscConfig+0x334>
 80013c6:	e014      	b.n	80013f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c8:	f7ff fd60 	bl	8000e8c <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ce:	e00a      	b.n	80013e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d0:	f7ff fd5c 	bl	8000e8c <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	f241 3288 	movw	r2, #5000	; 0x1388
 80013de:	4293      	cmp	r3, r2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e0b5      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e6:	4b3e      	ldr	r3, [pc, #248]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1ee      	bne.n	80013d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013f2:	7dfb      	ldrb	r3, [r7, #23]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d105      	bne.n	8001404 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f8:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	4a38      	ldr	r2, [pc, #224]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80013fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001402:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80a1 	beq.w	8001550 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800140e:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b08      	cmp	r3, #8
 8001418:	d05c      	beq.n	80014d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d141      	bne.n	80014a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001422:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <HAL_RCC_OscConfig+0x478>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fd30 	bl	8000e8c <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001430:	f7ff fd2c 	bl	8000e8c <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e087      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001442:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69da      	ldr	r2, [r3, #28]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	019b      	lsls	r3, r3, #6
 800145e:	431a      	orrs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	085b      	lsrs	r3, r3, #1
 8001466:	3b01      	subs	r3, #1
 8001468:	041b      	lsls	r3, r3, #16
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	061b      	lsls	r3, r3, #24
 8001472:	491b      	ldr	r1, [pc, #108]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <HAL_RCC_OscConfig+0x478>)
 800147a:	2201      	movs	r2, #1
 800147c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7ff fd05 	bl	8000e8c <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001486:	f7ff fd01 	bl	8000e8c <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e05c      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x416>
 80014a4:	e054      	b.n	8001550 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <HAL_RCC_OscConfig+0x478>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fcee 	bl	8000e8c <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff fcea 	bl	8000e8c <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e045      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x444>
 80014d2:	e03d      	b.n	8001550 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d107      	bne.n	80014ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e038      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40007000 	.word	0x40007000
 80014e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_RCC_OscConfig+0x4ec>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d028      	beq.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001504:	429a      	cmp	r2, r3
 8001506:	d121      	bne.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001512:	429a      	cmp	r2, r3
 8001514:	d11a      	bne.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800151c:	4013      	ands	r3, r2
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001522:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001524:	4293      	cmp	r3, r2
 8001526:	d111      	bne.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	085b      	lsrs	r3, r3, #1
 8001534:	3b01      	subs	r3, #1
 8001536:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d107      	bne.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800

08001560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0cc      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001574:	4b68      	ldr	r3, [pc, #416]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 030f 	and.w	r3, r3, #15
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d90c      	bls.n	800159c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001582:	4b65      	ldr	r3, [pc, #404]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158a:	4b63      	ldr	r3, [pc, #396]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d001      	beq.n	800159c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0b8      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d020      	beq.n	80015ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015b4:	4b59      	ldr	r3, [pc, #356]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	4a58      	ldr	r2, [pc, #352]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015cc:	4b53      	ldr	r3, [pc, #332]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4a52      	ldr	r2, [pc, #328]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d8:	4b50      	ldr	r3, [pc, #320]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	494d      	ldr	r1, [pc, #308]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d044      	beq.n	8001680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d107      	bne.n	800160e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	4b47      	ldr	r3, [pc, #284]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d119      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e07f      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d003      	beq.n	800161e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800161a:	2b03      	cmp	r3, #3
 800161c:	d107      	bne.n	800162e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161e:	4b3f      	ldr	r3, [pc, #252]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d109      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e06f      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162e:	4b3b      	ldr	r3, [pc, #236]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e067      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800163e:	4b37      	ldr	r3, [pc, #220]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f023 0203 	bic.w	r2, r3, #3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	4934      	ldr	r1, [pc, #208]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	4313      	orrs	r3, r2
 800164e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001650:	f7ff fc1c 	bl	8000e8c <HAL_GetTick>
 8001654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001656:	e00a      	b.n	800166e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001658:	f7ff fc18 	bl	8000e8c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f241 3288 	movw	r2, #5000	; 0x1388
 8001666:	4293      	cmp	r3, r2
 8001668:	d901      	bls.n	800166e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e04f      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166e:	4b2b      	ldr	r3, [pc, #172]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 020c 	and.w	r2, r3, #12
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	429a      	cmp	r2, r3
 800167e:	d1eb      	bne.n	8001658 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001680:	4b25      	ldr	r3, [pc, #148]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 030f 	and.w	r3, r3, #15
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d20c      	bcs.n	80016a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168e:	4b22      	ldr	r3, [pc, #136]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001696:	4b20      	ldr	r3, [pc, #128]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e032      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d008      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	4916      	ldr	r1, [pc, #88]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d009      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	490e      	ldr	r1, [pc, #56]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016e6:	f000 f821 	bl	800172c <HAL_RCC_GetSysClockFreq>
 80016ea:	4602      	mov	r2, r0
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	490a      	ldr	r1, [pc, #40]	; (8001720 <HAL_RCC_ClockConfig+0x1c0>)
 80016f8:	5ccb      	ldrb	r3, [r1, r3]
 80016fa:	fa22 f303 	lsr.w	r3, r2, r3
 80016fe:	4a09      	ldr	r2, [pc, #36]	; (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_RCC_ClockConfig+0x1c8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fb7c 	bl	8000e04 <HAL_InitTick>

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023c00 	.word	0x40023c00
 800171c:	40023800 	.word	0x40023800
 8001720:	08001928 	.word	0x08001928
 8001724:	20000000 	.word	0x20000000
 8001728:	20000004 	.word	0x20000004

0800172c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800172c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001730:	b090      	sub	sp, #64	; 0x40
 8001732:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	637b      	str	r3, [r7, #52]	; 0x34
 8001738:	2300      	movs	r3, #0
 800173a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800173c:	2300      	movs	r3, #0
 800173e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001744:	4b59      	ldr	r3, [pc, #356]	; (80018ac <HAL_RCC_GetSysClockFreq+0x180>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b08      	cmp	r3, #8
 800174e:	d00d      	beq.n	800176c <HAL_RCC_GetSysClockFreq+0x40>
 8001750:	2b08      	cmp	r3, #8
 8001752:	f200 80a1 	bhi.w	8001898 <HAL_RCC_GetSysClockFreq+0x16c>
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <HAL_RCC_GetSysClockFreq+0x34>
 800175a:	2b04      	cmp	r3, #4
 800175c:	d003      	beq.n	8001766 <HAL_RCC_GetSysClockFreq+0x3a>
 800175e:	e09b      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001760:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001762:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001764:	e09b      	b.n	800189e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001766:	4b53      	ldr	r3, [pc, #332]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001768:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800176a:	e098      	b.n	800189e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800176c:	4b4f      	ldr	r3, [pc, #316]	; (80018ac <HAL_RCC_GetSysClockFreq+0x180>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001774:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001776:	4b4d      	ldr	r3, [pc, #308]	; (80018ac <HAL_RCC_GetSysClockFreq+0x180>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d028      	beq.n	80017d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001782:	4b4a      	ldr	r3, [pc, #296]	; (80018ac <HAL_RCC_GetSysClockFreq+0x180>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	099b      	lsrs	r3, r3, #6
 8001788:	2200      	movs	r2, #0
 800178a:	623b      	str	r3, [r7, #32]
 800178c:	627a      	str	r2, [r7, #36]	; 0x24
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001794:	2100      	movs	r1, #0
 8001796:	4b47      	ldr	r3, [pc, #284]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001798:	fb03 f201 	mul.w	r2, r3, r1
 800179c:	2300      	movs	r3, #0
 800179e:	fb00 f303 	mul.w	r3, r0, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	4a43      	ldr	r2, [pc, #268]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80017a6:	fba0 1202 	umull	r1, r2, r0, r2
 80017aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017ac:	460a      	mov	r2, r1
 80017ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80017b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017b2:	4413      	add	r3, r2
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b8:	2200      	movs	r2, #0
 80017ba:	61bb      	str	r3, [r7, #24]
 80017bc:	61fa      	str	r2, [r7, #28]
 80017be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017c6:	f7fe fd11 	bl	80001ec <__aeabi_uldivmod>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4613      	mov	r3, r2
 80017d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017d2:	e053      	b.n	800187c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d4:	4b35      	ldr	r3, [pc, #212]	; (80018ac <HAL_RCC_GetSysClockFreq+0x180>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	099b      	lsrs	r3, r3, #6
 80017da:	2200      	movs	r2, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	617a      	str	r2, [r7, #20]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80017e6:	f04f 0b00 	mov.w	fp, #0
 80017ea:	4652      	mov	r2, sl
 80017ec:	465b      	mov	r3, fp
 80017ee:	f04f 0000 	mov.w	r0, #0
 80017f2:	f04f 0100 	mov.w	r1, #0
 80017f6:	0159      	lsls	r1, r3, #5
 80017f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017fc:	0150      	lsls	r0, r2, #5
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	ebb2 080a 	subs.w	r8, r2, sl
 8001806:	eb63 090b 	sbc.w	r9, r3, fp
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001816:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800181a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800181e:	ebb2 0408 	subs.w	r4, r2, r8
 8001822:	eb63 0509 	sbc.w	r5, r3, r9
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	00eb      	lsls	r3, r5, #3
 8001830:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001834:	00e2      	lsls	r2, r4, #3
 8001836:	4614      	mov	r4, r2
 8001838:	461d      	mov	r5, r3
 800183a:	eb14 030a 	adds.w	r3, r4, sl
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	eb45 030b 	adc.w	r3, r5, fp
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001852:	4629      	mov	r1, r5
 8001854:	028b      	lsls	r3, r1, #10
 8001856:	4621      	mov	r1, r4
 8001858:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800185c:	4621      	mov	r1, r4
 800185e:	028a      	lsls	r2, r1, #10
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001866:	2200      	movs	r2, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	60fa      	str	r2, [r7, #12]
 800186c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001870:	f7fe fcbc 	bl	80001ec <__aeabi_uldivmod>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4613      	mov	r3, r2
 800187a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCC_GetSysClockFreq+0x180>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	0c1b      	lsrs	r3, r3, #16
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	3301      	adds	r3, #1
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800188c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800188e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001890:	fbb2 f3f3 	udiv	r3, r2, r3
 8001894:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001896:	e002      	b.n	800189e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800189a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800189c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800189e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3740      	adds	r7, #64	; 0x40
 80018a4:	46bd      	mov	sp, r7
 80018a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	00f42400 	.word	0x00f42400
 80018b4:	017d7840 	.word	0x017d7840

080018b8 <__libc_init_array>:
 80018b8:	b570      	push	{r4, r5, r6, lr}
 80018ba:	4d0d      	ldr	r5, [pc, #52]	; (80018f0 <__libc_init_array+0x38>)
 80018bc:	4c0d      	ldr	r4, [pc, #52]	; (80018f4 <__libc_init_array+0x3c>)
 80018be:	1b64      	subs	r4, r4, r5
 80018c0:	10a4      	asrs	r4, r4, #2
 80018c2:	2600      	movs	r6, #0
 80018c4:	42a6      	cmp	r6, r4
 80018c6:	d109      	bne.n	80018dc <__libc_init_array+0x24>
 80018c8:	4d0b      	ldr	r5, [pc, #44]	; (80018f8 <__libc_init_array+0x40>)
 80018ca:	4c0c      	ldr	r4, [pc, #48]	; (80018fc <__libc_init_array+0x44>)
 80018cc:	f000 f820 	bl	8001910 <_init>
 80018d0:	1b64      	subs	r4, r4, r5
 80018d2:	10a4      	asrs	r4, r4, #2
 80018d4:	2600      	movs	r6, #0
 80018d6:	42a6      	cmp	r6, r4
 80018d8:	d105      	bne.n	80018e6 <__libc_init_array+0x2e>
 80018da:	bd70      	pop	{r4, r5, r6, pc}
 80018dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80018e0:	4798      	blx	r3
 80018e2:	3601      	adds	r6, #1
 80018e4:	e7ee      	b.n	80018c4 <__libc_init_array+0xc>
 80018e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80018ea:	4798      	blx	r3
 80018ec:	3601      	adds	r6, #1
 80018ee:	e7f2      	b.n	80018d6 <__libc_init_array+0x1e>
 80018f0:	08001940 	.word	0x08001940
 80018f4:	08001940 	.word	0x08001940
 80018f8:	08001940 	.word	0x08001940
 80018fc:	08001944 	.word	0x08001944

08001900 <memset>:
 8001900:	4402      	add	r2, r0
 8001902:	4603      	mov	r3, r0
 8001904:	4293      	cmp	r3, r2
 8001906:	d100      	bne.n	800190a <memset+0xa>
 8001908:	4770      	bx	lr
 800190a:	f803 1b01 	strb.w	r1, [r3], #1
 800190e:	e7f9      	b.n	8001904 <memset+0x4>

08001910 <_init>:
 8001910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001912:	bf00      	nop
 8001914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001916:	bc08      	pop	{r3}
 8001918:	469e      	mov	lr, r3
 800191a:	4770      	bx	lr

0800191c <_fini>:
 800191c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800191e:	bf00      	nop
 8001920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001922:	bc08      	pop	{r3}
 8001924:	469e      	mov	lr, r3
 8001926:	4770      	bx	lr
